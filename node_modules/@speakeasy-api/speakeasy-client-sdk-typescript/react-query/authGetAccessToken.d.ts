import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type AuthGetAccessTokenQueryData = shared.AccessToken;
/**
 * Get or refresh an access token for the current workspace.
 */
export declare function useAuthGetAccessToken(request: operations.GetAccessTokenRequest, options?: QueryHookOptions<AuthGetAccessTokenQueryData>): UseQueryResult<AuthGetAccessTokenQueryData, Error>;
/**
 * Get or refresh an access token for the current workspace.
 */
export declare function useAuthGetAccessTokenSuspense(request: operations.GetAccessTokenRequest, options?: SuspenseQueryHookOptions<AuthGetAccessTokenQueryData>): UseSuspenseQueryResult<AuthGetAccessTokenQueryData, Error>;
export declare function prefetchAuthGetAccessToken(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetAccessTokenRequest): Promise<void>;
export declare function setAuthGetAccessTokenData(client: QueryClient, queryKeyBase: [parameters: {
    workspaceId: string;
}], data: AuthGetAccessTokenQueryData): AuthGetAccessTokenQueryData | undefined;
export declare function invalidateAuthGetAccessToken(client: QueryClient, queryKeyBase: TupleToPrefixes<[parameters: {
    workspaceId: string;
}]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllAuthGetAccessToken(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildAuthGetAccessTokenQuery(client$: SpeakeasyCore, request: operations.GetAccessTokenRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<AuthGetAccessTokenQueryData>;
};
export declare function queryKeyAuthGetAccessToken(parameters: {
    workspaceId: string;
}): QueryKey;
//# sourceMappingURL=authGetAccessToken.d.ts.map