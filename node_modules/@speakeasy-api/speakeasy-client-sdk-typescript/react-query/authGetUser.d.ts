import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type AuthGetUserQueryData = shared.User;
/**
 * Get information about the current user.
 */
export declare function useAuthGetUser(options?: QueryHookOptions<AuthGetUserQueryData>): UseQueryResult<AuthGetUserQueryData, Error>;
/**
 * Get information about the current user.
 */
export declare function useAuthGetUserSuspense(options?: SuspenseQueryHookOptions<AuthGetUserQueryData>): UseSuspenseQueryResult<AuthGetUserQueryData, Error>;
export declare function prefetchAuthGetUser(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setAuthGetUserData(client: QueryClient, data: AuthGetUserQueryData): AuthGetUserQueryData | undefined;
export declare function invalidateAllAuthGetUser(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildAuthGetUserQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<AuthGetUserQueryData>;
};
export declare function queryKeyAuthGetUser(): QueryKey;
//# sourceMappingURL=authGetUser.d.ts.map