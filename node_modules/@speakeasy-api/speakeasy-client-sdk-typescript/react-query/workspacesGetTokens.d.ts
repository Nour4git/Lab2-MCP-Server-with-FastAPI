import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type WorkspacesGetTokensQueryData = Array<shared.WorkspaceToken>;
/**
 * Get tokens for a particular workspace
 */
export declare function useWorkspacesGetTokens(request: operations.GetWorkspaceTokensRequest, options?: QueryHookOptions<WorkspacesGetTokensQueryData>): UseQueryResult<WorkspacesGetTokensQueryData, Error>;
/**
 * Get tokens for a particular workspace
 */
export declare function useWorkspacesGetTokensSuspense(request: operations.GetWorkspaceTokensRequest, options?: SuspenseQueryHookOptions<WorkspacesGetTokensQueryData>): UseSuspenseQueryResult<WorkspacesGetTokensQueryData, Error>;
export declare function prefetchWorkspacesGetTokens(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceTokensRequest): Promise<void>;
export declare function setWorkspacesGetTokensData(client: QueryClient, queryKeyBase: [workspaceId: string | undefined], data: WorkspacesGetTokensQueryData): WorkspacesGetTokensQueryData | undefined;
export declare function invalidateWorkspacesGetTokens(client: QueryClient, queryKeyBase: TupleToPrefixes<[workspaceId: string | undefined]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllWorkspacesGetTokens(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildWorkspacesGetTokensQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceTokensRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetTokensQueryData>;
};
export declare function queryKeyWorkspacesGetTokens(workspaceId: string | undefined): QueryKey;
//# sourceMappingURL=workspacesGetTokens.d.ts.map