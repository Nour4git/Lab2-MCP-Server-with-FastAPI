import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ArtifactsGetBlobQueryData = ReadableStream<Uint8Array>;
/**
 * Get blob for a particular digest
 */
export declare function useArtifactsGetBlob(request: operations.GetBlobRequest, options?: QueryHookOptions<ArtifactsGetBlobQueryData>): UseQueryResult<ArtifactsGetBlobQueryData, Error>;
/**
 * Get blob for a particular digest
 */
export declare function useArtifactsGetBlobSuspense(request: operations.GetBlobRequest, options?: SuspenseQueryHookOptions<ArtifactsGetBlobQueryData>): UseSuspenseQueryResult<ArtifactsGetBlobQueryData, Error>;
export declare function prefetchArtifactsGetBlob(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetBlobRequest): Promise<void>;
export declare function setArtifactsGetBlobData(client: QueryClient, queryKeyBase: [
    organizationSlug: string,
    workspaceSlug: string,
    namespaceName: string,
    digest: string
], data: ArtifactsGetBlobQueryData): ArtifactsGetBlobQueryData | undefined;
export declare function invalidateArtifactsGetBlob(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    organizationSlug: string,
    workspaceSlug: string,
    namespaceName: string,
    digest: string
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllArtifactsGetBlob(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildArtifactsGetBlobQuery(client$: SpeakeasyCore, request: operations.GetBlobRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ArtifactsGetBlobQueryData>;
};
export declare function queryKeyArtifactsGetBlob(organizationSlug: string, workspaceSlug: string, namespaceName: string, digest: string): QueryKey;
//# sourceMappingURL=artifactsGetBlob.d.ts.map