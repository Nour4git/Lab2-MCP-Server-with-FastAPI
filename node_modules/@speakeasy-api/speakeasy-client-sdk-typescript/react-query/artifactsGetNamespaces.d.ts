import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type ArtifactsGetNamespacesQueryData = shared.GetNamespacesResponse;
/**
 * Each namespace contains many revisions.
 */
export declare function useArtifactsGetNamespaces(options?: QueryHookOptions<ArtifactsGetNamespacesQueryData>): UseQueryResult<ArtifactsGetNamespacesQueryData, Error>;
/**
 * Each namespace contains many revisions.
 */
export declare function useArtifactsGetNamespacesSuspense(options?: SuspenseQueryHookOptions<ArtifactsGetNamespacesQueryData>): UseSuspenseQueryResult<ArtifactsGetNamespacesQueryData, Error>;
export declare function prefetchArtifactsGetNamespaces(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setArtifactsGetNamespacesData(client: QueryClient, data: ArtifactsGetNamespacesQueryData): ArtifactsGetNamespacesQueryData | undefined;
export declare function invalidateAllArtifactsGetNamespaces(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildArtifactsGetNamespacesQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ArtifactsGetNamespacesQueryData>;
};
export declare function queryKeyArtifactsGetNamespaces(): QueryKey;
//# sourceMappingURL=artifactsGetNamespaces.d.ts.map