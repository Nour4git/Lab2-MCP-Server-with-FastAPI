"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWorkspacesGetSettings = useWorkspacesGetSettings;
exports.useWorkspacesGetSettingsSuspense = useWorkspacesGetSettingsSuspense;
exports.prefetchWorkspacesGetSettings = prefetchWorkspacesGetSettings;
exports.setWorkspacesGetSettingsData = setWorkspacesGetSettingsData;
exports.invalidateWorkspacesGetSettings = invalidateWorkspacesGetSettings;
exports.invalidateAllWorkspacesGetSettings = invalidateAllWorkspacesGetSettings;
exports.buildWorkspacesGetSettingsQuery = buildWorkspacesGetSettingsQuery;
exports.queryKeyWorkspacesGetSettings = queryKeyWorkspacesGetSettings;
const react_query_1 = require("@tanstack/react-query");
const workspacesGetSettings_js_1 = require("../funcs/workspacesGetSettings.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get workspace settings
 *
 * @remarks
 * Get settings about a particular workspace.
 */
function useWorkspacesGetSettings(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildWorkspacesGetSettingsQuery(client, request, options),
        ...options,
    });
}
/**
 * Get workspace settings
 *
 * @remarks
 * Get settings about a particular workspace.
 */
function useWorkspacesGetSettingsSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildWorkspacesGetSettingsQuery(client, request, options),
        ...options,
    });
}
function prefetchWorkspacesGetSettings(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildWorkspacesGetSettingsQuery(client$, request),
    });
}
function setWorkspacesGetSettingsData(client, queryKeyBase, data) {
    const key = queryKeyWorkspacesGetSettings(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateWorkspacesGetSettings(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "getSettings",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllWorkspacesGetSettings(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "getSettings",
        ],
    });
}
function buildWorkspacesGetSettingsQuery(client$, request, options) {
    return {
        queryKey: queryKeyWorkspacesGetSettings(request.workspaceId),
        queryFn: async function workspacesGetSettingsQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, workspacesGetSettings_js_1.workspacesGetSettings)(client$, request, mergedOptions));
        },
    };
}
function queryKeyWorkspacesGetSettings(workspaceId) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Workspaces",
        "getSettings",
        workspaceId,
    ];
}
//# sourceMappingURL=workspacesGetSettings.js.map