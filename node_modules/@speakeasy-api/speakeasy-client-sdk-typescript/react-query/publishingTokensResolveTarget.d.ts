import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type PublishingTokensResolveTargetQueryData = string;
/**
 * Get a specific publishing token target
 *
 * @remarks
 * Get information about a particular publishing token target.
 */
export declare function usePublishingTokensResolveTarget(request: operations.GetPublishingTokenTargetByIDRequest, options?: QueryHookOptions<PublishingTokensResolveTargetQueryData>): UseQueryResult<PublishingTokensResolveTargetQueryData, Error>;
/**
 * Get a specific publishing token target
 *
 * @remarks
 * Get information about a particular publishing token target.
 */
export declare function usePublishingTokensResolveTargetSuspense(request: operations.GetPublishingTokenTargetByIDRequest, options?: SuspenseQueryHookOptions<PublishingTokensResolveTargetQueryData>): UseSuspenseQueryResult<PublishingTokensResolveTargetQueryData, Error>;
export declare function prefetchPublishingTokensResolveTarget(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetPublishingTokenTargetByIDRequest): Promise<void>;
export declare function setPublishingTokensResolveTargetData(client: QueryClient, queryKeyBase: [tokenID: string], data: PublishingTokensResolveTargetQueryData): PublishingTokensResolveTargetQueryData | undefined;
export declare function invalidatePublishingTokensResolveTarget(client: QueryClient, queryKeyBase: TupleToPrefixes<[tokenID: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllPublishingTokensResolveTarget(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildPublishingTokensResolveTargetQuery(client$: SpeakeasyCore, request: operations.GetPublishingTokenTargetByIDRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<PublishingTokensResolveTargetQueryData>;
};
export declare function queryKeyPublishingTokensResolveTarget(tokenID: string): QueryKey;
//# sourceMappingURL=publishingTokensResolveTarget.d.ts.map