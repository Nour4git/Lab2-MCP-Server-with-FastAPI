import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type OrganizationsGetBillingAddOnsQueryData = shared.OrganizationBillingAddOnResponse;
/**
 * Get billing add ons
 */
export declare function useOrganizationsGetBillingAddOns(options?: QueryHookOptions<OrganizationsGetBillingAddOnsQueryData>): UseQueryResult<OrganizationsGetBillingAddOnsQueryData, Error>;
/**
 * Get billing add ons
 */
export declare function useOrganizationsGetBillingAddOnsSuspense(options?: SuspenseQueryHookOptions<OrganizationsGetBillingAddOnsQueryData>): UseSuspenseQueryResult<OrganizationsGetBillingAddOnsQueryData, Error>;
export declare function prefetchOrganizationsGetBillingAddOns(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setOrganizationsGetBillingAddOnsData(client: QueryClient, data: OrganizationsGetBillingAddOnsQueryData): OrganizationsGetBillingAddOnsQueryData | undefined;
export declare function invalidateAllOrganizationsGetBillingAddOns(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildOrganizationsGetBillingAddOnsQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<OrganizationsGetBillingAddOnsQueryData>;
};
export declare function queryKeyOrganizationsGetBillingAddOns(): QueryKey;
//# sourceMappingURL=organizationsGetBillingAddOns.d.ts.map