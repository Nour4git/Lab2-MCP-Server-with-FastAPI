import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type OrganizationsGetAllQueryData = Array<shared.Organization>;
/**
 * Get organizations for a user
 *
 * @remarks
 * Returns a list of organizations a user has access too
 */
export declare function useOrganizationsGetAll(options?: QueryHookOptions<OrganizationsGetAllQueryData>): UseQueryResult<OrganizationsGetAllQueryData, Error>;
/**
 * Get organizations for a user
 *
 * @remarks
 * Returns a list of organizations a user has access too
 */
export declare function useOrganizationsGetAllSuspense(options?: SuspenseQueryHookOptions<OrganizationsGetAllQueryData>): UseSuspenseQueryResult<OrganizationsGetAllQueryData, Error>;
export declare function prefetchOrganizationsGetAll(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setOrganizationsGetAllData(client: QueryClient, data: OrganizationsGetAllQueryData): OrganizationsGetAllQueryData | undefined;
export declare function invalidateAllOrganizationsGetAll(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildOrganizationsGetAllQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<OrganizationsGetAllQueryData>;
};
export declare function queryKeyOrganizationsGetAll(): QueryKey;
//# sourceMappingURL=organizationsGetAll.d.ts.map