import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ReportsGetLintingReportSignedUrlQueryData = operations.GetLintingReportSignedUrlSignedAccess;
/**
 * Get the signed access url for the linting reports for a particular document.
 */
export declare function useReportsGetLintingReportSignedUrl(request: operations.GetLintingReportSignedUrlRequest, options?: QueryHookOptions<ReportsGetLintingReportSignedUrlQueryData>): UseQueryResult<ReportsGetLintingReportSignedUrlQueryData, Error>;
/**
 * Get the signed access url for the linting reports for a particular document.
 */
export declare function useReportsGetLintingReportSignedUrlSuspense(request: operations.GetLintingReportSignedUrlRequest, options?: SuspenseQueryHookOptions<ReportsGetLintingReportSignedUrlQueryData>): UseSuspenseQueryResult<ReportsGetLintingReportSignedUrlQueryData, Error>;
export declare function prefetchReportsGetLintingReportSignedUrl(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetLintingReportSignedUrlRequest): Promise<void>;
export declare function setReportsGetLintingReportSignedUrlData(client: QueryClient, queryKeyBase: [documentChecksum: string], data: ReportsGetLintingReportSignedUrlQueryData): ReportsGetLintingReportSignedUrlQueryData | undefined;
export declare function invalidateReportsGetLintingReportSignedUrl(client: QueryClient, queryKeyBase: TupleToPrefixes<[documentChecksum: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllReportsGetLintingReportSignedUrl(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildReportsGetLintingReportSignedUrlQuery(client$: SpeakeasyCore, request: operations.GetLintingReportSignedUrlRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ReportsGetLintingReportSignedUrlQueryData>;
};
export declare function queryKeyReportsGetLintingReportSignedUrl(documentChecksum: string): QueryKey;
//# sourceMappingURL=reportsGetLintingReportSignedUrl.d.ts.map