import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type PublishingTokensListQueryData = Array<shared.PublishingToken>;
/**
 * Get publishing tokens for a workspace
 *
 * @remarks
 * Returns a publishing token for the current workspace
 */
export declare function usePublishingTokensList(options?: QueryHookOptions<PublishingTokensListQueryData>): UseQueryResult<PublishingTokensListQueryData, Error>;
/**
 * Get publishing tokens for a workspace
 *
 * @remarks
 * Returns a publishing token for the current workspace
 */
export declare function usePublishingTokensListSuspense(options?: SuspenseQueryHookOptions<PublishingTokensListQueryData>): UseSuspenseQueryResult<PublishingTokensListQueryData, Error>;
export declare function prefetchPublishingTokensList(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setPublishingTokensListData(client: QueryClient, data: PublishingTokensListQueryData): PublishingTokensListQueryData | undefined;
export declare function invalidateAllPublishingTokensList(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildPublishingTokensListQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<PublishingTokensListQueryData>;
};
export declare function queryKeyPublishingTokensList(): QueryKey;
//# sourceMappingURL=publishingTokensList.d.ts.map