import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type PublishingTokensResolveMetadataQueryData = operations.GetPublishingTokenPublicMetadataResponseBody;
/**
 * Get metadata about the token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
export declare function usePublishingTokensResolveMetadata(request: operations.GetPublishingTokenPublicMetadataRequest, options?: QueryHookOptions<PublishingTokensResolveMetadataQueryData>): UseQueryResult<PublishingTokensResolveMetadataQueryData, Error>;
/**
 * Get metadata about the token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
export declare function usePublishingTokensResolveMetadataSuspense(request: operations.GetPublishingTokenPublicMetadataRequest, options?: SuspenseQueryHookOptions<PublishingTokensResolveMetadataQueryData>): UseSuspenseQueryResult<PublishingTokensResolveMetadataQueryData, Error>;
export declare function prefetchPublishingTokensResolveMetadata(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetPublishingTokenPublicMetadataRequest): Promise<void>;
export declare function setPublishingTokensResolveMetadataData(client: QueryClient, queryKeyBase: [tokenID: string], data: PublishingTokensResolveMetadataQueryData): PublishingTokensResolveMetadataQueryData | undefined;
export declare function invalidatePublishingTokensResolveMetadata(client: QueryClient, queryKeyBase: TupleToPrefixes<[tokenID: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllPublishingTokensResolveMetadata(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildPublishingTokensResolveMetadataQuery(client$: SpeakeasyCore, request: operations.GetPublishingTokenPublicMetadataRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<PublishingTokensResolveMetadataQueryData>;
};
export declare function queryKeyPublishingTokensResolveMetadata(tokenID: string): QueryKey;
//# sourceMappingURL=publishingTokensResolveMetadata.d.ts.map