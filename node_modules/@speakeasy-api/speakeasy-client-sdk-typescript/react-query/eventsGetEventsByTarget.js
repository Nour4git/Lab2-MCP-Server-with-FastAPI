"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEventsGetEventsByTarget = useEventsGetEventsByTarget;
exports.useEventsGetEventsByTargetSuspense = useEventsGetEventsByTargetSuspense;
exports.prefetchEventsGetEventsByTarget = prefetchEventsGetEventsByTarget;
exports.setEventsGetEventsByTargetData = setEventsGetEventsByTargetData;
exports.invalidateEventsGetEventsByTarget = invalidateEventsGetEventsByTarget;
exports.invalidateAllEventsGetEventsByTarget = invalidateAllEventsGetEventsByTarget;
exports.buildEventsGetEventsByTargetQuery = buildEventsGetEventsByTargetQuery;
exports.queryKeyEventsGetEventsByTarget = queryKeyEventsGetEventsByTarget;
const react_query_1 = require("@tanstack/react-query");
const eventsGetEventsByTarget_js_1 = require("../funcs/eventsGetEventsByTarget.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Load recent events for a particular workspace
 */
function useEventsGetEventsByTarget(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildEventsGetEventsByTargetQuery(client, request, options),
        ...options,
    });
}
/**
 * Load recent events for a particular workspace
 */
function useEventsGetEventsByTargetSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildEventsGetEventsByTargetQuery(client, request, options),
        ...options,
    });
}
function prefetchEventsGetEventsByTarget(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildEventsGetEventsByTargetQuery(client$, request),
    });
}
function setEventsGetEventsByTargetData(client, queryKeyBase, data) {
    const key = queryKeyEventsGetEventsByTarget(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateEventsGetEventsByTarget(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Events",
            "getEventsByTarget",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllEventsGetEventsByTarget(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Events",
            "getEventsByTarget",
        ],
    });
}
function buildEventsGetEventsByTargetQuery(client$, request, options) {
    return {
        queryKey: queryKeyEventsGetEventsByTarget(request.workspaceId, request.targetId, { afterCreatedAt: request.afterCreatedAt }),
        queryFn: async function eventsGetEventsByTargetQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, eventsGetEventsByTarget_js_1.eventsGetEventsByTarget)(client$, request, mergedOptions));
        },
    };
}
function queryKeyEventsGetEventsByTarget(workspaceId, targetId, parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Events",
        "getEventsByTarget",
        workspaceId,
        targetId,
        parameters,
    ];
}
//# sourceMappingURL=eventsGetEventsByTarget.js.map