import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type WorkspacesGetFeatureFlagsQueryData = shared.WorkspaceFeatureFlagResponse;
/**
 * Get workspace feature flags
 */
export declare function useWorkspacesGetFeatureFlags(request: operations.GetWorkspaceFeatureFlagsRequest, options?: QueryHookOptions<WorkspacesGetFeatureFlagsQueryData>): UseQueryResult<WorkspacesGetFeatureFlagsQueryData, Error>;
/**
 * Get workspace feature flags
 */
export declare function useWorkspacesGetFeatureFlagsSuspense(request: operations.GetWorkspaceFeatureFlagsRequest, options?: SuspenseQueryHookOptions<WorkspacesGetFeatureFlagsQueryData>): UseSuspenseQueryResult<WorkspacesGetFeatureFlagsQueryData, Error>;
export declare function prefetchWorkspacesGetFeatureFlags(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceFeatureFlagsRequest): Promise<void>;
export declare function setWorkspacesGetFeatureFlagsData(client: QueryClient, queryKeyBase: [workspaceId: string | undefined], data: WorkspacesGetFeatureFlagsQueryData): WorkspacesGetFeatureFlagsQueryData | undefined;
export declare function invalidateWorkspacesGetFeatureFlags(client: QueryClient, queryKeyBase: TupleToPrefixes<[workspaceId: string | undefined]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllWorkspacesGetFeatureFlags(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildWorkspacesGetFeatureFlagsQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceFeatureFlagsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetFeatureFlagsQueryData>;
};
export declare function queryKeyWorkspacesGetFeatureFlags(workspaceId: string | undefined): QueryKey;
//# sourceMappingURL=workspacesGetFeatureFlags.d.ts.map