"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCodeSamplesGet = useCodeSamplesGet;
exports.useCodeSamplesGetSuspense = useCodeSamplesGetSuspense;
exports.prefetchCodeSamplesGet = prefetchCodeSamplesGet;
exports.setCodeSamplesGetData = setCodeSamplesGetData;
exports.invalidateCodeSamplesGet = invalidateCodeSamplesGet;
exports.invalidateAllCodeSamplesGet = invalidateAllCodeSamplesGet;
exports.buildCodeSamplesGetQuery = buildCodeSamplesGetQuery;
exports.queryKeyCodeSamplesGet = queryKeyCodeSamplesGet;
const react_query_1 = require("@tanstack/react-query");
const codeSamplesGet_js_1 = require("../funcs/codeSamplesGet.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
function useCodeSamplesGet(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildCodeSamplesGetQuery(client, request, options),
        ...options,
    });
}
/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
function useCodeSamplesGetSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildCodeSamplesGetQuery(client, request, options),
        ...options,
    });
}
function prefetchCodeSamplesGet(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildCodeSamplesGetQuery(client$, request),
    });
}
function setCodeSamplesGetData(client, queryKeyBase, data) {
    const key = queryKeyCodeSamplesGet(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateCodeSamplesGet(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "CodeSamples",
            "get",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllCodeSamplesGet(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "CodeSamples",
            "get",
        ],
    });
}
function buildCodeSamplesGetQuery(client$, request, options) {
    return {
        queryKey: queryKeyCodeSamplesGet({
            registryUrl: request.registryUrl,
            operationIds: request.operationIds,
            methodPaths: request.methodPaths,
            languages: request.languages,
        }),
        queryFn: async function codeSamplesGetQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, codeSamplesGet_js_1.codeSamplesGet)(client$, request, mergedOptions));
        },
    };
}
function queryKeyCodeSamplesGet(parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "CodeSamples",
        "get",
        parameters,
    ];
}
//# sourceMappingURL=codeSamplesGet.js.map