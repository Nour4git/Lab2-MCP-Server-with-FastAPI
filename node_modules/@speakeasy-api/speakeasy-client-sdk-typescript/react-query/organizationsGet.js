"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOrganizationsGet = useOrganizationsGet;
exports.useOrganizationsGetSuspense = useOrganizationsGetSuspense;
exports.prefetchOrganizationsGet = prefetchOrganizationsGet;
exports.setOrganizationsGetData = setOrganizationsGetData;
exports.invalidateOrganizationsGet = invalidateOrganizationsGet;
exports.invalidateAllOrganizationsGet = invalidateAllOrganizationsGet;
exports.buildOrganizationsGetQuery = buildOrganizationsGetQuery;
exports.queryKeyOrganizationsGet = queryKeyOrganizationsGet;
const react_query_1 = require("@tanstack/react-query");
const organizationsGet_js_1 = require("../funcs/organizationsGet.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get organization
 *
 * @remarks
 * Get information about a particular organization.
 */
function useOrganizationsGet(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildOrganizationsGetQuery(client, request, options),
        ...options,
    });
}
/**
 * Get organization
 *
 * @remarks
 * Get information about a particular organization.
 */
function useOrganizationsGetSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildOrganizationsGetQuery(client, request, options),
        ...options,
    });
}
function prefetchOrganizationsGet(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildOrganizationsGetQuery(client$, request),
    });
}
function setOrganizationsGetData(client, queryKeyBase, data) {
    const key = queryKeyOrganizationsGet(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateOrganizationsGet(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Organizations",
            "get",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllOrganizationsGet(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Organizations",
            "get",
        ],
    });
}
function buildOrganizationsGetQuery(client$, request, options) {
    return {
        queryKey: queryKeyOrganizationsGet(request.organizationID),
        queryFn: async function organizationsGetQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, organizationsGet_js_1.organizationsGet)(client$, request, mergedOptions));
        },
    };
}
function queryKeyOrganizationsGet(organizationID) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Organizations",
        "get",
        organizationID,
    ];
}
//# sourceMappingURL=organizationsGet.js.map