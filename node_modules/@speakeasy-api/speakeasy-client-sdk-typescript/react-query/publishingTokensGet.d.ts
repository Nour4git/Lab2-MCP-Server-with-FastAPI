import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type PublishingTokensGetQueryData = shared.PublishingToken;
/**
 * Get a specific publishing token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
export declare function usePublishingTokensGet(request: operations.GetPublishingTokenByIDRequest, options?: QueryHookOptions<PublishingTokensGetQueryData>): UseQueryResult<PublishingTokensGetQueryData, Error>;
/**
 * Get a specific publishing token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
export declare function usePublishingTokensGetSuspense(request: operations.GetPublishingTokenByIDRequest, options?: SuspenseQueryHookOptions<PublishingTokensGetQueryData>): UseSuspenseQueryResult<PublishingTokensGetQueryData, Error>;
export declare function prefetchPublishingTokensGet(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetPublishingTokenByIDRequest): Promise<void>;
export declare function setPublishingTokensGetData(client: QueryClient, queryKeyBase: [tokenID: string], data: PublishingTokensGetQueryData): PublishingTokensGetQueryData | undefined;
export declare function invalidatePublishingTokensGet(client: QueryClient, queryKeyBase: TupleToPrefixes<[tokenID: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllPublishingTokensGet(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildPublishingTokensGetQuery(client$: SpeakeasyCore, request: operations.GetPublishingTokenByIDRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<PublishingTokensGetQueryData>;
};
export declare function queryKeyPublishingTokensGet(tokenID: string): QueryKey;
//# sourceMappingURL=publishingTokensGet.d.ts.map