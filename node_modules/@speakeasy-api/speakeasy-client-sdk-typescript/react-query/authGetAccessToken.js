"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthGetAccessToken = useAuthGetAccessToken;
exports.useAuthGetAccessTokenSuspense = useAuthGetAccessTokenSuspense;
exports.prefetchAuthGetAccessToken = prefetchAuthGetAccessToken;
exports.setAuthGetAccessTokenData = setAuthGetAccessTokenData;
exports.invalidateAuthGetAccessToken = invalidateAuthGetAccessToken;
exports.invalidateAllAuthGetAccessToken = invalidateAllAuthGetAccessToken;
exports.buildAuthGetAccessTokenQuery = buildAuthGetAccessTokenQuery;
exports.queryKeyAuthGetAccessToken = queryKeyAuthGetAccessToken;
const react_query_1 = require("@tanstack/react-query");
const authGetAccessToken_js_1 = require("../funcs/authGetAccessToken.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get or refresh an access token for the current workspace.
 */
function useAuthGetAccessToken(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildAuthGetAccessTokenQuery(client, request, options),
        ...options,
    });
}
/**
 * Get or refresh an access token for the current workspace.
 */
function useAuthGetAccessTokenSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildAuthGetAccessTokenQuery(client, request, options),
        ...options,
    });
}
function prefetchAuthGetAccessToken(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildAuthGetAccessTokenQuery(client$, request),
    });
}
function setAuthGetAccessTokenData(client, queryKeyBase, data) {
    const key = queryKeyAuthGetAccessToken(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateAuthGetAccessToken(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Auth",
            "getAccessToken",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllAuthGetAccessToken(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Auth",
            "getAccessToken",
        ],
    });
}
function buildAuthGetAccessTokenQuery(client$, request, options) {
    return {
        queryKey: queryKeyAuthGetAccessToken({ workspaceId: request.workspaceId }),
        queryFn: async function authGetAccessTokenQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, authGetAccessToken_js_1.authGetAccessToken)(client$, request, mergedOptions));
        },
    };
}
function queryKeyAuthGetAccessToken(parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Auth",
        "getAccessToken",
        parameters,
    ];
}
//# sourceMappingURL=authGetAccessToken.js.map