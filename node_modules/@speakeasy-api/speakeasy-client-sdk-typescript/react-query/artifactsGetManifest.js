"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useArtifactsGetManifest = useArtifactsGetManifest;
exports.useArtifactsGetManifestSuspense = useArtifactsGetManifestSuspense;
exports.prefetchArtifactsGetManifest = prefetchArtifactsGetManifest;
exports.setArtifactsGetManifestData = setArtifactsGetManifestData;
exports.invalidateArtifactsGetManifest = invalidateArtifactsGetManifest;
exports.invalidateAllArtifactsGetManifest = invalidateAllArtifactsGetManifest;
exports.buildArtifactsGetManifestQuery = buildArtifactsGetManifestQuery;
exports.queryKeyArtifactsGetManifest = queryKeyArtifactsGetManifest;
const react_query_1 = require("@tanstack/react-query");
const artifactsGetManifest_js_1 = require("../funcs/artifactsGetManifest.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get manifest for a particular reference
 */
function useArtifactsGetManifest(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildArtifactsGetManifestQuery(client, request, options),
        ...options,
    });
}
/**
 * Get manifest for a particular reference
 */
function useArtifactsGetManifestSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildArtifactsGetManifestQuery(client, request, options),
        ...options,
    });
}
function prefetchArtifactsGetManifest(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildArtifactsGetManifestQuery(client$, request),
    });
}
function setArtifactsGetManifestData(client, queryKeyBase, data) {
    const key = queryKeyArtifactsGetManifest(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateArtifactsGetManifest(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "getManifest",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllArtifactsGetManifest(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "getManifest",
        ],
    });
}
function buildArtifactsGetManifestQuery(client$, request, options) {
    return {
        queryKey: queryKeyArtifactsGetManifest(request.organizationSlug, request.workspaceSlug, request.namespaceName, request.revisionReference),
        queryFn: async function artifactsGetManifestQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, artifactsGetManifest_js_1.artifactsGetManifest)(client$, request, mergedOptions));
        },
    };
}
function queryKeyArtifactsGetManifest(organizationSlug, workspaceSlug, namespaceName, revisionReference) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Artifacts",
        "getManifest",
        organizationSlug,
        workspaceSlug,
        namespaceName,
        revisionReference,
    ];
}
//# sourceMappingURL=artifactsGetManifest.js.map