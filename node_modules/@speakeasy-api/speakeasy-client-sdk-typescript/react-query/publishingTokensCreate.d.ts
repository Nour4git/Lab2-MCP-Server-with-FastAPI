import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { MutationHookOptions } from "./_types.js";
export type PublishingTokensCreateMutationVariables = {
    request?: operations.CreatePublishingTokenRequestBody | undefined;
    options?: RequestOptions;
};
export type PublishingTokensCreateMutationData = shared.PublishingToken;
/**
 * Create a publishing token for a workspace
 *
 * @remarks
 * Creates a publishing token for the current workspace
 */
export declare function usePublishingTokensCreateMutation(options?: MutationHookOptions<PublishingTokensCreateMutationData, Error, PublishingTokensCreateMutationVariables>): UseMutationResult<PublishingTokensCreateMutationData, Error, PublishingTokensCreateMutationVariables>;
export declare function mutationKeyPublishingTokensCreate(): MutationKey;
export declare function buildPublishingTokensCreateMutation(client$: SpeakeasyCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: PublishingTokensCreateMutationVariables) => Promise<PublishingTokensCreateMutationData>;
};
//# sourceMappingURL=publishingTokensCreate.d.ts.map