"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWorkspacesGet = useWorkspacesGet;
exports.useWorkspacesGetSuspense = useWorkspacesGetSuspense;
exports.prefetchWorkspacesGet = prefetchWorkspacesGet;
exports.setWorkspacesGetData = setWorkspacesGetData;
exports.invalidateAllWorkspacesGet = invalidateAllWorkspacesGet;
exports.buildWorkspacesGetQuery = buildWorkspacesGetQuery;
exports.queryKeyWorkspacesGet = queryKeyWorkspacesGet;
const react_query_1 = require("@tanstack/react-query");
const workspacesGet_js_1 = require("../funcs/workspacesGet.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get workspace by context
 *
 * @remarks
 * Get information about a particular workspace by context.
 */
function useWorkspacesGet(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildWorkspacesGetQuery(client, options),
        ...options,
    });
}
/**
 * Get workspace by context
 *
 * @remarks
 * Get information about a particular workspace by context.
 */
function useWorkspacesGetSuspense(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildWorkspacesGetQuery(client, options),
        ...options,
    });
}
function prefetchWorkspacesGet(queryClient, client$) {
    return queryClient.prefetchQuery({
        ...buildWorkspacesGetQuery(client$),
    });
}
function setWorkspacesGetData(client, data) {
    const key = queryKeyWorkspacesGet();
    return client.setQueryData(key, data);
}
function invalidateAllWorkspacesGet(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "get",
        ],
    });
}
function buildWorkspacesGetQuery(client$, options) {
    return {
        queryKey: queryKeyWorkspacesGet(),
        queryFn: async function workspacesGetQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, workspacesGet_js_1.workspacesGet)(client$, mergedOptions));
        },
    };
}
function queryKeyWorkspacesGet() {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Workspaces",
        "get",
    ];
}
//# sourceMappingURL=workspacesGet.js.map