import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type GithubCheckPublishingPRsQueryData = shared.GithubPublishingPRResponse;
export declare function useGithubCheckPublishingPRs(request: operations.GithubCheckPublishingPRsRequest, options?: QueryHookOptions<GithubCheckPublishingPRsQueryData>): UseQueryResult<GithubCheckPublishingPRsQueryData, Error>;
export declare function useGithubCheckPublishingPRsSuspense(request: operations.GithubCheckPublishingPRsRequest, options?: SuspenseQueryHookOptions<GithubCheckPublishingPRsQueryData>): UseSuspenseQueryResult<GithubCheckPublishingPRsQueryData, Error>;
export declare function prefetchGithubCheckPublishingPRs(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GithubCheckPublishingPRsRequest): Promise<void>;
export declare function setGithubCheckPublishingPRsData(client: QueryClient, queryKeyBase: [
    parameters: {
        generateGenLockId: string;
        org: string;
        repo: string;
    }
], data: GithubCheckPublishingPRsQueryData): GithubCheckPublishingPRsQueryData | undefined;
export declare function invalidateGithubCheckPublishingPRs(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        generateGenLockId: string;
        org: string;
        repo: string;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllGithubCheckPublishingPRs(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildGithubCheckPublishingPRsQuery(client$: SpeakeasyCore, request: operations.GithubCheckPublishingPRsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<GithubCheckPublishingPRsQueryData>;
};
export declare function queryKeyGithubCheckPublishingPRs(parameters: {
    generateGenLockId: string;
    org: string;
    repo: string;
}): QueryKey;
//# sourceMappingURL=githubCheckPublishingPRs.d.ts.map