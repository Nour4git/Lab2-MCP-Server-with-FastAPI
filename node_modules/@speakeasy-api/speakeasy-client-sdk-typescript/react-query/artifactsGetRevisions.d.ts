import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ArtifactsGetRevisionsQueryData = shared.GetRevisionsResponse;
export declare function useArtifactsGetRevisions(request: operations.GetRevisionsRequest, options?: QueryHookOptions<ArtifactsGetRevisionsQueryData>): UseQueryResult<ArtifactsGetRevisionsQueryData, Error>;
export declare function useArtifactsGetRevisionsSuspense(request: operations.GetRevisionsRequest, options?: SuspenseQueryHookOptions<ArtifactsGetRevisionsQueryData>): UseSuspenseQueryResult<ArtifactsGetRevisionsQueryData, Error>;
export declare function prefetchArtifactsGetRevisions(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetRevisionsRequest): Promise<void>;
export declare function setArtifactsGetRevisionsData(client: QueryClient, queryKeyBase: [
    namespaceName: string,
    parameters: {
        nextPageToken?: string | undefined;
    }
], data: ArtifactsGetRevisionsQueryData): ArtifactsGetRevisionsQueryData | undefined;
export declare function invalidateArtifactsGetRevisions(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    namespaceName: string,
    parameters: {
        nextPageToken?: string | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllArtifactsGetRevisions(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildArtifactsGetRevisionsQuery(client$: SpeakeasyCore, request: operations.GetRevisionsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ArtifactsGetRevisionsQueryData>;
};
export declare function queryKeyArtifactsGetRevisions(namespaceName: string, parameters: {
    nextPageToken?: string | undefined;
}): QueryKey;
//# sourceMappingURL=artifactsGetRevisions.d.ts.map