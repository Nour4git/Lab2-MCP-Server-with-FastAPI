import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ArtifactsListRemoteSourcesQueryData = shared.RemoteSource;
/**
 * Get remote sources attached to a particular namespace
 */
export declare function useArtifactsListRemoteSources(request: operations.ListRemoteSourcesRequest, options?: QueryHookOptions<ArtifactsListRemoteSourcesQueryData>): UseQueryResult<ArtifactsListRemoteSourcesQueryData, Error>;
/**
 * Get remote sources attached to a particular namespace
 */
export declare function useArtifactsListRemoteSourcesSuspense(request: operations.ListRemoteSourcesRequest, options?: SuspenseQueryHookOptions<ArtifactsListRemoteSourcesQueryData>): UseSuspenseQueryResult<ArtifactsListRemoteSourcesQueryData, Error>;
export declare function prefetchArtifactsListRemoteSources(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.ListRemoteSourcesRequest): Promise<void>;
export declare function setArtifactsListRemoteSourcesData(client: QueryClient, queryKeyBase: [parameters: {
    namespaceName: string;
}], data: ArtifactsListRemoteSourcesQueryData): ArtifactsListRemoteSourcesQueryData | undefined;
export declare function invalidateArtifactsListRemoteSources(client: QueryClient, queryKeyBase: TupleToPrefixes<[parameters: {
    namespaceName: string;
}]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllArtifactsListRemoteSources(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildArtifactsListRemoteSourcesQuery(client$: SpeakeasyCore, request: operations.ListRemoteSourcesRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ArtifactsListRemoteSourcesQueryData>;
};
export declare function queryKeyArtifactsListRemoteSources(parameters: {
    namespaceName: string;
}): QueryKey;
//# sourceMappingURL=artifactsListRemoteSources.d.ts.map