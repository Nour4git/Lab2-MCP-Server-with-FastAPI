import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type EventsPostMutationVariables = {
    request: operations.PostWorkspaceEventsRequest;
    options?: RequestOptions;
};
export type EventsPostMutationData = void;
/**
 * Post events for a specific workspace
 *
 * @remarks
 * Sends an array of events to be stored for a particular workspace.
 */
export declare function useEventsPostMutation(options?: MutationHookOptions<EventsPostMutationData, Error, EventsPostMutationVariables>): UseMutationResult<EventsPostMutationData, Error, EventsPostMutationVariables>;
export declare function mutationKeyEventsPost(): MutationKey;
export declare function buildEventsPostMutation(client$: SpeakeasyCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: EventsPostMutationVariables) => Promise<EventsPostMutationData>;
};
//# sourceMappingURL=eventsPost.d.ts.map