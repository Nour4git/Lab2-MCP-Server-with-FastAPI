import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type OrganizationsGetQueryData = shared.Organization;
/**
 * Get organization
 *
 * @remarks
 * Get information about a particular organization.
 */
export declare function useOrganizationsGet(request: operations.GetOrganizationRequest, options?: QueryHookOptions<OrganizationsGetQueryData>): UseQueryResult<OrganizationsGetQueryData, Error>;
/**
 * Get organization
 *
 * @remarks
 * Get information about a particular organization.
 */
export declare function useOrganizationsGetSuspense(request: operations.GetOrganizationRequest, options?: SuspenseQueryHookOptions<OrganizationsGetQueryData>): UseSuspenseQueryResult<OrganizationsGetQueryData, Error>;
export declare function prefetchOrganizationsGet(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetOrganizationRequest): Promise<void>;
export declare function setOrganizationsGetData(client: QueryClient, queryKeyBase: [organizationID: string], data: OrganizationsGetQueryData): OrganizationsGetQueryData | undefined;
export declare function invalidateOrganizationsGet(client: QueryClient, queryKeyBase: TupleToPrefixes<[organizationID: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllOrganizationsGet(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildOrganizationsGetQuery(client$: SpeakeasyCore, request: operations.GetOrganizationRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<OrganizationsGetQueryData>;
};
export declare function queryKeyOrganizationsGet(organizationID: string): QueryKey;
//# sourceMappingURL=organizationsGet.d.ts.map