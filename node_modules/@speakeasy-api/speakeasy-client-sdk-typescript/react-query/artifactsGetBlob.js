"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useArtifactsGetBlob = useArtifactsGetBlob;
exports.useArtifactsGetBlobSuspense = useArtifactsGetBlobSuspense;
exports.prefetchArtifactsGetBlob = prefetchArtifactsGetBlob;
exports.setArtifactsGetBlobData = setArtifactsGetBlobData;
exports.invalidateArtifactsGetBlob = invalidateArtifactsGetBlob;
exports.invalidateAllArtifactsGetBlob = invalidateAllArtifactsGetBlob;
exports.buildArtifactsGetBlobQuery = buildArtifactsGetBlobQuery;
exports.queryKeyArtifactsGetBlob = queryKeyArtifactsGetBlob;
const react_query_1 = require("@tanstack/react-query");
const artifactsGetBlob_js_1 = require("../funcs/artifactsGetBlob.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get blob for a particular digest
 */
function useArtifactsGetBlob(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildArtifactsGetBlobQuery(client, request, options),
        ...options,
    });
}
/**
 * Get blob for a particular digest
 */
function useArtifactsGetBlobSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildArtifactsGetBlobQuery(client, request, options),
        ...options,
    });
}
function prefetchArtifactsGetBlob(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildArtifactsGetBlobQuery(client$, request),
    });
}
function setArtifactsGetBlobData(client, queryKeyBase, data) {
    const key = queryKeyArtifactsGetBlob(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateArtifactsGetBlob(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "getBlob",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllArtifactsGetBlob(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "getBlob",
        ],
    });
}
function buildArtifactsGetBlobQuery(client$, request, options) {
    return {
        queryKey: queryKeyArtifactsGetBlob(request.organizationSlug, request.workspaceSlug, request.namespaceName, request.digest),
        queryFn: async function artifactsGetBlobQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, artifactsGetBlob_js_1.artifactsGetBlob)(client$, request, mergedOptions));
        },
    };
}
function queryKeyArtifactsGetBlob(organizationSlug, workspaceSlug, namespaceName, digest) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Artifacts",
        "getBlob",
        organizationSlug,
        workspaceSlug,
        namespaceName,
        digest,
    ];
}
//# sourceMappingURL=artifactsGetBlob.js.map