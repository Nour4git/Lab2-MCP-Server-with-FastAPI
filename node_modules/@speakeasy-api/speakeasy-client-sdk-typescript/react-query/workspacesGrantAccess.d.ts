import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { MutationHookOptions } from "./_types.js";
export type WorkspacesGrantAccessMutationVariables = {
    request: operations.GrantUserAccessToWorkspaceRequest;
    options?: RequestOptions;
};
export type WorkspacesGrantAccessMutationData = shared.WorkspaceInviteResponse;
/**
 * Grant a user access to a particular workspace
 */
export declare function useWorkspacesGrantAccessMutation(options?: MutationHookOptions<WorkspacesGrantAccessMutationData, Error, WorkspacesGrantAccessMutationVariables>): UseMutationResult<WorkspacesGrantAccessMutationData, Error, WorkspacesGrantAccessMutationVariables>;
export declare function mutationKeyWorkspacesGrantAccess(): MutationKey;
export declare function buildWorkspacesGrantAccessMutation(client$: SpeakeasyCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: WorkspacesGrantAccessMutationVariables) => Promise<WorkspacesGrantAccessMutationData>;
};
//# sourceMappingURL=workspacesGrantAccess.d.ts.map