"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePublishingTokensResolveMetadata = usePublishingTokensResolveMetadata;
exports.usePublishingTokensResolveMetadataSuspense = usePublishingTokensResolveMetadataSuspense;
exports.prefetchPublishingTokensResolveMetadata = prefetchPublishingTokensResolveMetadata;
exports.setPublishingTokensResolveMetadataData = setPublishingTokensResolveMetadataData;
exports.invalidatePublishingTokensResolveMetadata = invalidatePublishingTokensResolveMetadata;
exports.invalidateAllPublishingTokensResolveMetadata = invalidateAllPublishingTokensResolveMetadata;
exports.buildPublishingTokensResolveMetadataQuery = buildPublishingTokensResolveMetadataQuery;
exports.queryKeyPublishingTokensResolveMetadata = queryKeyPublishingTokensResolveMetadata;
const react_query_1 = require("@tanstack/react-query");
const publishingTokensResolveMetadata_js_1 = require("../funcs/publishingTokensResolveMetadata.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get metadata about the token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
function usePublishingTokensResolveMetadata(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildPublishingTokensResolveMetadataQuery(client, request, options),
        ...options,
    });
}
/**
 * Get metadata about the token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
function usePublishingTokensResolveMetadataSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildPublishingTokensResolveMetadataQuery(client, request, options),
        ...options,
    });
}
function prefetchPublishingTokensResolveMetadata(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildPublishingTokensResolveMetadataQuery(client$, request),
    });
}
function setPublishingTokensResolveMetadataData(client, queryKeyBase, data) {
    const key = queryKeyPublishingTokensResolveMetadata(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidatePublishingTokensResolveMetadata(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "PublishingTokens",
            "resolveMetadata",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllPublishingTokensResolveMetadata(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "PublishingTokens",
            "resolveMetadata",
        ],
    });
}
function buildPublishingTokensResolveMetadataQuery(client$, request, options) {
    return {
        queryKey: queryKeyPublishingTokensResolveMetadata(request.tokenID),
        queryFn: async function publishingTokensResolveMetadataQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, publishingTokensResolveMetadata_js_1.publishingTokensResolveMetadata)(client$, request, mergedOptions));
        },
    };
}
function queryKeyPublishingTokensResolveMetadata(tokenID) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "PublishingTokens",
        "resolveMetadata",
        tokenID,
    ];
}
//# sourceMappingURL=publishingTokensResolveMetadata.js.map