import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type WorkspacesGetQueryData = shared.WorkspaceAndOrganization;
/**
 * Get workspace by context
 *
 * @remarks
 * Get information about a particular workspace by context.
 */
export declare function useWorkspacesGet(options?: QueryHookOptions<WorkspacesGetQueryData>): UseQueryResult<WorkspacesGetQueryData, Error>;
/**
 * Get workspace by context
 *
 * @remarks
 * Get information about a particular workspace by context.
 */
export declare function useWorkspacesGetSuspense(options?: SuspenseQueryHookOptions<WorkspacesGetQueryData>): UseSuspenseQueryResult<WorkspacesGetQueryData, Error>;
export declare function prefetchWorkspacesGet(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setWorkspacesGetData(client: QueryClient, data: WorkspacesGetQueryData): WorkspacesGetQueryData | undefined;
export declare function invalidateAllWorkspacesGet(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildWorkspacesGetQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetQueryData>;
};
export declare function queryKeyWorkspacesGet(): QueryKey;
//# sourceMappingURL=workspacesGet.d.ts.map