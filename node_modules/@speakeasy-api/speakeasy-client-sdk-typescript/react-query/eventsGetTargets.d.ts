import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type EventsGetTargetsQueryData = Array<shared.TargetSDK>;
/**
 * Load targets for a particular workspace
 */
export declare function useEventsGetTargets(request: operations.GetWorkspaceTargetsRequest, options?: QueryHookOptions<EventsGetTargetsQueryData>): UseQueryResult<EventsGetTargetsQueryData, Error>;
/**
 * Load targets for a particular workspace
 */
export declare function useEventsGetTargetsSuspense(request: operations.GetWorkspaceTargetsRequest, options?: SuspenseQueryHookOptions<EventsGetTargetsQueryData>): UseSuspenseQueryResult<EventsGetTargetsQueryData, Error>;
export declare function prefetchEventsGetTargets(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceTargetsRequest): Promise<void>;
export declare function setEventsGetTargetsData(client: QueryClient, queryKeyBase: [parameters: {
    afterLastEventCreatedAt?: Date | undefined;
}], data: EventsGetTargetsQueryData): EventsGetTargetsQueryData | undefined;
export declare function invalidateEventsGetTargets(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        afterLastEventCreatedAt?: Date | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllEventsGetTargets(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildEventsGetTargetsQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceTargetsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<EventsGetTargetsQueryData>;
};
export declare function queryKeyEventsGetTargets(parameters: {
    afterLastEventCreatedAt?: Date | undefined;
}): QueryKey;
//# sourceMappingURL=eventsGetTargets.d.ts.map