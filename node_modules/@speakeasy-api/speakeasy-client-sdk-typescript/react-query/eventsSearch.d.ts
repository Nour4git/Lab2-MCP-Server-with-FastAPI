import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type EventsSearchQueryData = Array<shared.CliEvent>;
/**
 * Search events for a particular workspace by any field
 */
export declare function useEventsSearch(request: operations.SearchWorkspaceEventsRequest, options?: QueryHookOptions<EventsSearchQueryData>): UseQueryResult<EventsSearchQueryData, Error>;
/**
 * Search events for a particular workspace by any field
 */
export declare function useEventsSearchSuspense(request: operations.SearchWorkspaceEventsRequest, options?: SuspenseQueryHookOptions<EventsSearchQueryData>): UseSuspenseQueryResult<EventsSearchQueryData, Error>;
export declare function prefetchEventsSearch(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.SearchWorkspaceEventsRequest): Promise<void>;
export declare function setEventsSearchData(client: QueryClient, queryKeyBase: [
    workspaceId: string | undefined,
    parameters: {
        sourceRevisionDigest?: string | undefined;
        lintReportDigest?: string | undefined;
        openapiDiffReportDigest?: string | undefined;
        interactionType?: shared.InteractionType | undefined;
        generateGenLockId?: string | undefined;
        executionId?: string | undefined;
        success?: boolean | undefined;
        limit?: number | undefined;
    }
], data: EventsSearchQueryData): EventsSearchQueryData | undefined;
export declare function invalidateEventsSearch(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    workspaceId: string | undefined,
    parameters: {
        sourceRevisionDigest?: string | undefined;
        lintReportDigest?: string | undefined;
        openapiDiffReportDigest?: string | undefined;
        interactionType?: shared.InteractionType | undefined;
        generateGenLockId?: string | undefined;
        executionId?: string | undefined;
        success?: boolean | undefined;
        limit?: number | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllEventsSearch(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildEventsSearchQuery(client$: SpeakeasyCore, request: operations.SearchWorkspaceEventsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<EventsSearchQueryData>;
};
export declare function queryKeyEventsSearch(workspaceId: string | undefined, parameters: {
    sourceRevisionDigest?: string | undefined;
    lintReportDigest?: string | undefined;
    openapiDiffReportDigest?: string | undefined;
    interactionType?: shared.InteractionType | undefined;
    generateGenLockId?: string | undefined;
    executionId?: string | undefined;
    success?: boolean | undefined;
    limit?: number | undefined;
}): QueryKey;
//# sourceMappingURL=eventsSearch.d.ts.map