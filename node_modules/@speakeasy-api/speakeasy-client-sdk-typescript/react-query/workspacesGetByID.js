"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWorkspacesGetByID = useWorkspacesGetByID;
exports.useWorkspacesGetByIDSuspense = useWorkspacesGetByIDSuspense;
exports.prefetchWorkspacesGetByID = prefetchWorkspacesGetByID;
exports.setWorkspacesGetByIDData = setWorkspacesGetByIDData;
exports.invalidateWorkspacesGetByID = invalidateWorkspacesGetByID;
exports.invalidateAllWorkspacesGetByID = invalidateAllWorkspacesGetByID;
exports.buildWorkspacesGetByIDQuery = buildWorkspacesGetByIDQuery;
exports.queryKeyWorkspacesGetByID = queryKeyWorkspacesGetByID;
const react_query_1 = require("@tanstack/react-query");
const workspacesGetByID_js_1 = require("../funcs/workspacesGetByID.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get workspace
 *
 * @remarks
 * Get information about a particular workspace.
 */
function useWorkspacesGetByID(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildWorkspacesGetByIDQuery(client, request, options),
        ...options,
    });
}
/**
 * Get workspace
 *
 * @remarks
 * Get information about a particular workspace.
 */
function useWorkspacesGetByIDSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildWorkspacesGetByIDQuery(client, request, options),
        ...options,
    });
}
function prefetchWorkspacesGetByID(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildWorkspacesGetByIDQuery(client$, request),
    });
}
function setWorkspacesGetByIDData(client, queryKeyBase, data) {
    const key = queryKeyWorkspacesGetByID(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateWorkspacesGetByID(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "getByID",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllWorkspacesGetByID(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "getByID",
        ],
    });
}
function buildWorkspacesGetByIDQuery(client$, request, options) {
    return {
        queryKey: queryKeyWorkspacesGetByID(request.workspaceId),
        queryFn: async function workspacesGetByIDQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, workspacesGetByID_js_1.workspacesGetByID)(client$, request, mergedOptions));
        },
    };
}
function queryKeyWorkspacesGetByID(workspaceId) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Workspaces",
        "getByID",
        workspaceId,
    ];
}
//# sourceMappingURL=workspacesGetByID.js.map