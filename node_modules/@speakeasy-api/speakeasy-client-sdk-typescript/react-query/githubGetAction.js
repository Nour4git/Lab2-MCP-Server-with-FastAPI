"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGithubGetAction = useGithubGetAction;
exports.useGithubGetActionSuspense = useGithubGetActionSuspense;
exports.prefetchGithubGetAction = prefetchGithubGetAction;
exports.setGithubGetActionData = setGithubGetActionData;
exports.invalidateGithubGetAction = invalidateGithubGetAction;
exports.invalidateAllGithubGetAction = invalidateAllGithubGetAction;
exports.buildGithubGetActionQuery = buildGithubGetActionQuery;
exports.queryKeyGithubGetAction = queryKeyGithubGetAction;
const react_query_1 = require("@tanstack/react-query");
const githubGetAction_js_1 = require("../funcs/githubGetAction.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
function useGithubGetAction(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildGithubGetActionQuery(client, request, options),
        ...options,
    });
}
function useGithubGetActionSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildGithubGetActionQuery(client, request, options),
        ...options,
    });
}
function prefetchGithubGetAction(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildGithubGetActionQuery(client$, request),
    });
}
function setGithubGetActionData(client, queryKeyBase, data) {
    const key = queryKeyGithubGetAction(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateGithubGetAction(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Github",
            "getAction",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllGithubGetAction(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Github",
            "getAction",
        ],
    });
}
function buildGithubGetActionQuery(client$, request, options) {
    return {
        queryKey: queryKeyGithubGetAction({
            targetName: request.targetName,
            org: request.org,
            repo: request.repo,
        }),
        queryFn: async function githubGetActionQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, githubGetAction_js_1.githubGetAction)(client$, request, mergedOptions));
        },
    };
}
function queryKeyGithubGetAction(parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Github",
        "getAction",
        parameters,
    ];
}
//# sourceMappingURL=githubGetAction.js.map