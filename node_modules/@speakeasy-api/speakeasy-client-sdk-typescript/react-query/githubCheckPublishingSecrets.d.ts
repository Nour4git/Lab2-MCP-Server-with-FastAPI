import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type GithubCheckPublishingSecretsQueryData = shared.GithubMissingPublishingSecretsResponse;
export declare function useGithubCheckPublishingSecrets(request: operations.GithubCheckPublishingSecretsRequest, options?: QueryHookOptions<GithubCheckPublishingSecretsQueryData>): UseQueryResult<GithubCheckPublishingSecretsQueryData, Error>;
export declare function useGithubCheckPublishingSecretsSuspense(request: operations.GithubCheckPublishingSecretsRequest, options?: SuspenseQueryHookOptions<GithubCheckPublishingSecretsQueryData>): UseSuspenseQueryResult<GithubCheckPublishingSecretsQueryData, Error>;
export declare function prefetchGithubCheckPublishingSecrets(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GithubCheckPublishingSecretsRequest): Promise<void>;
export declare function setGithubCheckPublishingSecretsData(client: QueryClient, queryKeyBase: [parameters: {
    generateGenLockId: string;
}], data: GithubCheckPublishingSecretsQueryData): GithubCheckPublishingSecretsQueryData | undefined;
export declare function invalidateGithubCheckPublishingSecrets(client: QueryClient, queryKeyBase: TupleToPrefixes<[parameters: {
    generateGenLockId: string;
}]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllGithubCheckPublishingSecrets(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildGithubCheckPublishingSecretsQuery(client$: SpeakeasyCore, request: operations.GithubCheckPublishingSecretsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<GithubCheckPublishingSecretsQueryData>;
};
export declare function queryKeyGithubCheckPublishingSecrets(parameters: {
    generateGenLockId: string;
}): QueryKey;
//# sourceMappingURL=githubCheckPublishingSecrets.d.ts.map