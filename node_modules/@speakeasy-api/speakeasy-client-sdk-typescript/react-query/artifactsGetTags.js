"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useArtifactsGetTags = useArtifactsGetTags;
exports.useArtifactsGetTagsSuspense = useArtifactsGetTagsSuspense;
exports.prefetchArtifactsGetTags = prefetchArtifactsGetTags;
exports.setArtifactsGetTagsData = setArtifactsGetTagsData;
exports.invalidateArtifactsGetTags = invalidateArtifactsGetTags;
exports.invalidateAllArtifactsGetTags = invalidateAllArtifactsGetTags;
exports.buildArtifactsGetTagsQuery = buildArtifactsGetTagsQuery;
exports.queryKeyArtifactsGetTags = queryKeyArtifactsGetTags;
const react_query_1 = require("@tanstack/react-query");
const artifactsGetTags_js_1 = require("../funcs/artifactsGetTags.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
function useArtifactsGetTags(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildArtifactsGetTagsQuery(client, request, options),
        ...options,
    });
}
function useArtifactsGetTagsSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildArtifactsGetTagsQuery(client, request, options),
        ...options,
    });
}
function prefetchArtifactsGetTags(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildArtifactsGetTagsQuery(client$, request),
    });
}
function setArtifactsGetTagsData(client, queryKeyBase, data) {
    const key = queryKeyArtifactsGetTags(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateArtifactsGetTags(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "getTags",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllArtifactsGetTags(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "getTags",
        ],
    });
}
function buildArtifactsGetTagsQuery(client$, request, options) {
    return {
        queryKey: queryKeyArtifactsGetTags(request.namespaceName),
        queryFn: async function artifactsGetTagsQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, artifactsGetTags_js_1.artifactsGetTags)(client$, request, mergedOptions));
        },
    };
}
function queryKeyArtifactsGetTags(namespaceName) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Artifacts",
        "getTags",
        namespaceName,
    ];
}
//# sourceMappingURL=artifactsGetTags.js.map