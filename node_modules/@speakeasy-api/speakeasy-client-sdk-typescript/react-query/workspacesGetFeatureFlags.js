"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWorkspacesGetFeatureFlags = useWorkspacesGetFeatureFlags;
exports.useWorkspacesGetFeatureFlagsSuspense = useWorkspacesGetFeatureFlagsSuspense;
exports.prefetchWorkspacesGetFeatureFlags = prefetchWorkspacesGetFeatureFlags;
exports.setWorkspacesGetFeatureFlagsData = setWorkspacesGetFeatureFlagsData;
exports.invalidateWorkspacesGetFeatureFlags = invalidateWorkspacesGetFeatureFlags;
exports.invalidateAllWorkspacesGetFeatureFlags = invalidateAllWorkspacesGetFeatureFlags;
exports.buildWorkspacesGetFeatureFlagsQuery = buildWorkspacesGetFeatureFlagsQuery;
exports.queryKeyWorkspacesGetFeatureFlags = queryKeyWorkspacesGetFeatureFlags;
const react_query_1 = require("@tanstack/react-query");
const workspacesGetFeatureFlags_js_1 = require("../funcs/workspacesGetFeatureFlags.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get workspace feature flags
 */
function useWorkspacesGetFeatureFlags(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildWorkspacesGetFeatureFlagsQuery(client, request, options),
        ...options,
    });
}
/**
 * Get workspace feature flags
 */
function useWorkspacesGetFeatureFlagsSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildWorkspacesGetFeatureFlagsQuery(client, request, options),
        ...options,
    });
}
function prefetchWorkspacesGetFeatureFlags(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildWorkspacesGetFeatureFlagsQuery(client$, request),
    });
}
function setWorkspacesGetFeatureFlagsData(client, queryKeyBase, data) {
    const key = queryKeyWorkspacesGetFeatureFlags(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateWorkspacesGetFeatureFlags(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "getFeatureFlags",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllWorkspacesGetFeatureFlags(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Workspaces",
            "getFeatureFlags",
        ],
    });
}
function buildWorkspacesGetFeatureFlagsQuery(client$, request, options) {
    return {
        queryKey: queryKeyWorkspacesGetFeatureFlags(request.workspaceId),
        queryFn: async function workspacesGetFeatureFlagsQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, workspacesGetFeatureFlags_js_1.workspacesGetFeatureFlags)(client$, request, mergedOptions));
        },
    };
}
function queryKeyWorkspacesGetFeatureFlags(workspaceId) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Workspaces",
        "getFeatureFlags",
        workspaceId,
    ];
}
//# sourceMappingURL=workspacesGetFeatureFlags.js.map