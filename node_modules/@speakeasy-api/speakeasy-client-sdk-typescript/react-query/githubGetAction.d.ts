import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type GithubGetActionQueryData = shared.GithubGetActionResponse;
export declare function useGithubGetAction(request: operations.GetGitHubActionRequest, options?: QueryHookOptions<GithubGetActionQueryData>): UseQueryResult<GithubGetActionQueryData, Error>;
export declare function useGithubGetActionSuspense(request: operations.GetGitHubActionRequest, options?: SuspenseQueryHookOptions<GithubGetActionQueryData>): UseSuspenseQueryResult<GithubGetActionQueryData, Error>;
export declare function prefetchGithubGetAction(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetGitHubActionRequest): Promise<void>;
export declare function setGithubGetActionData(client: QueryClient, queryKeyBase: [
    parameters: {
        targetName?: string | undefined;
        org: string;
        repo: string;
    }
], data: GithubGetActionQueryData): GithubGetActionQueryData | undefined;
export declare function invalidateGithubGetAction(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        targetName?: string | undefined;
        org: string;
        repo: string;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllGithubGetAction(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildGithubGetActionQuery(client$: SpeakeasyCore, request: operations.GetGitHubActionRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<GithubGetActionQueryData>;
};
export declare function queryKeyGithubGetAction(parameters: {
    targetName?: string | undefined;
    org: string;
    repo: string;
}): QueryKey;
//# sourceMappingURL=githubGetAction.d.ts.map