"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEventsGetTargetsDeprecated = useEventsGetTargetsDeprecated;
exports.useEventsGetTargetsDeprecatedSuspense = useEventsGetTargetsDeprecatedSuspense;
exports.prefetchEventsGetTargetsDeprecated = prefetchEventsGetTargetsDeprecated;
exports.setEventsGetTargetsDeprecatedData = setEventsGetTargetsDeprecatedData;
exports.invalidateEventsGetTargetsDeprecated = invalidateEventsGetTargetsDeprecated;
exports.invalidateAllEventsGetTargetsDeprecated = invalidateAllEventsGetTargetsDeprecated;
exports.buildEventsGetTargetsDeprecatedQuery = buildEventsGetTargetsDeprecatedQuery;
exports.queryKeyEventsGetTargetsDeprecated = queryKeyEventsGetTargetsDeprecated;
const react_query_1 = require("@tanstack/react-query");
const eventsGetTargetsDeprecated_js_1 = require("../funcs/eventsGetTargetsDeprecated.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Load targets for a particular workspace
 */
function useEventsGetTargetsDeprecated(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildEventsGetTargetsDeprecatedQuery(client, request, options),
        ...options,
    });
}
/**
 * Load targets for a particular workspace
 */
function useEventsGetTargetsDeprecatedSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildEventsGetTargetsDeprecatedQuery(client, request, options),
        ...options,
    });
}
function prefetchEventsGetTargetsDeprecated(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildEventsGetTargetsDeprecatedQuery(client$, request),
    });
}
function setEventsGetTargetsDeprecatedData(client, queryKeyBase, data) {
    const key = queryKeyEventsGetTargetsDeprecated(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateEventsGetTargetsDeprecated(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Events",
            "getTargetsDeprecated",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllEventsGetTargetsDeprecated(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Events",
            "getTargetsDeprecated",
        ],
    });
}
function buildEventsGetTargetsDeprecatedQuery(client$, request, options) {
    return {
        queryKey: queryKeyEventsGetTargetsDeprecated(request.workspaceId, {
            afterLastEventCreatedAt: request.afterLastEventCreatedAt,
        }),
        queryFn: async function eventsGetTargetsDeprecatedQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, eventsGetTargetsDeprecated_js_1.eventsGetTargetsDeprecated)(client$, request, mergedOptions));
        },
    };
}
function queryKeyEventsGetTargetsDeprecated(workspaceId, parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Events",
        "getTargetsDeprecated",
        workspaceId,
        parameters,
    ];
}
//# sourceMappingURL=eventsGetTargetsDeprecated.js.map