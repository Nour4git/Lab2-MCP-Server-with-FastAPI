import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ArtifactsGetManifestQueryData = shared.Manifest;
/**
 * Get manifest for a particular reference
 */
export declare function useArtifactsGetManifest(request: operations.GetManifestRequest, options?: QueryHookOptions<ArtifactsGetManifestQueryData>): UseQueryResult<ArtifactsGetManifestQueryData, Error>;
/**
 * Get manifest for a particular reference
 */
export declare function useArtifactsGetManifestSuspense(request: operations.GetManifestRequest, options?: SuspenseQueryHookOptions<ArtifactsGetManifestQueryData>): UseSuspenseQueryResult<ArtifactsGetManifestQueryData, Error>;
export declare function prefetchArtifactsGetManifest(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetManifestRequest): Promise<void>;
export declare function setArtifactsGetManifestData(client: QueryClient, queryKeyBase: [
    organizationSlug: string,
    workspaceSlug: string,
    namespaceName: string,
    revisionReference: string
], data: ArtifactsGetManifestQueryData): ArtifactsGetManifestQueryData | undefined;
export declare function invalidateArtifactsGetManifest(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    organizationSlug: string,
    workspaceSlug: string,
    namespaceName: string,
    revisionReference: string
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllArtifactsGetManifest(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildArtifactsGetManifestQuery(client$: SpeakeasyCore, request: operations.GetManifestRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ArtifactsGetManifestQueryData>;
};
export declare function queryKeyArtifactsGetManifest(organizationSlug: string, workspaceSlug: string, namespaceName: string, revisionReference: string): QueryKey;
//# sourceMappingURL=artifactsGetManifest.d.ts.map