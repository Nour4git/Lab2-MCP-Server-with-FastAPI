"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthGetUser = useAuthGetUser;
exports.useAuthGetUserSuspense = useAuthGetUserSuspense;
exports.prefetchAuthGetUser = prefetchAuthGetUser;
exports.setAuthGetUserData = setAuthGetUserData;
exports.invalidateAllAuthGetUser = invalidateAllAuthGetUser;
exports.buildAuthGetUserQuery = buildAuthGetUserQuery;
exports.queryKeyAuthGetUser = queryKeyAuthGetUser;
const react_query_1 = require("@tanstack/react-query");
const authGetUser_js_1 = require("../funcs/authGetUser.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get information about the current user.
 */
function useAuthGetUser(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildAuthGetUserQuery(client, options),
        ...options,
    });
}
/**
 * Get information about the current user.
 */
function useAuthGetUserSuspense(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildAuthGetUserQuery(client, options),
        ...options,
    });
}
function prefetchAuthGetUser(queryClient, client$) {
    return queryClient.prefetchQuery({
        ...buildAuthGetUserQuery(client$),
    });
}
function setAuthGetUserData(client, data) {
    const key = queryKeyAuthGetUser();
    return client.setQueryData(key, data);
}
function invalidateAllAuthGetUser(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Auth",
            "getUser",
        ],
    });
}
function buildAuthGetUserQuery(client$, options) {
    return {
        queryKey: queryKeyAuthGetUser(),
        queryFn: async function authGetUserQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, authGetUser_js_1.authGetUser)(client$, mergedOptions));
        },
    };
}
function queryKeyAuthGetUser() {
    return ["@speakeasy-api/speakeasy-client-sdk-typescript", "Auth", "getUser"];
}
//# sourceMappingURL=authGetUser.js.map