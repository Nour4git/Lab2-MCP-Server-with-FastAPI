import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type AuthValidateApiKeyQueryData = shared.ApiKeyDetails;
/**
 * Validate the current api key.
 */
export declare function useAuthValidateApiKey(options?: QueryHookOptions<AuthValidateApiKeyQueryData>): UseQueryResult<AuthValidateApiKeyQueryData, Error>;
/**
 * Validate the current api key.
 */
export declare function useAuthValidateApiKeySuspense(options?: SuspenseQueryHookOptions<AuthValidateApiKeyQueryData>): UseSuspenseQueryResult<AuthValidateApiKeyQueryData, Error>;
export declare function prefetchAuthValidateApiKey(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setAuthValidateApiKeyData(client: QueryClient, data: AuthValidateApiKeyQueryData): AuthValidateApiKeyQueryData | undefined;
export declare function invalidateAllAuthValidateApiKey(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildAuthValidateApiKeyQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<AuthValidateApiKeyQueryData>;
};
export declare function queryKeyAuthValidateApiKey(): QueryKey;
//# sourceMappingURL=authValidateApiKey.d.ts.map