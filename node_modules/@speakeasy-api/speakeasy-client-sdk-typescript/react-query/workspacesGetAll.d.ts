import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type WorkspacesGetAllQueryData = Array<shared.Workspace>;
/**
 * Get workspaces for a user
 *
 * @remarks
 * Returns a list of workspaces a user has access too
 */
export declare function useWorkspacesGetAll(options?: QueryHookOptions<WorkspacesGetAllQueryData>): UseQueryResult<WorkspacesGetAllQueryData, Error>;
/**
 * Get workspaces for a user
 *
 * @remarks
 * Returns a list of workspaces a user has access too
 */
export declare function useWorkspacesGetAllSuspense(options?: SuspenseQueryHookOptions<WorkspacesGetAllQueryData>): UseSuspenseQueryResult<WorkspacesGetAllQueryData, Error>;
export declare function prefetchWorkspacesGetAll(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setWorkspacesGetAllData(client: QueryClient, data: WorkspacesGetAllQueryData): WorkspacesGetAllQueryData | undefined;
export declare function invalidateAllWorkspacesGetAll(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildWorkspacesGetAllQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetAllQueryData>;
};
export declare function queryKeyWorkspacesGetAll(): QueryKey;
//# sourceMappingURL=workspacesGetAll.d.ts.map