import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type WorkspacesGetByIDQueryData = shared.Workspace;
/**
 * Get workspace
 *
 * @remarks
 * Get information about a particular workspace.
 */
export declare function useWorkspacesGetByID(request: operations.GetWorkspaceRequest, options?: QueryHookOptions<WorkspacesGetByIDQueryData>): UseQueryResult<WorkspacesGetByIDQueryData, Error>;
/**
 * Get workspace
 *
 * @remarks
 * Get information about a particular workspace.
 */
export declare function useWorkspacesGetByIDSuspense(request: operations.GetWorkspaceRequest, options?: SuspenseQueryHookOptions<WorkspacesGetByIDQueryData>): UseSuspenseQueryResult<WorkspacesGetByIDQueryData, Error>;
export declare function prefetchWorkspacesGetByID(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceRequest): Promise<void>;
export declare function setWorkspacesGetByIDData(client: QueryClient, queryKeyBase: [workspaceId: string | undefined], data: WorkspacesGetByIDQueryData): WorkspacesGetByIDQueryData | undefined;
export declare function invalidateWorkspacesGetByID(client: QueryClient, queryKeyBase: TupleToPrefixes<[workspaceId: string | undefined]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllWorkspacesGetByID(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildWorkspacesGetByIDQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetByIDQueryData>;
};
export declare function queryKeyWorkspacesGetByID(workspaceId: string | undefined): QueryKey;
//# sourceMappingURL=workspacesGetByID.d.ts.map