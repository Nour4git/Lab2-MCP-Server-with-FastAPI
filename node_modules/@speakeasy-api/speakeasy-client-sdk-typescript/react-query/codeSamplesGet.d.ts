import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type CodeSamplesGetQueryData = shared.UsageSnippets;
/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
export declare function useCodeSamplesGet(request: operations.GetCodeSamplesRequest, options?: QueryHookOptions<CodeSamplesGetQueryData>): UseQueryResult<CodeSamplesGetQueryData, Error>;
/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
export declare function useCodeSamplesGetSuspense(request: operations.GetCodeSamplesRequest, options?: SuspenseQueryHookOptions<CodeSamplesGetQueryData>): UseSuspenseQueryResult<CodeSamplesGetQueryData, Error>;
export declare function prefetchCodeSamplesGet(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetCodeSamplesRequest): Promise<void>;
export declare function setCodeSamplesGetData(client: QueryClient, queryKeyBase: [
    parameters: {
        registryUrl: string;
        operationIds?: Array<string> | undefined;
        methodPaths?: Array<operations.MethodPaths> | undefined;
        languages?: Array<string> | undefined;
    }
], data: CodeSamplesGetQueryData): CodeSamplesGetQueryData | undefined;
export declare function invalidateCodeSamplesGet(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        registryUrl: string;
        operationIds?: Array<string> | undefined;
        methodPaths?: Array<operations.MethodPaths> | undefined;
        languages?: Array<string> | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllCodeSamplesGet(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildCodeSamplesGetQuery(client$: SpeakeasyCore, request: operations.GetCodeSamplesRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<CodeSamplesGetQueryData>;
};
export declare function queryKeyCodeSamplesGet(parameters: {
    registryUrl: string;
    operationIds?: Array<string> | undefined;
    methodPaths?: Array<operations.MethodPaths> | undefined;
    languages?: Array<string> | undefined;
}): QueryKey;
//# sourceMappingURL=codeSamplesGet.d.ts.map