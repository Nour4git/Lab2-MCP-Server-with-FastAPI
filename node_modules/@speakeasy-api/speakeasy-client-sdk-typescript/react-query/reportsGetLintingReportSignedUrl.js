"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useReportsGetLintingReportSignedUrl = useReportsGetLintingReportSignedUrl;
exports.useReportsGetLintingReportSignedUrlSuspense = useReportsGetLintingReportSignedUrlSuspense;
exports.prefetchReportsGetLintingReportSignedUrl = prefetchReportsGetLintingReportSignedUrl;
exports.setReportsGetLintingReportSignedUrlData = setReportsGetLintingReportSignedUrlData;
exports.invalidateReportsGetLintingReportSignedUrl = invalidateReportsGetLintingReportSignedUrl;
exports.invalidateAllReportsGetLintingReportSignedUrl = invalidateAllReportsGetLintingReportSignedUrl;
exports.buildReportsGetLintingReportSignedUrlQuery = buildReportsGetLintingReportSignedUrlQuery;
exports.queryKeyReportsGetLintingReportSignedUrl = queryKeyReportsGetLintingReportSignedUrl;
const react_query_1 = require("@tanstack/react-query");
const reportsGetLintingReportSignedUrl_js_1 = require("../funcs/reportsGetLintingReportSignedUrl.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get the signed access url for the linting reports for a particular document.
 */
function useReportsGetLintingReportSignedUrl(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildReportsGetLintingReportSignedUrlQuery(client, request, options),
        ...options,
    });
}
/**
 * Get the signed access url for the linting reports for a particular document.
 */
function useReportsGetLintingReportSignedUrlSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildReportsGetLintingReportSignedUrlQuery(client, request, options),
        ...options,
    });
}
function prefetchReportsGetLintingReportSignedUrl(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildReportsGetLintingReportSignedUrlQuery(client$, request),
    });
}
function setReportsGetLintingReportSignedUrlData(client, queryKeyBase, data) {
    const key = queryKeyReportsGetLintingReportSignedUrl(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateReportsGetLintingReportSignedUrl(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Reports",
            "getLintingReportSignedUrl",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllReportsGetLintingReportSignedUrl(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Reports",
            "getLintingReportSignedUrl",
        ],
    });
}
function buildReportsGetLintingReportSignedUrlQuery(client$, request, options) {
    return {
        queryKey: queryKeyReportsGetLintingReportSignedUrl(request.documentChecksum),
        queryFn: async function reportsGetLintingReportSignedUrlQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, reportsGetLintingReportSignedUrl_js_1.reportsGetLintingReportSignedUrl)(client$, request, mergedOptions));
        },
    };
}
function queryKeyReportsGetLintingReportSignedUrl(documentChecksum) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Reports",
        "getLintingReportSignedUrl",
        documentChecksum,
    ];
}
//# sourceMappingURL=reportsGetLintingReportSignedUrl.js.map