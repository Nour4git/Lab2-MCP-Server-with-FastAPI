"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthValidateApiKey = useAuthValidateApiKey;
exports.useAuthValidateApiKeySuspense = useAuthValidateApiKeySuspense;
exports.prefetchAuthValidateApiKey = prefetchAuthValidateApiKey;
exports.setAuthValidateApiKeyData = setAuthValidateApiKeyData;
exports.invalidateAllAuthValidateApiKey = invalidateAllAuthValidateApiKey;
exports.buildAuthValidateApiKeyQuery = buildAuthValidateApiKeyQuery;
exports.queryKeyAuthValidateApiKey = queryKeyAuthValidateApiKey;
const react_query_1 = require("@tanstack/react-query");
const authValidateApiKey_js_1 = require("../funcs/authValidateApiKey.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Validate the current api key.
 */
function useAuthValidateApiKey(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildAuthValidateApiKeyQuery(client, options),
        ...options,
    });
}
/**
 * Validate the current api key.
 */
function useAuthValidateApiKeySuspense(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildAuthValidateApiKeyQuery(client, options),
        ...options,
    });
}
function prefetchAuthValidateApiKey(queryClient, client$) {
    return queryClient.prefetchQuery({
        ...buildAuthValidateApiKeyQuery(client$),
    });
}
function setAuthValidateApiKeyData(client, data) {
    const key = queryKeyAuthValidateApiKey();
    return client.setQueryData(key, data);
}
function invalidateAllAuthValidateApiKey(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Auth",
            "validateApiKey",
        ],
    });
}
function buildAuthValidateApiKeyQuery(client$, options) {
    return {
        queryKey: queryKeyAuthValidateApiKey(),
        queryFn: async function authValidateApiKeyQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, authValidateApiKey_js_1.authValidateApiKey)(client$, mergedOptions));
        },
    };
}
function queryKeyAuthValidateApiKey() {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Auth",
        "validateApiKey",
    ];
}
//# sourceMappingURL=authValidateApiKey.js.map