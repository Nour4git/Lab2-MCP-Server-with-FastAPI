import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type EventsGetEventsByTargetQueryData = Array<shared.CliEvent>;
/**
 * Load recent events for a particular workspace
 */
export declare function useEventsGetEventsByTarget(request: operations.GetWorkspaceEventsByTargetRequest, options?: QueryHookOptions<EventsGetEventsByTargetQueryData>): UseQueryResult<EventsGetEventsByTargetQueryData, Error>;
/**
 * Load recent events for a particular workspace
 */
export declare function useEventsGetEventsByTargetSuspense(request: operations.GetWorkspaceEventsByTargetRequest, options?: SuspenseQueryHookOptions<EventsGetEventsByTargetQueryData>): UseSuspenseQueryResult<EventsGetEventsByTargetQueryData, Error>;
export declare function prefetchEventsGetEventsByTarget(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceEventsByTargetRequest): Promise<void>;
export declare function setEventsGetEventsByTargetData(client: QueryClient, queryKeyBase: [
    workspaceId: string | undefined,
    targetId: string,
    parameters: {
        afterCreatedAt?: Date | undefined;
    }
], data: EventsGetEventsByTargetQueryData): EventsGetEventsByTargetQueryData | undefined;
export declare function invalidateEventsGetEventsByTarget(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    workspaceId: string | undefined,
    targetId: string,
    parameters: {
        afterCreatedAt?: Date | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllEventsGetEventsByTarget(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildEventsGetEventsByTargetQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceEventsByTargetRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<EventsGetEventsByTargetQueryData>;
};
export declare function queryKeyEventsGetEventsByTarget(workspaceId: string | undefined, targetId: string, parameters: {
    afterCreatedAt?: Date | undefined;
}): QueryKey;
//# sourceMappingURL=eventsGetEventsByTarget.d.ts.map