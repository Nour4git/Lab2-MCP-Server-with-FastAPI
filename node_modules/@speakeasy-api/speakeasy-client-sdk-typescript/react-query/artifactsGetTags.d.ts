import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ArtifactsGetTagsQueryData = shared.GetTagsResponse;
export declare function useArtifactsGetTags(request: operations.GetTagsRequest, options?: QueryHookOptions<ArtifactsGetTagsQueryData>): UseQueryResult<ArtifactsGetTagsQueryData, Error>;
export declare function useArtifactsGetTagsSuspense(request: operations.GetTagsRequest, options?: SuspenseQueryHookOptions<ArtifactsGetTagsQueryData>): UseSuspenseQueryResult<ArtifactsGetTagsQueryData, Error>;
export declare function prefetchArtifactsGetTags(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetTagsRequest): Promise<void>;
export declare function setArtifactsGetTagsData(client: QueryClient, queryKeyBase: [namespaceName: string], data: ArtifactsGetTagsQueryData): ArtifactsGetTagsQueryData | undefined;
export declare function invalidateArtifactsGetTags(client: QueryClient, queryKeyBase: TupleToPrefixes<[namespaceName: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllArtifactsGetTags(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildArtifactsGetTagsQuery(client$: SpeakeasyCore, request: operations.GetTagsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ArtifactsGetTagsQueryData>;
};
export declare function queryKeyArtifactsGetTags(namespaceName: string): QueryKey;
//# sourceMappingURL=artifactsGetTags.d.ts.map