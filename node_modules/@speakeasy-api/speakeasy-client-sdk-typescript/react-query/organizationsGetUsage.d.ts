import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";
export type OrganizationsGetUsageQueryData = shared.OrganizationUsageResponse;
/**
 * Get billing usage summary for a particular organization
 *
 * @remarks
 * Returns a billing usage summary by target languages for a particular organization
 */
export declare function useOrganizationsGetUsage(options?: QueryHookOptions<OrganizationsGetUsageQueryData>): UseQueryResult<OrganizationsGetUsageQueryData, Error>;
/**
 * Get billing usage summary for a particular organization
 *
 * @remarks
 * Returns a billing usage summary by target languages for a particular organization
 */
export declare function useOrganizationsGetUsageSuspense(options?: SuspenseQueryHookOptions<OrganizationsGetUsageQueryData>): UseSuspenseQueryResult<OrganizationsGetUsageQueryData, Error>;
export declare function prefetchOrganizationsGetUsage(queryClient: QueryClient, client$: SpeakeasyCore): Promise<void>;
export declare function setOrganizationsGetUsageData(client: QueryClient, data: OrganizationsGetUsageQueryData): OrganizationsGetUsageQueryData | undefined;
export declare function invalidateAllOrganizationsGetUsage(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildOrganizationsGetUsageQuery(client$: SpeakeasyCore, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<OrganizationsGetUsageQueryData>;
};
export declare function queryKeyOrganizationsGetUsage(): QueryKey;
//# sourceMappingURL=organizationsGetUsage.d.ts.map