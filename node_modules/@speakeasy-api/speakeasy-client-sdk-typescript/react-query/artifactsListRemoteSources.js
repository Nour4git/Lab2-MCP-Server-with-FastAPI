"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useArtifactsListRemoteSources = useArtifactsListRemoteSources;
exports.useArtifactsListRemoteSourcesSuspense = useArtifactsListRemoteSourcesSuspense;
exports.prefetchArtifactsListRemoteSources = prefetchArtifactsListRemoteSources;
exports.setArtifactsListRemoteSourcesData = setArtifactsListRemoteSourcesData;
exports.invalidateArtifactsListRemoteSources = invalidateArtifactsListRemoteSources;
exports.invalidateAllArtifactsListRemoteSources = invalidateAllArtifactsListRemoteSources;
exports.buildArtifactsListRemoteSourcesQuery = buildArtifactsListRemoteSourcesQuery;
exports.queryKeyArtifactsListRemoteSources = queryKeyArtifactsListRemoteSources;
const react_query_1 = require("@tanstack/react-query");
const artifactsListRemoteSources_js_1 = require("../funcs/artifactsListRemoteSources.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get remote sources attached to a particular namespace
 */
function useArtifactsListRemoteSources(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildArtifactsListRemoteSourcesQuery(client, request, options),
        ...options,
    });
}
/**
 * Get remote sources attached to a particular namespace
 */
function useArtifactsListRemoteSourcesSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildArtifactsListRemoteSourcesQuery(client, request, options),
        ...options,
    });
}
function prefetchArtifactsListRemoteSources(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildArtifactsListRemoteSourcesQuery(client$, request),
    });
}
function setArtifactsListRemoteSourcesData(client, queryKeyBase, data) {
    const key = queryKeyArtifactsListRemoteSources(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateArtifactsListRemoteSources(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "listRemoteSources",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllArtifactsListRemoteSources(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Artifacts",
            "listRemoteSources",
        ],
    });
}
function buildArtifactsListRemoteSourcesQuery(client$, request, options) {
    return {
        queryKey: queryKeyArtifactsListRemoteSources({
            namespaceName: request.namespaceName,
        }),
        queryFn: async function artifactsListRemoteSourcesQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, artifactsListRemoteSources_js_1.artifactsListRemoteSources)(client$, request, mergedOptions));
        },
    };
}
function queryKeyArtifactsListRemoteSources(parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Artifacts",
        "listRemoteSources",
        parameters,
    ];
}
//# sourceMappingURL=artifactsListRemoteSources.js.map