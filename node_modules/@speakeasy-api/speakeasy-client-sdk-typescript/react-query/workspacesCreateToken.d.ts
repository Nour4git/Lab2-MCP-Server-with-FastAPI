import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type WorkspacesCreateTokenMutationVariables = {
    request: operations.CreateWorkspaceTokenRequest;
    options?: RequestOptions;
};
export type WorkspacesCreateTokenMutationData = void;
/**
 * Create a token for a particular workspace
 */
export declare function useWorkspacesCreateTokenMutation(options?: MutationHookOptions<WorkspacesCreateTokenMutationData, Error, WorkspacesCreateTokenMutationVariables>): UseMutationResult<WorkspacesCreateTokenMutationData, Error, WorkspacesCreateTokenMutationVariables>;
export declare function mutationKeyWorkspacesCreateToken(): MutationKey;
export declare function buildWorkspacesCreateTokenMutation(client$: SpeakeasyCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: WorkspacesCreateTokenMutationVariables) => Promise<WorkspacesCreateTokenMutationData>;
};
//# sourceMappingURL=workspacesCreateToken.d.ts.map