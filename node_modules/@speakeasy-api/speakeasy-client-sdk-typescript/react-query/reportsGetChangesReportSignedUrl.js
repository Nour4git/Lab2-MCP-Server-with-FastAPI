"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useReportsGetChangesReportSignedUrl = useReportsGetChangesReportSignedUrl;
exports.useReportsGetChangesReportSignedUrlSuspense = useReportsGetChangesReportSignedUrlSuspense;
exports.prefetchReportsGetChangesReportSignedUrl = prefetchReportsGetChangesReportSignedUrl;
exports.setReportsGetChangesReportSignedUrlData = setReportsGetChangesReportSignedUrlData;
exports.invalidateReportsGetChangesReportSignedUrl = invalidateReportsGetChangesReportSignedUrl;
exports.invalidateAllReportsGetChangesReportSignedUrl = invalidateAllReportsGetChangesReportSignedUrl;
exports.buildReportsGetChangesReportSignedUrlQuery = buildReportsGetChangesReportSignedUrlQuery;
exports.queryKeyReportsGetChangesReportSignedUrl = queryKeyReportsGetChangesReportSignedUrl;
const react_query_1 = require("@tanstack/react-query");
const reportsGetChangesReportSignedUrl_js_1 = require("../funcs/reportsGetChangesReportSignedUrl.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get the signed access url for the change reports for a particular document.
 */
function useReportsGetChangesReportSignedUrl(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildReportsGetChangesReportSignedUrlQuery(client, request, options),
        ...options,
    });
}
/**
 * Get the signed access url for the change reports for a particular document.
 */
function useReportsGetChangesReportSignedUrlSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildReportsGetChangesReportSignedUrlQuery(client, request, options),
        ...options,
    });
}
function prefetchReportsGetChangesReportSignedUrl(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildReportsGetChangesReportSignedUrlQuery(client$, request),
    });
}
function setReportsGetChangesReportSignedUrlData(client, queryKeyBase, data) {
    const key = queryKeyReportsGetChangesReportSignedUrl(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateReportsGetChangesReportSignedUrl(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Reports",
            "getChangesReportSignedUrl",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllReportsGetChangesReportSignedUrl(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Reports",
            "getChangesReportSignedUrl",
        ],
    });
}
function buildReportsGetChangesReportSignedUrlQuery(client$, request, options) {
    return {
        queryKey: queryKeyReportsGetChangesReportSignedUrl(request.documentChecksum),
        queryFn: async function reportsGetChangesReportSignedUrlQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, reportsGetChangesReportSignedUrl_js_1.reportsGetChangesReportSignedUrl)(client$, request, mergedOptions));
        },
    };
}
function queryKeyReportsGetChangesReportSignedUrl(documentChecksum) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Reports",
        "getChangesReportSignedUrl",
        documentChecksum,
    ];
}
//# sourceMappingURL=reportsGetChangesReportSignedUrl.js.map