"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOrganizationsGetUsage = useOrganizationsGetUsage;
exports.useOrganizationsGetUsageSuspense = useOrganizationsGetUsageSuspense;
exports.prefetchOrganizationsGetUsage = prefetchOrganizationsGetUsage;
exports.setOrganizationsGetUsageData = setOrganizationsGetUsageData;
exports.invalidateAllOrganizationsGetUsage = invalidateAllOrganizationsGetUsage;
exports.buildOrganizationsGetUsageQuery = buildOrganizationsGetUsageQuery;
exports.queryKeyOrganizationsGetUsage = queryKeyOrganizationsGetUsage;
const react_query_1 = require("@tanstack/react-query");
const organizationsGetUsage_js_1 = require("../funcs/organizationsGetUsage.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get billing usage summary for a particular organization
 *
 * @remarks
 * Returns a billing usage summary by target languages for a particular organization
 */
function useOrganizationsGetUsage(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildOrganizationsGetUsageQuery(client, options),
        ...options,
    });
}
/**
 * Get billing usage summary for a particular organization
 *
 * @remarks
 * Returns a billing usage summary by target languages for a particular organization
 */
function useOrganizationsGetUsageSuspense(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildOrganizationsGetUsageQuery(client, options),
        ...options,
    });
}
function prefetchOrganizationsGetUsage(queryClient, client$) {
    return queryClient.prefetchQuery({
        ...buildOrganizationsGetUsageQuery(client$),
    });
}
function setOrganizationsGetUsageData(client, data) {
    const key = queryKeyOrganizationsGetUsage();
    return client.setQueryData(key, data);
}
function invalidateAllOrganizationsGetUsage(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Organizations",
            "getUsage",
        ],
    });
}
function buildOrganizationsGetUsageQuery(client$, options) {
    return {
        queryKey: queryKeyOrganizationsGetUsage(),
        queryFn: async function organizationsGetUsageQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, organizationsGetUsage_js_1.organizationsGetUsage)(client$, mergedOptions));
        },
    };
}
function queryKeyOrganizationsGetUsage() {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Organizations",
        "getUsage",
    ];
}
//# sourceMappingURL=organizationsGetUsage.js.map