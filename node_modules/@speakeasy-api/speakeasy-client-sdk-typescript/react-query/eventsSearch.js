"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEventsSearch = useEventsSearch;
exports.useEventsSearchSuspense = useEventsSearchSuspense;
exports.prefetchEventsSearch = prefetchEventsSearch;
exports.setEventsSearchData = setEventsSearchData;
exports.invalidateEventsSearch = invalidateEventsSearch;
exports.invalidateAllEventsSearch = invalidateAllEventsSearch;
exports.buildEventsSearchQuery = buildEventsSearchQuery;
exports.queryKeyEventsSearch = queryKeyEventsSearch;
const react_query_1 = require("@tanstack/react-query");
const eventsSearch_js_1 = require("../funcs/eventsSearch.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Search events for a particular workspace by any field
 */
function useEventsSearch(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildEventsSearchQuery(client, request, options),
        ...options,
    });
}
/**
 * Search events for a particular workspace by any field
 */
function useEventsSearchSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildEventsSearchQuery(client, request, options),
        ...options,
    });
}
function prefetchEventsSearch(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildEventsSearchQuery(client$, request),
    });
}
function setEventsSearchData(client, queryKeyBase, data) {
    const key = queryKeyEventsSearch(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateEventsSearch(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Events",
            "search",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllEventsSearch(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Events",
            "search",
        ],
    });
}
function buildEventsSearchQuery(client$, request, options) {
    return {
        queryKey: queryKeyEventsSearch(request.workspaceId, {
            sourceRevisionDigest: request.sourceRevisionDigest,
            lintReportDigest: request.lintReportDigest,
            openapiDiffReportDigest: request.openapiDiffReportDigest,
            interactionType: request.interactionType,
            generateGenLockId: request.generateGenLockId,
            executionId: request.executionId,
            success: request.success,
            limit: request.limit,
        }),
        queryFn: async function eventsSearchQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, eventsSearch_js_1.eventsSearch)(client$, request, mergedOptions));
        },
    };
}
function queryKeyEventsSearch(workspaceId, parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Events",
        "search",
        workspaceId,
        parameters,
    ];
}
//# sourceMappingURL=eventsSearch.js.map