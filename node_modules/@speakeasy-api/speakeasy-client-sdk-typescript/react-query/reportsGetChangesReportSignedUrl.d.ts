import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ReportsGetChangesReportSignedUrlQueryData = operations.GetChangesReportSignedUrlSignedAccess;
/**
 * Get the signed access url for the change reports for a particular document.
 */
export declare function useReportsGetChangesReportSignedUrl(request: operations.GetChangesReportSignedUrlRequest, options?: QueryHookOptions<ReportsGetChangesReportSignedUrlQueryData>): UseQueryResult<ReportsGetChangesReportSignedUrlQueryData, Error>;
/**
 * Get the signed access url for the change reports for a particular document.
 */
export declare function useReportsGetChangesReportSignedUrlSuspense(request: operations.GetChangesReportSignedUrlRequest, options?: SuspenseQueryHookOptions<ReportsGetChangesReportSignedUrlQueryData>): UseSuspenseQueryResult<ReportsGetChangesReportSignedUrlQueryData, Error>;
export declare function prefetchReportsGetChangesReportSignedUrl(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetChangesReportSignedUrlRequest): Promise<void>;
export declare function setReportsGetChangesReportSignedUrlData(client: QueryClient, queryKeyBase: [documentChecksum: string], data: ReportsGetChangesReportSignedUrlQueryData): ReportsGetChangesReportSignedUrlQueryData | undefined;
export declare function invalidateReportsGetChangesReportSignedUrl(client: QueryClient, queryKeyBase: TupleToPrefixes<[documentChecksum: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllReportsGetChangesReportSignedUrl(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildReportsGetChangesReportSignedUrlQuery(client$: SpeakeasyCore, request: operations.GetChangesReportSignedUrlRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ReportsGetChangesReportSignedUrlQueryData>;
};
export declare function queryKeyReportsGetChangesReportSignedUrl(documentChecksum: string): QueryKey;
//# sourceMappingURL=reportsGetChangesReportSignedUrl.d.ts.map