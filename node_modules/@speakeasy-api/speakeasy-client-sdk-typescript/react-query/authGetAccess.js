"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthGetAccess = useAuthGetAccess;
exports.useAuthGetAccessSuspense = useAuthGetAccessSuspense;
exports.prefetchAuthGetAccess = prefetchAuthGetAccess;
exports.setAuthGetAccessData = setAuthGetAccessData;
exports.invalidateAuthGetAccess = invalidateAuthGetAccess;
exports.invalidateAllAuthGetAccess = invalidateAllAuthGetAccess;
exports.buildAuthGetAccessQuery = buildAuthGetAccessQuery;
exports.queryKeyAuthGetAccess = queryKeyAuthGetAccess;
const react_query_1 = require("@tanstack/react-query");
const authGetAccess_js_1 = require("../funcs/authGetAccess.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get access allowances for a particular workspace
 *
 * @remarks
 * Checks if generation is permitted for a particular run of the CLI
 */
function useAuthGetAccess(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useQuery)({
        ...buildAuthGetAccessQuery(client, request, options),
        ...options,
    });
}
/**
 * Get access allowances for a particular workspace
 *
 * @remarks
 * Checks if generation is permitted for a particular run of the CLI
 */
function useAuthGetAccessSuspense(request, options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildAuthGetAccessQuery(client, request, options),
        ...options,
    });
}
function prefetchAuthGetAccess(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildAuthGetAccessQuery(client$, request),
    });
}
function setAuthGetAccessData(client, queryKeyBase, data) {
    const key = queryKeyAuthGetAccess(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateAuthGetAccess(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Auth",
            "getAccess",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllAuthGetAccess(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@speakeasy-api/speakeasy-client-sdk-typescript",
            "Auth",
            "getAccess",
        ],
    });
}
function buildAuthGetAccessQuery(client$, request, options) {
    return {
        queryKey: queryKeyAuthGetAccess({
            genLockId: request.genLockId,
            targetType: request.targetType,
            passive: request.passive,
        }),
        queryFn: async function authGetAccessQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, authGetAccess_js_1.authGetAccess)(client$, request, mergedOptions));
        },
    };
}
function queryKeyAuthGetAccess(parameters) {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "Auth",
        "getAccess",
        parameters,
    ];
}
//# sourceMappingURL=authGetAccess.js.map