import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type WorkspacesGetSettingsQueryData = shared.WorkspaceSettings;
/**
 * Get workspace settings
 *
 * @remarks
 * Get settings about a particular workspace.
 */
export declare function useWorkspacesGetSettings(request: operations.GetWorkspaceSettingsRequest, options?: QueryHookOptions<WorkspacesGetSettingsQueryData>): UseQueryResult<WorkspacesGetSettingsQueryData, Error>;
/**
 * Get workspace settings
 *
 * @remarks
 * Get settings about a particular workspace.
 */
export declare function useWorkspacesGetSettingsSuspense(request: operations.GetWorkspaceSettingsRequest, options?: SuspenseQueryHookOptions<WorkspacesGetSettingsQueryData>): UseSuspenseQueryResult<WorkspacesGetSettingsQueryData, Error>;
export declare function prefetchWorkspacesGetSettings(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceSettingsRequest): Promise<void>;
export declare function setWorkspacesGetSettingsData(client: QueryClient, queryKeyBase: [workspaceId: string | undefined], data: WorkspacesGetSettingsQueryData): WorkspacesGetSettingsQueryData | undefined;
export declare function invalidateWorkspacesGetSettings(client: QueryClient, queryKeyBase: TupleToPrefixes<[workspaceId: string | undefined]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllWorkspacesGetSettings(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildWorkspacesGetSettingsQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceSettingsRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetSettingsQueryData>;
};
export declare function queryKeyWorkspacesGetSettings(workspaceId: string | undefined): QueryKey;
//# sourceMappingURL=workspacesGetSettings.d.ts.map