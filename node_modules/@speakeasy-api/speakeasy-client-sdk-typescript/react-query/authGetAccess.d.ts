import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type AuthGetAccessQueryData = shared.AccessDetails;
/**
 * Get access allowances for a particular workspace
 *
 * @remarks
 * Checks if generation is permitted for a particular run of the CLI
 */
export declare function useAuthGetAccess(request: operations.GetWorkspaceAccessRequest, options?: QueryHookOptions<AuthGetAccessQueryData>): UseQueryResult<AuthGetAccessQueryData, Error>;
/**
 * Get access allowances for a particular workspace
 *
 * @remarks
 * Checks if generation is permitted for a particular run of the CLI
 */
export declare function useAuthGetAccessSuspense(request: operations.GetWorkspaceAccessRequest, options?: SuspenseQueryHookOptions<AuthGetAccessQueryData>): UseSuspenseQueryResult<AuthGetAccessQueryData, Error>;
export declare function prefetchAuthGetAccess(queryClient: QueryClient, client$: SpeakeasyCore, request: operations.GetWorkspaceAccessRequest): Promise<void>;
export declare function setAuthGetAccessData(client: QueryClient, queryKeyBase: [
    parameters: {
        genLockId?: string | undefined;
        targetType?: string | undefined;
        passive?: boolean | undefined;
    }
], data: AuthGetAccessQueryData): AuthGetAccessQueryData | undefined;
export declare function invalidateAuthGetAccess(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        genLockId?: string | undefined;
        targetType?: string | undefined;
        passive?: boolean | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllAuthGetAccess(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildAuthGetAccessQuery(client$: SpeakeasyCore, request: operations.GetWorkspaceAccessRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<AuthGetAccessQueryData>;
};
export declare function queryKeyAuthGetAccess(parameters: {
    genLockId?: string | undefined;
    targetType?: string | undefined;
    passive?: boolean | undefined;
}): QueryKey;
//# sourceMappingURL=authGetAccess.d.ts.map