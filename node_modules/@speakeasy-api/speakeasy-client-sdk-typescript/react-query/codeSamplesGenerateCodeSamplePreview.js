"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCodeSamplesGenerateCodeSamplePreviewMutation = useCodeSamplesGenerateCodeSamplePreviewMutation;
exports.mutationKeyCodeSamplesGenerateCodeSamplePreview = mutationKeyCodeSamplesGenerateCodeSamplePreview;
exports.buildCodeSamplesGenerateCodeSamplePreviewMutation = buildCodeSamplesGenerateCodeSamplePreviewMutation;
const react_query_1 = require("@tanstack/react-query");
const codeSamplesGenerateCodeSamplePreview_js_1 = require("../funcs/codeSamplesGenerateCodeSamplePreview.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../sdk/types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Generate Code Sample previews from a file and configuration parameters.
 *
 * @remarks
 * This endpoint generates Code Sample previews from a file and configuration parameters.
 */
function useCodeSamplesGenerateCodeSamplePreviewMutation(options) {
    const client = (0, _context_js_1.useSpeakeasyContext)();
    return (0, react_query_1.useMutation)({
        ...buildCodeSamplesGenerateCodeSamplePreviewMutation(client, options),
        ...options,
    });
}
function mutationKeyCodeSamplesGenerateCodeSamplePreview() {
    return [
        "@speakeasy-api/speakeasy-client-sdk-typescript",
        "CodeSamples",
        "generateCodeSamplePreview",
    ];
}
function buildCodeSamplesGenerateCodeSamplePreviewMutation(client$, hookOptions) {
    return {
        mutationKey: mutationKeyCodeSamplesGenerateCodeSamplePreview(),
        mutationFn: function codeSamplesGenerateCodeSamplePreviewMutationFn({ request, options, }) {
            const mergedOptions = {
                ...hookOptions,
                ...options,
                fetchOptions: {
                    ...hookOptions?.fetchOptions,
                    ...options?.fetchOptions,
                    signal: (0, primitives_js_1.combineSignals)(hookOptions?.fetchOptions?.signal, options?.fetchOptions?.signal),
                },
            };
            return (0, fp_js_1.unwrapAsync)((0, codeSamplesGenerateCodeSamplePreview_js_1.codeSamplesGenerateCodeSamplePreview)(client$, request, mergedOptions));
        },
    };
}
//# sourceMappingURL=codeSamplesGenerateCodeSamplePreview.js.map