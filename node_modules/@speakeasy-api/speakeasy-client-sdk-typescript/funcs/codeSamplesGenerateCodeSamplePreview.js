"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.codeSamplesGenerateCodeSamplePreview = codeSamplesGenerateCodeSamplePreview;
const encodings_js_1 = require("../lib/encodings.js");
const files_js_1 = require("../lib/files.js");
const M = __importStar(require("../lib/matchers.js"));
const primitives_js_1 = require("../lib/primitives.js");
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const errors = __importStar(require("../sdk/models/errors/index.js"));
const shared = __importStar(require("../sdk/models/shared/index.js"));
const async_js_1 = require("../sdk/types/async.js");
const blobs_js_1 = require("../sdk/types/blobs.js");
const streams_js_1 = require("../sdk/types/streams.js");
/**
 * Generate Code Sample previews from a file and configuration parameters.
 *
 * @remarks
 * This endpoint generates Code Sample previews from a file and configuration parameters.
 */
function codeSamplesGenerateCodeSamplePreview(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => shared.CodeSampleSchemaInput$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = new FormData();
    (0, encodings_js_1.appendForm)(body, "language", payload.language);
    if ((0, blobs_js_1.isBlobLike)(payload.schema_file)) {
        (0, encodings_js_1.appendForm)(body, "schema_file", payload.schema_file);
    }
    else if ((0, streams_js_1.isReadableStream)(payload.schema_file.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.schema_file.content);
        const contentType = (0, files_js_1.getContentTypeFromFileName)(payload.schema_file.fileName)
            || "application/octet-stream";
        const blob = new Blob([buffer], { type: contentType });
        (0, encodings_js_1.appendForm)(body, "schema_file", blob, payload.schema_file.fileName);
    }
    else {
        const contentType = (0, files_js_1.getContentTypeFromFileName)(payload.schema_file.fileName)
            || "application/octet-stream";
        (0, encodings_js_1.appendForm)(body, "schema_file", new Blob([payload.schema_file.content], { type: contentType }), payload.schema_file.fileName);
    }
    if (payload.operation_ids !== undefined) {
        (0, encodings_js_1.appendForm)(body, "operation_ids", payload.operation_ids);
    }
    if (payload.package_name !== undefined) {
        (0, encodings_js_1.appendForm)(body, "package_name", payload.package_name);
    }
    if (payload.sdk_class_name !== undefined) {
        (0, encodings_js_1.appendForm)(body, "sdk_class_name", payload.sdk_class_name);
    }
    const path = (0, url_js_1.pathToFunc)("/v1/code_sample/preview")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json",
    }));
    const securityInput = await (0, security_js_1.extractSecurity)(client._options.security);
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        options: client._options,
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "generateCodeSamplePreview",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.security,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        userAgent: client._options.userAgent,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.json("2XX", shared.UsageSnippets$inboundSchema), M.jsonErr("4XX", errors.ErrorT$inboundSchema), M.jsonErr("5XX", errors.ErrorT$inboundSchema))(response, req, { extraFields: responseFields });
    if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
    }
    return [result, { status: "complete", request: req, response }];
}
//# sourceMappingURL=codeSamplesGenerateCodeSamplePreview.js.map