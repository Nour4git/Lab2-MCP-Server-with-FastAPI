"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organizations = void 0;
const organizationsCreate_js_1 = require("../funcs/organizationsCreate.js");
const organizationsCreateBillingAddOns_js_1 = require("../funcs/organizationsCreateBillingAddOns.js");
const organizationsCreateFreeTrial_js_1 = require("../funcs/organizationsCreateFreeTrial.js");
const organizationsDeleteBillingAddOn_js_1 = require("../funcs/organizationsDeleteBillingAddOn.js");
const organizationsGet_js_1 = require("../funcs/organizationsGet.js");
const organizationsGetAll_js_1 = require("../funcs/organizationsGetAll.js");
const organizationsGetBillingAddOns_js_1 = require("../funcs/organizationsGetBillingAddOns.js");
const organizationsGetUsage_js_1 = require("../funcs/organizationsGetUsage.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("./types/fp.js");
class Organizations extends sdks_js_1.ClientSDK {
    /**
     * Create an organization
     *
     * @remarks
     * Creates an organization
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsCreate_js_1.organizationsCreate)(this, request, options));
    }
    /**
     * Create billing add ons
     */
    async createBillingAddOns(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsCreateBillingAddOns_js_1.organizationsCreateBillingAddOns)(this, request, options));
    }
    /**
     * Create a free trial for an organization
     *
     * @remarks
     * Creates a free trial for an organization
     */
    async createFreeTrial(options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsCreateFreeTrial_js_1.organizationsCreateFreeTrial)(this, options));
    }
    /**
     * Delete billing add ons
     */
    async deleteBillingAddOn(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsDeleteBillingAddOn_js_1.organizationsDeleteBillingAddOn)(this, request, options));
    }
    /**
     * Get organization
     *
     * @remarks
     * Get information about a particular organization.
     */
    async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsGet_js_1.organizationsGet)(this, request, options));
    }
    /**
     * Get organizations for a user
     *
     * @remarks
     * Returns a list of organizations a user has access too
     */
    async getAll(options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsGetAll_js_1.organizationsGetAll)(this, options));
    }
    /**
     * Get billing add ons
     */
    async getBillingAddOns(options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsGetBillingAddOns_js_1.organizationsGetBillingAddOns)(this, options));
    }
    /**
     * Get billing usage summary for a particular organization
     *
     * @remarks
     * Returns a billing usage summary by target languages for a particular organization
     */
    async getUsage(options) {
        return (0, fp_js_1.unwrapAsync)((0, organizationsGetUsage_js_1.organizationsGetUsage)(this, options));
    }
}
exports.Organizations = Organizations;
//# sourceMappingURL=organizations.js.map