import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
export declare class PublishingTokens extends ClientSDK {
    /**
     * Create a publishing token for a workspace
     *
     * @remarks
     * Creates a publishing token for the current workspace
     */
    create(request?: operations.CreatePublishingTokenRequestBody | undefined, options?: RequestOptions): Promise<shared.PublishingToken>;
    /**
     * Delete a specific publishing token
     *
     * @remarks
     * Delete a particular publishing token.
     */
    delete(request: operations.DeletePublishingTokenRequest, options?: RequestOptions): Promise<void>;
    /**
     * Get a specific publishing token
     *
     * @remarks
     * Get information about a particular publishing token.
     */
    get(request: operations.GetPublishingTokenByIDRequest, options?: RequestOptions): Promise<shared.PublishingToken>;
    /**
     * Get publishing tokens for a workspace
     *
     * @remarks
     * Returns a publishing token for the current workspace
     */
    list(options?: RequestOptions): Promise<Array<shared.PublishingToken>>;
    /**
     * Get metadata about the token
     *
     * @remarks
     * Get information about a particular publishing token.
     */
    resolveMetadata(request: operations.GetPublishingTokenPublicMetadataRequest, options?: RequestOptions): Promise<operations.GetPublishingTokenPublicMetadataResponseBody>;
    /**
     * Get a specific publishing token target
     *
     * @remarks
     * Get information about a particular publishing token target.
     */
    resolveTarget(request: operations.GetPublishingTokenTargetByIDRequest, options?: RequestOptions): Promise<string>;
    /**
     * Updates the validitity period of a publishing token
     *
     * @remarks
     * Updates the validity period of a particular publishing token.
     */
    update(request: operations.UpdatePublishingTokenExpirationRequest, options?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=publishingtokens.d.ts.map