import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
export declare class Workspaces extends ClientSDK {
    /**
     * Create a workspace
     *
     * @remarks
     * Creates a workspace
     */
    create(request: shared.Workspace, options?: RequestOptions): Promise<shared.Workspace>;
    /**
     * Create a token for a particular workspace
     */
    createToken(request: operations.CreateWorkspaceTokenRequest, options?: RequestOptions): Promise<void>;
    /**
     * Delete a token for a particular workspace
     */
    deleteToken(request: operations.DeleteWorkspaceTokenRequest, options?: RequestOptions): Promise<void>;
    /**
     * Get workspace by context
     *
     * @remarks
     * Get information about a particular workspace by context.
     */
    get(options?: RequestOptions): Promise<shared.WorkspaceAndOrganization>;
    /**
     * Get workspaces for a user
     *
     * @remarks
     * Returns a list of workspaces a user has access too
     */
    getAll(options?: RequestOptions): Promise<Array<shared.Workspace>>;
    /**
     * Get workspace
     *
     * @remarks
     * Get information about a particular workspace.
     */
    getByID(request: operations.GetWorkspaceRequest, options?: RequestOptions): Promise<shared.Workspace>;
    /**
     * Get workspace feature flags
     */
    getFeatureFlags(request: operations.GetWorkspaceFeatureFlagsRequest, options?: RequestOptions): Promise<shared.WorkspaceFeatureFlagResponse>;
    /**
     * Get workspace settings
     *
     * @remarks
     * Get settings about a particular workspace.
     */
    getSettings(request: operations.GetWorkspaceSettingsRequest, options?: RequestOptions): Promise<shared.WorkspaceSettings>;
    /**
     * Get team members for a particular workspace
     */
    getTeam(request: operations.GetWorkspaceTeamRequest, options?: RequestOptions): Promise<shared.WorkspaceTeamResponse>;
    /**
     * Get tokens for a particular workspace
     */
    getTokens(request: operations.GetWorkspaceTokensRequest, options?: RequestOptions): Promise<Array<shared.WorkspaceToken>>;
    /**
     * Grant a user access to a particular workspace
     */
    grantAccess(request: operations.GrantUserAccessToWorkspaceRequest, options?: RequestOptions): Promise<shared.WorkspaceInviteResponse>;
    /**
     * Revoke a user's access to a particular workspace
     */
    revokeAccess(request: operations.RevokeUserAccessToWorkspaceRequest, options?: RequestOptions): Promise<void>;
    /**
     * Set workspace feature flags
     */
    setFeatureFlags(request: shared.WorkspaceFeatureFlagRequest, options?: RequestOptions): Promise<shared.WorkspaceFeatureFlagResponse>;
    /**
     * Update workspace details
     *
     * @remarks
     * Update information about a particular workspace.
     */
    update(request: operations.UpdateWorkspaceDetailsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Update workspace settings
     *
     * @remarks
     * Update settings about a particular workspace.
     */
    updateSettings(request: operations.UpdateWorkspaceSettingsRequest, options?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=workspaces.d.ts.map