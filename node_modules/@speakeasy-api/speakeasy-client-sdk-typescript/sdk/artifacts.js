"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artifacts = void 0;
const artifactsCreateRemoteSource_js_1 = require("../funcs/artifactsCreateRemoteSource.js");
const artifactsGetBlob_js_1 = require("../funcs/artifactsGetBlob.js");
const artifactsGetManifest_js_1 = require("../funcs/artifactsGetManifest.js");
const artifactsGetNamespaces_js_1 = require("../funcs/artifactsGetNamespaces.js");
const artifactsGetRevisions_js_1 = require("../funcs/artifactsGetRevisions.js");
const artifactsGetTags_js_1 = require("../funcs/artifactsGetTags.js");
const artifactsListRemoteSources_js_1 = require("../funcs/artifactsListRemoteSources.js");
const artifactsPostTags_js_1 = require("../funcs/artifactsPostTags.js");
const artifactsPreflight_js_1 = require("../funcs/artifactsPreflight.js");
const artifactsSetArchived_js_1 = require("../funcs/artifactsSetArchived.js");
const artifactsSetVisibility_js_1 = require("../funcs/artifactsSetVisibility.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("./types/fp.js");
class Artifacts extends sdks_js_1.ClientSDK {
    /**
     * Configure a new remote source
     */
    async createRemoteSource(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsCreateRemoteSource_js_1.artifactsCreateRemoteSource)(this, request, options));
    }
    /**
     * Get blob for a particular digest
     */
    async getBlob(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsGetBlob_js_1.artifactsGetBlob)(this, request, options));
    }
    /**
     * Get manifest for a particular reference
     */
    async getManifest(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsGetManifest_js_1.artifactsGetManifest)(this, request, options));
    }
    /**
     * Each namespace contains many revisions.
     */
    async getNamespaces(options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsGetNamespaces_js_1.artifactsGetNamespaces)(this, options));
    }
    async getRevisions(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsGetRevisions_js_1.artifactsGetRevisions)(this, request, options));
    }
    async getTags(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsGetTags_js_1.artifactsGetTags)(this, request, options));
    }
    /**
     * Get remote sources attached to a particular namespace
     */
    async listRemoteSources(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsListRemoteSources_js_1.artifactsListRemoteSources)(this, request, options));
    }
    /**
     * Add tags to an existing revision
     */
    async postTags(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsPostTags_js_1.artifactsPostTags)(this, request, options));
    }
    /**
     * Get access token for communicating with OCI distribution endpoints
     */
    async preflight(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsPreflight_js_1.artifactsPreflight)(this, request, options));
    }
    /**
     * Set whether a namespace is archived
     */
    async setArchived(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsSetArchived_js_1.artifactsSetArchived)(this, request, options));
    }
    /**
     * Set visibility of a namespace with an existing metadata entry
     */
    async setVisibility(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, artifactsSetVisibility_js_1.artifactsSetVisibility)(this, request, options));
    }
}
exports.Artifacts = Artifacts;
//# sourceMappingURL=artifacts.js.map