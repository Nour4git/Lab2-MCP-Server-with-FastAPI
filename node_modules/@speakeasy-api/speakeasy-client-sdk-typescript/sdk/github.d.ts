import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
export declare class Github extends ClientSDK {
    checkAccess(request: operations.CheckGithubAccessRequest, options?: RequestOptions): Promise<void>;
    checkPublishingPRs(request: operations.GithubCheckPublishingPRsRequest, options?: RequestOptions): Promise<shared.GithubPublishingPRResponse>;
    checkPublishingSecrets(request: operations.GithubCheckPublishingSecretsRequest, options?: RequestOptions): Promise<shared.GithubMissingPublishingSecretsResponse>;
    configureCodeSamples(request: shared.GithubConfigureCodeSamplesRequest, options?: RequestOptions): Promise<shared.GithubConfigureCodeSamplesResponse>;
    configureMintlifyRepo(request: shared.GithubConfigureMintlifyRepoRequest, options?: RequestOptions): Promise<void>;
    configureTarget(request: shared.GithubConfigureTargetRequest, options?: RequestOptions): Promise<void>;
    getAction(request: operations.GetGitHubActionRequest, options?: RequestOptions): Promise<shared.GithubGetActionResponse>;
    getSetup(request: operations.GetGithubSetupStateRequest, options?: RequestOptions): Promise<shared.GithubSetupStateResponse>;
    linkGithub(request: operations.LinkGithubAccessRequest, options?: RequestOptions): Promise<void>;
    storePublishingSecrets(request: shared.GithubStorePublishingSecretsRequest, options?: RequestOptions): Promise<void>;
    triggerAction(request: shared.GithubTriggerActionRequest, options?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=github.d.ts.map