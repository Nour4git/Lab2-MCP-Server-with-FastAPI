"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workspaces = void 0;
const workspacesCreate_js_1 = require("../funcs/workspacesCreate.js");
const workspacesCreateToken_js_1 = require("../funcs/workspacesCreateToken.js");
const workspacesDeleteToken_js_1 = require("../funcs/workspacesDeleteToken.js");
const workspacesGet_js_1 = require("../funcs/workspacesGet.js");
const workspacesGetAll_js_1 = require("../funcs/workspacesGetAll.js");
const workspacesGetByID_js_1 = require("../funcs/workspacesGetByID.js");
const workspacesGetFeatureFlags_js_1 = require("../funcs/workspacesGetFeatureFlags.js");
const workspacesGetSettings_js_1 = require("../funcs/workspacesGetSettings.js");
const workspacesGetTeam_js_1 = require("../funcs/workspacesGetTeam.js");
const workspacesGetTokens_js_1 = require("../funcs/workspacesGetTokens.js");
const workspacesGrantAccess_js_1 = require("../funcs/workspacesGrantAccess.js");
const workspacesRevokeAccess_js_1 = require("../funcs/workspacesRevokeAccess.js");
const workspacesSetFeatureFlags_js_1 = require("../funcs/workspacesSetFeatureFlags.js");
const workspacesUpdate_js_1 = require("../funcs/workspacesUpdate.js");
const workspacesUpdateSettings_js_1 = require("../funcs/workspacesUpdateSettings.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("./types/fp.js");
class Workspaces extends sdks_js_1.ClientSDK {
    /**
     * Create a workspace
     *
     * @remarks
     * Creates a workspace
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesCreate_js_1.workspacesCreate)(this, request, options));
    }
    /**
     * Create a token for a particular workspace
     */
    async createToken(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesCreateToken_js_1.workspacesCreateToken)(this, request, options));
    }
    /**
     * Delete a token for a particular workspace
     */
    async deleteToken(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesDeleteToken_js_1.workspacesDeleteToken)(this, request, options));
    }
    /**
     * Get workspace by context
     *
     * @remarks
     * Get information about a particular workspace by context.
     */
    async get(options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGet_js_1.workspacesGet)(this, options));
    }
    /**
     * Get workspaces for a user
     *
     * @remarks
     * Returns a list of workspaces a user has access too
     */
    async getAll(options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGetAll_js_1.workspacesGetAll)(this, options));
    }
    /**
     * Get workspace
     *
     * @remarks
     * Get information about a particular workspace.
     */
    async getByID(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGetByID_js_1.workspacesGetByID)(this, request, options));
    }
    /**
     * Get workspace feature flags
     */
    async getFeatureFlags(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGetFeatureFlags_js_1.workspacesGetFeatureFlags)(this, request, options));
    }
    /**
     * Get workspace settings
     *
     * @remarks
     * Get settings about a particular workspace.
     */
    async getSettings(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGetSettings_js_1.workspacesGetSettings)(this, request, options));
    }
    /**
     * Get team members for a particular workspace
     */
    async getTeam(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGetTeam_js_1.workspacesGetTeam)(this, request, options));
    }
    /**
     * Get tokens for a particular workspace
     */
    async getTokens(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGetTokens_js_1.workspacesGetTokens)(this, request, options));
    }
    /**
     * Grant a user access to a particular workspace
     */
    async grantAccess(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesGrantAccess_js_1.workspacesGrantAccess)(this, request, options));
    }
    /**
     * Revoke a user's access to a particular workspace
     */
    async revokeAccess(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesRevokeAccess_js_1.workspacesRevokeAccess)(this, request, options));
    }
    /**
     * Set workspace feature flags
     */
    async setFeatureFlags(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesSetFeatureFlags_js_1.workspacesSetFeatureFlags)(this, request, options));
    }
    /**
     * Update workspace details
     *
     * @remarks
     * Update information about a particular workspace.
     */
    async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesUpdate_js_1.workspacesUpdate)(this, request, options));
    }
    /**
     * Update workspace settings
     *
     * @remarks
     * Update settings about a particular workspace.
     */
    async updateSettings(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, workspacesUpdateSettings_js_1.workspacesUpdateSettings)(this, request, options));
    }
}
exports.Workspaces = Workspaces;
//# sourceMappingURL=workspaces.js.map