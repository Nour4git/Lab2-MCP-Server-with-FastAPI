"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeSampleSchemaInput$ = exports.CodeSampleSchemaInput$outboundSchema = exports.CodeSampleSchemaInput$inboundSchema = exports.SchemaFile$ = exports.SchemaFile$outboundSchema = exports.SchemaFile$inboundSchema = void 0;
exports.schemaFileToJSON = schemaFileToJSON;
exports.schemaFileFromJSON = schemaFileFromJSON;
exports.codeSampleSchemaInputToJSON = codeSampleSchemaInputToJSON;
exports.codeSampleSchemaInputFromJSON = codeSampleSchemaInputFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const blobs_js_1 = require("../../types/blobs.js");
/** @internal */
exports.SchemaFile$inboundSchema = z.object({
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
    fileName: z.string(),
});
/** @internal */
exports.SchemaFile$outboundSchema = z.object({
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
    fileName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SchemaFile$;
(function (SchemaFile$) {
    /** @deprecated use `SchemaFile$inboundSchema` instead. */
    SchemaFile$.inboundSchema = exports.SchemaFile$inboundSchema;
    /** @deprecated use `SchemaFile$outboundSchema` instead. */
    SchemaFile$.outboundSchema = exports.SchemaFile$outboundSchema;
})(SchemaFile$ || (exports.SchemaFile$ = SchemaFile$ = {}));
function schemaFileToJSON(schemaFile) {
    return JSON.stringify(exports.SchemaFile$outboundSchema.parse(schemaFile));
}
function schemaFileFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SchemaFile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SchemaFile' from JSON`);
}
/** @internal */
exports.CodeSampleSchemaInput$inboundSchema = z.object({
    language: z.string(),
    operation_ids: z.array(z.string()).optional(),
    package_name: z.string().optional(),
    schema_file: z.lazy(() => exports.SchemaFile$inboundSchema),
    sdk_class_name: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "operation_ids": "operationIds",
        "package_name": "packageName",
        "schema_file": "schemaFile",
        "sdk_class_name": "sdkClassName",
    });
});
/** @internal */
exports.CodeSampleSchemaInput$outboundSchema = z.object({
    language: z.string(),
    operationIds: z.array(z.string()).optional(),
    packageName: z.string().optional(),
    schemaFile: z.lazy(() => exports.SchemaFile$outboundSchema).or(blobs_js_1.blobLikeSchema),
    sdkClassName: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        operationIds: "operation_ids",
        packageName: "package_name",
        schemaFile: "schema_file",
        sdkClassName: "sdk_class_name",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CodeSampleSchemaInput$;
(function (CodeSampleSchemaInput$) {
    /** @deprecated use `CodeSampleSchemaInput$inboundSchema` instead. */
    CodeSampleSchemaInput$.inboundSchema = exports.CodeSampleSchemaInput$inboundSchema;
    /** @deprecated use `CodeSampleSchemaInput$outboundSchema` instead. */
    CodeSampleSchemaInput$.outboundSchema = exports.CodeSampleSchemaInput$outboundSchema;
})(CodeSampleSchemaInput$ || (exports.CodeSampleSchemaInput$ = CodeSampleSchemaInput$ = {}));
function codeSampleSchemaInputToJSON(codeSampleSchemaInput) {
    return JSON.stringify(exports.CodeSampleSchemaInput$outboundSchema.parse(codeSampleSchemaInput));
}
function codeSampleSchemaInputFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CodeSampleSchemaInput$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CodeSampleSchemaInput' from JSON`);
}
//# sourceMappingURL=codesampleschemainput.js.map