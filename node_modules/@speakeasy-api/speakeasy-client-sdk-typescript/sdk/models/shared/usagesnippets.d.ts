import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { UsageSnippet, UsageSnippet$Outbound } from "./usagesnippet.js";
export type UsageSnippets = {
    snippets: Array<UsageSnippet>;
};
/** @internal */
export declare const UsageSnippets$inboundSchema: z.ZodType<UsageSnippets, z.ZodTypeDef, unknown>;
/** @internal */
export type UsageSnippets$Outbound = {
    snippets: Array<UsageSnippet$Outbound>;
};
/** @internal */
export declare const UsageSnippets$outboundSchema: z.ZodType<UsageSnippets$Outbound, z.ZodTypeDef, UsageSnippets>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UsageSnippets$ {
    /** @deprecated use `UsageSnippets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UsageSnippets, z.ZodTypeDef, unknown>;
    /** @deprecated use `UsageSnippets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UsageSnippets$Outbound, z.ZodTypeDef, UsageSnippets>;
    /** @deprecated use `UsageSnippets$Outbound` instead. */
    type Outbound = UsageSnippets$Outbound;
}
export declare function usageSnippetsToJSON(usageSnippets: UsageSnippets): string;
export declare function usageSnippetsFromJSON(jsonString: string): SafeParseResult<UsageSnippets, SDKValidationError>;
//# sourceMappingURL=usagesnippets.d.ts.map