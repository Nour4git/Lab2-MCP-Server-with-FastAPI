import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type PreflightRequest = {
    namespaceName: string;
};
/** @internal */
export declare const PreflightRequest$inboundSchema: z.ZodType<PreflightRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type PreflightRequest$Outbound = {
    namespace_name: string;
};
/** @internal */
export declare const PreflightRequest$outboundSchema: z.ZodType<PreflightRequest$Outbound, z.ZodTypeDef, PreflightRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreflightRequest$ {
    /** @deprecated use `PreflightRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PreflightRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PreflightRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PreflightRequest$Outbound, z.ZodTypeDef, PreflightRequest>;
    /** @deprecated use `PreflightRequest$Outbound` instead. */
    type Outbound = PreflightRequest$Outbound;
}
export declare function preflightRequestToJSON(preflightRequest: PreflightRequest): string;
export declare function preflightRequestFromJSON(jsonString: string): SafeParseResult<PreflightRequest, SDKValidationError>;
//# sourceMappingURL=preflightrequest.d.ts.map