import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Annotations
 */
export type Annotations = {
    /**
     * The authors of the image
     */
    orgOpencontainersImageAuthors?: string | undefined;
    /**
     * The time the image was created
     */
    orgOpencontainersImageCreated?: string | undefined;
    /**
     * Human-readable description of the software packaged in the image
     */
    orgOpencontainersImageDescription?: string | undefined;
    /**
     * The documentation URL of the image
     */
    orgOpencontainersImageDocumentation?: string | undefined;
    orgOpencontainersImageLicenses?: string | undefined;
    /**
     * Name of the reference for a target
     */
    orgOpencontainersImageRefName?: string | undefined;
    /**
     * Source control revision identifier
     */
    orgOpencontainersImageRevision?: string | undefined;
    /**
     * The URL to get source code for building the image
     */
    orgOpencontainersImageSource?: string | undefined;
    /**
     * Human-readable title of the image
     */
    orgOpencontainersImageTitle?: string | undefined;
    /**
     * The URL of the image
     */
    orgOpencontainersImageUrl?: string | undefined;
    /**
     * Name of the distributing entity, organization or individual.
     */
    orgOpencontainersImageVendor?: string | undefined;
    /**
     * The version of the packaged software
     */
    orgOpencontainersImageVersion?: string | undefined;
};
/** @internal */
export declare const Annotations$inboundSchema: z.ZodType<Annotations, z.ZodTypeDef, unknown>;
/** @internal */
export type Annotations$Outbound = {
    "org.opencontainers.image.authors"?: string | undefined;
    "org.opencontainers.image.created"?: string | undefined;
    "org.opencontainers.image.description"?: string | undefined;
    "org.opencontainers.image.documentation"?: string | undefined;
    "org.opencontainers.image.licenses"?: string | undefined;
    "org.opencontainers.image.ref.name"?: string | undefined;
    "org.opencontainers.image.revision"?: string | undefined;
    "org.opencontainers.image.source"?: string | undefined;
    "org.opencontainers.image.title"?: string | undefined;
    "org.opencontainers.image.url"?: string | undefined;
    "org.opencontainers.image.vendor"?: string | undefined;
    "org.opencontainers.image.version"?: string | undefined;
};
/** @internal */
export declare const Annotations$outboundSchema: z.ZodType<Annotations$Outbound, z.ZodTypeDef, Annotations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Annotations$ {
    /** @deprecated use `Annotations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Annotations, z.ZodTypeDef, unknown>;
    /** @deprecated use `Annotations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Annotations$Outbound, z.ZodTypeDef, Annotations>;
    /** @deprecated use `Annotations$Outbound` instead. */
    type Outbound = Annotations$Outbound;
}
export declare function annotationsToJSON(annotations: Annotations): string;
export declare function annotationsFromJSON(jsonString: string): SafeParseResult<Annotations, SDKValidationError>;
//# sourceMappingURL=annotations.d.ts.map