import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Diagnostic = {
    /**
     * Help message for how to fix the issue
     */
    helpMessage?: string | undefined;
    /**
     * Message describing the issue
     */
    message: string;
    /**
     * Schema path to the issue
     */
    path: Array<string>;
    /**
     * Issue type
     */
    type: string;
};
/** @internal */
export declare const Diagnostic$inboundSchema: z.ZodType<Diagnostic, z.ZodTypeDef, unknown>;
/** @internal */
export type Diagnostic$Outbound = {
    helpMessage?: string | undefined;
    message: string;
    path: Array<string>;
    type: string;
};
/** @internal */
export declare const Diagnostic$outboundSchema: z.ZodType<Diagnostic$Outbound, z.ZodTypeDef, Diagnostic>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Diagnostic$ {
    /** @deprecated use `Diagnostic$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Diagnostic, z.ZodTypeDef, unknown>;
    /** @deprecated use `Diagnostic$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Diagnostic$Outbound, z.ZodTypeDef, Diagnostic>;
    /** @deprecated use `Diagnostic$Outbound` instead. */
    type Outbound = Diagnostic$Outbound;
}
export declare function diagnosticToJSON(diagnostic: Diagnostic): string;
export declare function diagnosticFromJSON(jsonString: string): SafeParseResult<Diagnostic, SDKValidationError>;
//# sourceMappingURL=diagnostic.d.ts.map