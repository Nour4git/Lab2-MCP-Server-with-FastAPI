"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliEvent$ = exports.CliEvent$outboundSchema = exports.CliEvent$inboundSchema = exports.OpenapiDiffBumpType$ = exports.OpenapiDiffBumpType$outboundSchema = exports.OpenapiDiffBumpType$inboundSchema = exports.GenerateBumpType$ = exports.GenerateBumpType$outboundSchema = exports.GenerateBumpType$inboundSchema = exports.OpenapiDiffBumpType = exports.GenerateBumpType = void 0;
exports.cliEventToJSON = cliEventToJSON;
exports.cliEventFromJSON = cliEventFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const interactiontype_js_1 = require("./interactiontype.js");
/**
 * Bump type of the lock file (calculated semver delta, custom change (manual release), or prerelease/graduate)
 */
exports.GenerateBumpType = {
    Major: "major",
    Minor: "minor",
    Patch: "patch",
    Custom: "custom",
    Graduate: "graduate",
    Prerelease: "prerelease",
    None: "none",
};
/**
 * Bump type of the lock file (calculated semver delta, or a custom change (manual release))
 */
exports.OpenapiDiffBumpType = {
    Major: "major",
    Minor: "minor",
    Patch: "patch",
    None: "none",
};
/** @internal */
exports.GenerateBumpType$inboundSchema = z.nativeEnum(exports.GenerateBumpType);
/** @internal */
exports.GenerateBumpType$outboundSchema = exports.GenerateBumpType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GenerateBumpType$;
(function (GenerateBumpType$) {
    /** @deprecated use `GenerateBumpType$inboundSchema` instead. */
    GenerateBumpType$.inboundSchema = exports.GenerateBumpType$inboundSchema;
    /** @deprecated use `GenerateBumpType$outboundSchema` instead. */
    GenerateBumpType$.outboundSchema = exports.GenerateBumpType$outboundSchema;
})(GenerateBumpType$ || (exports.GenerateBumpType$ = GenerateBumpType$ = {}));
/** @internal */
exports.OpenapiDiffBumpType$inboundSchema = z.nativeEnum(exports.OpenapiDiffBumpType);
/** @internal */
exports.OpenapiDiffBumpType$outboundSchema = exports.OpenapiDiffBumpType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OpenapiDiffBumpType$;
(function (OpenapiDiffBumpType$) {
    /** @deprecated use `OpenapiDiffBumpType$inboundSchema` instead. */
    OpenapiDiffBumpType$.inboundSchema = exports.OpenapiDiffBumpType$inboundSchema;
    /** @deprecated use `OpenapiDiffBumpType$outboundSchema` instead. */
    OpenapiDiffBumpType$.outboundSchema = exports.OpenapiDiffBumpType$outboundSchema;
})(OpenapiDiffBumpType$ || (exports.OpenapiDiffBumpType$ = OpenapiDiffBumpType$ = {}));
/** @internal */
exports.CliEvent$inboundSchema = z.object({
    commit_head: z.string().optional(),
    continuous_integration_environment: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    duration_ms: z.number().int().optional(),
    error: z.string().optional(),
    execution_id: z.string(),
    generate_bump_type: exports.GenerateBumpType$inboundSchema.optional(),
    generate_config_post_checksum: z.string().optional(),
    generate_config_post_raw: z.string().optional(),
    generate_config_post_version: z.string().optional(),
    generate_config_pre_checksum: z.string().optional(),
    generate_config_pre_raw: z.string().optional(),
    generate_config_pre_version: z.string().optional(),
    generate_eligible_features: z.string().optional(),
    generate_gen_lock_id: z.string().optional(),
    generate_gen_lock_post_features: z.string().optional(),
    generate_gen_lock_pre_blob_digest: z.string().optional(),
    generate_gen_lock_pre_doc_checksum: z.string().optional(),
    generate_gen_lock_pre_doc_version: z.string().optional(),
    generate_gen_lock_pre_features: z.string().optional(),
    generate_gen_lock_pre_namespace_name: z.string().optional(),
    generate_gen_lock_pre_revision_digest: z.string().optional(),
    generate_gen_lock_pre_version: z.string().optional(),
    generate_number_of_operations_ignored: z.number().int().optional(),
    generate_number_of_operations_used: z.number().int().optional(),
    generate_number_of_terraform_resources: z.number().int().optional(),
    generate_output_tests: z.boolean().optional(),
    generate_published: z.boolean().optional(),
    generate_repo_url: z.string().optional(),
    generate_target: z.string().optional(),
    generate_target_name: z.string().optional(),
    generate_target_version: z.string().optional(),
    generate_version: z.string().optional(),
    gh_action_organization: z.string().optional(),
    gh_action_ref: z.string().optional(),
    gh_action_repository: z.string().optional(),
    gh_action_run_link: z.string().optional(),
    gh_action_version: z.string().optional(),
    gh_changes_committed: z.boolean().optional(),
    gh_pull_request: z.string().optional(),
    git_relative_cwd: z.string().optional(),
    git_remote_default_owner: z.string().optional(),
    git_remote_default_repo: z.string().optional(),
    git_user_email: z.string().optional(),
    git_user_name: z.string().optional(),
    hostname: z.string().optional(),
    id: z.string(),
    interaction_type: interactiontype_js_1.InteractionType$inboundSchema,
    last_step: z.string().optional(),
    lint_report_digest: z.string().optional(),
    lint_report_error_count: z.number().int().optional(),
    lint_report_info_count: z.number().int().optional(),
    lint_report_warning_count: z.number().int().optional(),
    local_completed_at: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    local_started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    management_doc_checksum: z.string().optional(),
    management_doc_version: z.string().optional(),
    mermaid_diagram: z.string().optional(),
    openapi_diff_base_source_blob_digest: z.string().optional(),
    openapi_diff_base_source_namespace_name: z.string().optional(),
    openapi_diff_base_source_revision_digest: z.string().optional(),
    openapi_diff_breaking_changes_count: z.number().int().optional(),
    openapi_diff_bump_type: exports.OpenapiDiffBumpType$inboundSchema.optional(),
    openapi_diff_report_digest: z.string().optional(),
    publish_package_name: z.string().optional(),
    publish_package_registry_name: z.string().optional(),
    publish_package_url: z.string().optional(),
    publish_package_version: z.string().optional(),
    raw_command: z.string().optional(),
    repo_label: z.string().optional(),
    source_blob_digest: z.string().optional(),
    source_namespace_name: z.string().optional(),
    source_revision_digest: z.string().optional(),
    speakeasy_api_key_name: z.string(),
    speakeasy_version: z.string(),
    success: z.boolean(),
    test_report_raw: z.string().optional(),
    workflow_lock_post_raw: z.string().optional(),
    workflow_lock_pre_raw: z.string().optional(),
    workflow_post_raw: z.string().optional(),
    workflow_pre_raw: z.string().optional(),
    workspace_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "commit_head": "commitHead",
        "continuous_integration_environment": "continuousIntegrationEnvironment",
        "created_at": "createdAt",
        "duration_ms": "durationMs",
        "execution_id": "executionId",
        "generate_bump_type": "generateBumpType",
        "generate_config_post_checksum": "generateConfigPostChecksum",
        "generate_config_post_raw": "generateConfigPostRaw",
        "generate_config_post_version": "generateConfigPostVersion",
        "generate_config_pre_checksum": "generateConfigPreChecksum",
        "generate_config_pre_raw": "generateConfigPreRaw",
        "generate_config_pre_version": "generateConfigPreVersion",
        "generate_eligible_features": "generateEligibleFeatures",
        "generate_gen_lock_id": "generateGenLockId",
        "generate_gen_lock_post_features": "generateGenLockPostFeatures",
        "generate_gen_lock_pre_blob_digest": "generateGenLockPreBlobDigest",
        "generate_gen_lock_pre_doc_checksum": "generateGenLockPreDocChecksum",
        "generate_gen_lock_pre_doc_version": "generateGenLockPreDocVersion",
        "generate_gen_lock_pre_features": "generateGenLockPreFeatures",
        "generate_gen_lock_pre_namespace_name": "generateGenLockPreNamespaceName",
        "generate_gen_lock_pre_revision_digest": "generateGenLockPreRevisionDigest",
        "generate_gen_lock_pre_version": "generateGenLockPreVersion",
        "generate_number_of_operations_ignored": "generateNumberOfOperationsIgnored",
        "generate_number_of_operations_used": "generateNumberOfOperationsUsed",
        "generate_number_of_terraform_resources": "generateNumberOfTerraformResources",
        "generate_output_tests": "generateOutputTests",
        "generate_published": "generatePublished",
        "generate_repo_url": "generateRepoUrl",
        "generate_target": "generateTarget",
        "generate_target_name": "generateTargetName",
        "generate_target_version": "generateTargetVersion",
        "generate_version": "generateVersion",
        "gh_action_organization": "ghActionOrganization",
        "gh_action_ref": "ghActionRef",
        "gh_action_repository": "ghActionRepository",
        "gh_action_run_link": "ghActionRunLink",
        "gh_action_version": "ghActionVersion",
        "gh_changes_committed": "ghChangesCommitted",
        "gh_pull_request": "ghPullRequest",
        "git_relative_cwd": "gitRelativeCwd",
        "git_remote_default_owner": "gitRemoteDefaultOwner",
        "git_remote_default_repo": "gitRemoteDefaultRepo",
        "git_user_email": "gitUserEmail",
        "git_user_name": "gitUserName",
        "interaction_type": "interactionType",
        "last_step": "lastStep",
        "lint_report_digest": "lintReportDigest",
        "lint_report_error_count": "lintReportErrorCount",
        "lint_report_info_count": "lintReportInfoCount",
        "lint_report_warning_count": "lintReportWarningCount",
        "local_completed_at": "localCompletedAt",
        "local_started_at": "localStartedAt",
        "management_doc_checksum": "managementDocChecksum",
        "management_doc_version": "managementDocVersion",
        "mermaid_diagram": "mermaidDiagram",
        "openapi_diff_base_source_blob_digest": "openapiDiffBaseSourceBlobDigest",
        "openapi_diff_base_source_namespace_name": "openapiDiffBaseSourceNamespaceName",
        "openapi_diff_base_source_revision_digest": "openapiDiffBaseSourceRevisionDigest",
        "openapi_diff_breaking_changes_count": "openapiDiffBreakingChangesCount",
        "openapi_diff_bump_type": "openapiDiffBumpType",
        "openapi_diff_report_digest": "openapiDiffReportDigest",
        "publish_package_name": "publishPackageName",
        "publish_package_registry_name": "publishPackageRegistryName",
        "publish_package_url": "publishPackageUrl",
        "publish_package_version": "publishPackageVersion",
        "raw_command": "rawCommand",
        "repo_label": "repoLabel",
        "source_blob_digest": "sourceBlobDigest",
        "source_namespace_name": "sourceNamespaceName",
        "source_revision_digest": "sourceRevisionDigest",
        "speakeasy_api_key_name": "speakeasyApiKeyName",
        "speakeasy_version": "speakeasyVersion",
        "test_report_raw": "testReportRaw",
        "workflow_lock_post_raw": "workflowLockPostRaw",
        "workflow_lock_pre_raw": "workflowLockPreRaw",
        "workflow_post_raw": "workflowPostRaw",
        "workflow_pre_raw": "workflowPreRaw",
        "workspace_id": "workspaceId",
    });
});
/** @internal */
exports.CliEvent$outboundSchema = z.object({
    commitHead: z.string().optional(),
    continuousIntegrationEnvironment: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    durationMs: z.number().int().optional(),
    error: z.string().optional(),
    executionId: z.string(),
    generateBumpType: exports.GenerateBumpType$outboundSchema.optional(),
    generateConfigPostChecksum: z.string().optional(),
    generateConfigPostRaw: z.string().optional(),
    generateConfigPostVersion: z.string().optional(),
    generateConfigPreChecksum: z.string().optional(),
    generateConfigPreRaw: z.string().optional(),
    generateConfigPreVersion: z.string().optional(),
    generateEligibleFeatures: z.string().optional(),
    generateGenLockId: z.string().optional(),
    generateGenLockPostFeatures: z.string().optional(),
    generateGenLockPreBlobDigest: z.string().optional(),
    generateGenLockPreDocChecksum: z.string().optional(),
    generateGenLockPreDocVersion: z.string().optional(),
    generateGenLockPreFeatures: z.string().optional(),
    generateGenLockPreNamespaceName: z.string().optional(),
    generateGenLockPreRevisionDigest: z.string().optional(),
    generateGenLockPreVersion: z.string().optional(),
    generateNumberOfOperationsIgnored: z.number().int().optional(),
    generateNumberOfOperationsUsed: z.number().int().optional(),
    generateNumberOfTerraformResources: z.number().int().optional(),
    generateOutputTests: z.boolean().optional(),
    generatePublished: z.boolean().optional(),
    generateRepoUrl: z.string().optional(),
    generateTarget: z.string().optional(),
    generateTargetName: z.string().optional(),
    generateTargetVersion: z.string().optional(),
    generateVersion: z.string().optional(),
    ghActionOrganization: z.string().optional(),
    ghActionRef: z.string().optional(),
    ghActionRepository: z.string().optional(),
    ghActionRunLink: z.string().optional(),
    ghActionVersion: z.string().optional(),
    ghChangesCommitted: z.boolean().optional(),
    ghPullRequest: z.string().optional(),
    gitRelativeCwd: z.string().optional(),
    gitRemoteDefaultOwner: z.string().optional(),
    gitRemoteDefaultRepo: z.string().optional(),
    gitUserEmail: z.string().optional(),
    gitUserName: z.string().optional(),
    hostname: z.string().optional(),
    id: z.string(),
    interactionType: interactiontype_js_1.InteractionType$outboundSchema,
    lastStep: z.string().optional(),
    lintReportDigest: z.string().optional(),
    lintReportErrorCount: z.number().int().optional(),
    lintReportInfoCount: z.number().int().optional(),
    lintReportWarningCount: z.number().int().optional(),
    localCompletedAt: z.date().transform(v => v.toISOString()).optional(),
    localStartedAt: z.date().transform(v => v.toISOString()),
    managementDocChecksum: z.string().optional(),
    managementDocVersion: z.string().optional(),
    mermaidDiagram: z.string().optional(),
    openapiDiffBaseSourceBlobDigest: z.string().optional(),
    openapiDiffBaseSourceNamespaceName: z.string().optional(),
    openapiDiffBaseSourceRevisionDigest: z.string().optional(),
    openapiDiffBreakingChangesCount: z.number().int().optional(),
    openapiDiffBumpType: exports.OpenapiDiffBumpType$outboundSchema.optional(),
    openapiDiffReportDigest: z.string().optional(),
    publishPackageName: z.string().optional(),
    publishPackageRegistryName: z.string().optional(),
    publishPackageUrl: z.string().optional(),
    publishPackageVersion: z.string().optional(),
    rawCommand: z.string().optional(),
    repoLabel: z.string().optional(),
    sourceBlobDigest: z.string().optional(),
    sourceNamespaceName: z.string().optional(),
    sourceRevisionDigest: z.string().optional(),
    speakeasyApiKeyName: z.string(),
    speakeasyVersion: z.string(),
    success: z.boolean(),
    testReportRaw: z.string().optional(),
    workflowLockPostRaw: z.string().optional(),
    workflowLockPreRaw: z.string().optional(),
    workflowPostRaw: z.string().optional(),
    workflowPreRaw: z.string().optional(),
    workspaceId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        commitHead: "commit_head",
        continuousIntegrationEnvironment: "continuous_integration_environment",
        createdAt: "created_at",
        durationMs: "duration_ms",
        executionId: "execution_id",
        generateBumpType: "generate_bump_type",
        generateConfigPostChecksum: "generate_config_post_checksum",
        generateConfigPostRaw: "generate_config_post_raw",
        generateConfigPostVersion: "generate_config_post_version",
        generateConfigPreChecksum: "generate_config_pre_checksum",
        generateConfigPreRaw: "generate_config_pre_raw",
        generateConfigPreVersion: "generate_config_pre_version",
        generateEligibleFeatures: "generate_eligible_features",
        generateGenLockId: "generate_gen_lock_id",
        generateGenLockPostFeatures: "generate_gen_lock_post_features",
        generateGenLockPreBlobDigest: "generate_gen_lock_pre_blob_digest",
        generateGenLockPreDocChecksum: "generate_gen_lock_pre_doc_checksum",
        generateGenLockPreDocVersion: "generate_gen_lock_pre_doc_version",
        generateGenLockPreFeatures: "generate_gen_lock_pre_features",
        generateGenLockPreNamespaceName: "generate_gen_lock_pre_namespace_name",
        generateGenLockPreRevisionDigest: "generate_gen_lock_pre_revision_digest",
        generateGenLockPreVersion: "generate_gen_lock_pre_version",
        generateNumberOfOperationsIgnored: "generate_number_of_operations_ignored",
        generateNumberOfOperationsUsed: "generate_number_of_operations_used",
        generateNumberOfTerraformResources: "generate_number_of_terraform_resources",
        generateOutputTests: "generate_output_tests",
        generatePublished: "generate_published",
        generateRepoUrl: "generate_repo_url",
        generateTarget: "generate_target",
        generateTargetName: "generate_target_name",
        generateTargetVersion: "generate_target_version",
        generateVersion: "generate_version",
        ghActionOrganization: "gh_action_organization",
        ghActionRef: "gh_action_ref",
        ghActionRepository: "gh_action_repository",
        ghActionRunLink: "gh_action_run_link",
        ghActionVersion: "gh_action_version",
        ghChangesCommitted: "gh_changes_committed",
        ghPullRequest: "gh_pull_request",
        gitRelativeCwd: "git_relative_cwd",
        gitRemoteDefaultOwner: "git_remote_default_owner",
        gitRemoteDefaultRepo: "git_remote_default_repo",
        gitUserEmail: "git_user_email",
        gitUserName: "git_user_name",
        interactionType: "interaction_type",
        lastStep: "last_step",
        lintReportDigest: "lint_report_digest",
        lintReportErrorCount: "lint_report_error_count",
        lintReportInfoCount: "lint_report_info_count",
        lintReportWarningCount: "lint_report_warning_count",
        localCompletedAt: "local_completed_at",
        localStartedAt: "local_started_at",
        managementDocChecksum: "management_doc_checksum",
        managementDocVersion: "management_doc_version",
        mermaidDiagram: "mermaid_diagram",
        openapiDiffBaseSourceBlobDigest: "openapi_diff_base_source_blob_digest",
        openapiDiffBaseSourceNamespaceName: "openapi_diff_base_source_namespace_name",
        openapiDiffBaseSourceRevisionDigest: "openapi_diff_base_source_revision_digest",
        openapiDiffBreakingChangesCount: "openapi_diff_breaking_changes_count",
        openapiDiffBumpType: "openapi_diff_bump_type",
        openapiDiffReportDigest: "openapi_diff_report_digest",
        publishPackageName: "publish_package_name",
        publishPackageRegistryName: "publish_package_registry_name",
        publishPackageUrl: "publish_package_url",
        publishPackageVersion: "publish_package_version",
        rawCommand: "raw_command",
        repoLabel: "repo_label",
        sourceBlobDigest: "source_blob_digest",
        sourceNamespaceName: "source_namespace_name",
        sourceRevisionDigest: "source_revision_digest",
        speakeasyApiKeyName: "speakeasy_api_key_name",
        speakeasyVersion: "speakeasy_version",
        testReportRaw: "test_report_raw",
        workflowLockPostRaw: "workflow_lock_post_raw",
        workflowLockPreRaw: "workflow_lock_pre_raw",
        workflowPostRaw: "workflow_post_raw",
        workflowPreRaw: "workflow_pre_raw",
        workspaceId: "workspace_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CliEvent$;
(function (CliEvent$) {
    /** @deprecated use `CliEvent$inboundSchema` instead. */
    CliEvent$.inboundSchema = exports.CliEvent$inboundSchema;
    /** @deprecated use `CliEvent$outboundSchema` instead. */
    CliEvent$.outboundSchema = exports.CliEvent$outboundSchema;
})(CliEvent$ || (exports.CliEvent$ = CliEvent$ = {}));
function cliEventToJSON(cliEvent) {
    return JSON.stringify(exports.CliEvent$outboundSchema.parse(cliEvent));
}
function cliEventFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CliEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CliEvent' from JSON`);
}
//# sourceMappingURL=clievent.js.map