import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Diagnostic, Diagnostic$Outbound } from "./diagnostic.js";
export declare const SuggestionType: {
    readonly MethodNames: "method-names";
    readonly DiagnosticsOnly: "diagnostics-only";
};
export type SuggestionType = ClosedEnum<typeof SuggestionType>;
export type SuggestOptsOld = {
    diagnostics?: Array<Diagnostic> | undefined;
    suggestionType: SuggestionType;
};
/** @internal */
export declare const SuggestionType$inboundSchema: z.ZodNativeEnum<typeof SuggestionType>;
/** @internal */
export declare const SuggestionType$outboundSchema: z.ZodNativeEnum<typeof SuggestionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SuggestionType$ {
    /** @deprecated use `SuggestionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly MethodNames: "method-names";
        readonly DiagnosticsOnly: "diagnostics-only";
    }>;
    /** @deprecated use `SuggestionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly MethodNames: "method-names";
        readonly DiagnosticsOnly: "diagnostics-only";
    }>;
}
/** @internal */
export declare const SuggestOptsOld$inboundSchema: z.ZodType<SuggestOptsOld, z.ZodTypeDef, unknown>;
/** @internal */
export type SuggestOptsOld$Outbound = {
    diagnostics?: Array<Diagnostic$Outbound> | undefined;
    suggestion_type: string;
};
/** @internal */
export declare const SuggestOptsOld$outboundSchema: z.ZodType<SuggestOptsOld$Outbound, z.ZodTypeDef, SuggestOptsOld>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SuggestOptsOld$ {
    /** @deprecated use `SuggestOptsOld$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SuggestOptsOld, z.ZodTypeDef, unknown>;
    /** @deprecated use `SuggestOptsOld$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SuggestOptsOld$Outbound, z.ZodTypeDef, SuggestOptsOld>;
    /** @deprecated use `SuggestOptsOld$Outbound` instead. */
    type Outbound = SuggestOptsOld$Outbound;
}
export declare function suggestOptsOldToJSON(suggestOptsOld: SuggestOptsOld): string;
export declare function suggestOptsOldFromJSON(jsonString: string): SafeParseResult<SuggestOptsOld, SDKValidationError>;
//# sourceMappingURL=suggestoptsold.d.ts.map