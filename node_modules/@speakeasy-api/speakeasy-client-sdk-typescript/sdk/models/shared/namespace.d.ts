import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { RemoteSourceSubscriptionSettings, RemoteSourceSubscriptionSettings$Outbound } from "./remotesourcesubscriptionsettings.js";
import { RevisionContentsMetadata, RevisionContentsMetadata$Outbound } from "./revisioncontentsmetadata.js";
export type CompositeSpecMetadata = {
    /**
     * The subscription ID for the remote source subscription, if applicable. This indicates that the namespace is created by a remote source and thus is composite.
     */
    subscriptionId: string;
    subscriptionSettings: RemoteSourceSubscriptionSettings;
};
/**
 * A namespace contains many revisions.
 */
export type Namespace = {
    archivedAt?: Date | undefined;
    compositeSpecMetadata?: CompositeSpecMetadata | undefined;
    createdAt: Date;
    /**
     * {organization_slug}/{workspace_slug}/{namespace_name}
     */
    id: string;
    latestRevisionMetadata?: RevisionContentsMetadata | undefined;
    /**
     * A human-readable name for the namespace.
     */
    name: string;
    /**
     * Indicates whether the namespace is publicly accessible
     */
    public?: boolean | undefined;
    updatedAt: Date;
};
/** @internal */
export declare const CompositeSpecMetadata$inboundSchema: z.ZodType<CompositeSpecMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CompositeSpecMetadata$Outbound = {
    subscription_id: string;
    subscription_settings: RemoteSourceSubscriptionSettings$Outbound;
};
/** @internal */
export declare const CompositeSpecMetadata$outboundSchema: z.ZodType<CompositeSpecMetadata$Outbound, z.ZodTypeDef, CompositeSpecMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CompositeSpecMetadata$ {
    /** @deprecated use `CompositeSpecMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CompositeSpecMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CompositeSpecMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CompositeSpecMetadata$Outbound, z.ZodTypeDef, CompositeSpecMetadata>;
    /** @deprecated use `CompositeSpecMetadata$Outbound` instead. */
    type Outbound = CompositeSpecMetadata$Outbound;
}
export declare function compositeSpecMetadataToJSON(compositeSpecMetadata: CompositeSpecMetadata): string;
export declare function compositeSpecMetadataFromJSON(jsonString: string): SafeParseResult<CompositeSpecMetadata, SDKValidationError>;
/** @internal */
export declare const Namespace$inboundSchema: z.ZodType<Namespace, z.ZodTypeDef, unknown>;
/** @internal */
export type Namespace$Outbound = {
    archived_at?: string | undefined;
    composite_spec_metadata?: CompositeSpecMetadata$Outbound | undefined;
    created_at: string;
    id: string;
    latest_revision_metadata?: RevisionContentsMetadata$Outbound | undefined;
    name: string;
    public?: boolean | undefined;
    updated_at: string;
};
/** @internal */
export declare const Namespace$outboundSchema: z.ZodType<Namespace$Outbound, z.ZodTypeDef, Namespace>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Namespace$ {
    /** @deprecated use `Namespace$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Namespace, z.ZodTypeDef, unknown>;
    /** @deprecated use `Namespace$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Namespace$Outbound, z.ZodTypeDef, Namespace>;
    /** @deprecated use `Namespace$Outbound` instead. */
    type Outbound = Namespace$Outbound;
}
export declare function namespaceToJSON(namespace: Namespace): string;
export declare function namespaceFromJSON(jsonString: string): SafeParseResult<Namespace, SDKValidationError>;
//# sourceMappingURL=namespace.d.ts.map