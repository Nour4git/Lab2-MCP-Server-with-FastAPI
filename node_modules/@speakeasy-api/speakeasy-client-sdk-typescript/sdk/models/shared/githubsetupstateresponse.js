"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubSetupStateResponse$ = exports.GithubSetupStateResponse$outboundSchema = exports.GithubSetupStateResponse$inboundSchema = exports.Secrets$ = exports.Secrets$outboundSchema = exports.Secrets$inboundSchema = exports.Actions$ = exports.Actions$outboundSchema = exports.Actions$inboundSchema = void 0;
exports.actionsToJSON = actionsToJSON;
exports.actionsFromJSON = actionsFromJSON;
exports.secretsToJSON = secretsToJSON;
exports.secretsFromJSON = secretsFromJSON;
exports.githubSetupStateResponseToJSON = githubSetupStateResponseToJSON;
exports.githubSetupStateResponseFromJSON = githubSetupStateResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.Actions$inboundSchema = z.object({
    generation_action_configured: z.boolean(),
    publish_action_configured: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "generation_action_configured": "generationActionConfigured",
        "publish_action_configured": "publishActionConfigured",
    });
});
/** @internal */
exports.Actions$outboundSchema = z.object({
    generationActionConfigured: z.boolean(),
    publishActionConfigured: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        generationActionConfigured: "generation_action_configured",
        publishActionConfigured: "publish_action_configured",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Actions$;
(function (Actions$) {
    /** @deprecated use `Actions$inboundSchema` instead. */
    Actions$.inboundSchema = exports.Actions$inboundSchema;
    /** @deprecated use `Actions$outboundSchema` instead. */
    Actions$.outboundSchema = exports.Actions$outboundSchema;
})(Actions$ || (exports.Actions$ = Actions$ = {}));
function actionsToJSON(actions) {
    return JSON.stringify(exports.Actions$outboundSchema.parse(actions));
}
function actionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Actions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Actions' from JSON`);
}
/** @internal */
exports.Secrets$inboundSchema = z.object({
    api_key_configured: z.boolean(),
    publishing_secrets_configured: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "api_key_configured": "apiKeyConfigured",
        "publishing_secrets_configured": "publishingSecretsConfigured",
    });
});
/** @internal */
exports.Secrets$outboundSchema = z.object({
    apiKeyConfigured: z.boolean(),
    publishingSecretsConfigured: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        apiKeyConfigured: "api_key_configured",
        publishingSecretsConfigured: "publishing_secrets_configured",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Secrets$;
(function (Secrets$) {
    /** @deprecated use `Secrets$inboundSchema` instead. */
    Secrets$.inboundSchema = exports.Secrets$inboundSchema;
    /** @deprecated use `Secrets$outboundSchema` instead. */
    Secrets$.outboundSchema = exports.Secrets$outboundSchema;
})(Secrets$ || (exports.Secrets$ = Secrets$ = {}));
function secretsToJSON(secrets) {
    return JSON.stringify(exports.Secrets$outboundSchema.parse(secrets));
}
function secretsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Secrets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Secrets' from JSON`);
}
/** @internal */
exports.GithubSetupStateResponse$inboundSchema = z.object({
    actions: z.lazy(() => exports.Actions$inboundSchema),
    app_installed: z.boolean(),
    secrets: z.lazy(() => exports.Secrets$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "app_installed": "appInstalled",
    });
});
/** @internal */
exports.GithubSetupStateResponse$outboundSchema = z.object({
    actions: z.lazy(() => exports.Actions$outboundSchema),
    appInstalled: z.boolean(),
    secrets: z.lazy(() => exports.Secrets$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        appInstalled: "app_installed",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GithubSetupStateResponse$;
(function (GithubSetupStateResponse$) {
    /** @deprecated use `GithubSetupStateResponse$inboundSchema` instead. */
    GithubSetupStateResponse$.inboundSchema = exports.GithubSetupStateResponse$inboundSchema;
    /** @deprecated use `GithubSetupStateResponse$outboundSchema` instead. */
    GithubSetupStateResponse$.outboundSchema = exports.GithubSetupStateResponse$outboundSchema;
})(GithubSetupStateResponse$ || (exports.GithubSetupStateResponse$ = GithubSetupStateResponse$ = {}));
function githubSetupStateResponseToJSON(githubSetupStateResponse) {
    return JSON.stringify(exports.GithubSetupStateResponse$outboundSchema.parse(githubSetupStateResponse));
}
function githubSetupStateResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GithubSetupStateResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GithubSetupStateResponse' from JSON`);
}
//# sourceMappingURL=githubsetupstateresponse.js.map