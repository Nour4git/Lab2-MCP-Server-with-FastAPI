"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetSDK$ = exports.TargetSDK$outboundSchema = exports.TargetSDK$inboundSchema = void 0;
exports.targetSDKToJSON = targetSDKToJSON;
exports.targetSDKFromJSON = targetSDKFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const interactiontype_js_1 = require("./interactiontype.js");
/** @internal */
exports.TargetSDK$inboundSchema = z.object({
    commit_head: z.string().optional(),
    continuous_integration_environment: z.string().optional(),
    error: z.string().optional(),
    generate_config_post_version: z.string().optional(),
    generate_eligible_features: z.string().optional(),
    generate_gen_lock_id: z.string(),
    generate_gen_lock_pre_features: z.string().optional(),
    generate_gen_lock_pre_version: z.string().optional(),
    generate_number_of_operations_ignored: z.number().int().optional(),
    generate_number_of_operations_used: z.number().int().optional(),
    generate_number_of_terraform_resources: z.number().int().optional(),
    generate_published: z.boolean().optional(),
    generate_target: z.string(),
    generate_target_name: z.string().optional(),
    generate_target_version: z.string().optional(),
    gh_action_organization: z.string().optional(),
    gh_action_ref: z.string().optional(),
    gh_action_repository: z.string().optional(),
    gh_action_run_link: z.string().optional(),
    gh_action_version: z.string().optional(),
    git_relative_cwd: z.string().optional(),
    git_remote_default_owner: z.string().optional(),
    git_remote_default_repo: z.string().optional(),
    git_user_email: z.string().optional(),
    git_user_name: z.string().optional(),
    hostname: z.string().optional(),
    id: z.string(),
    last_event_created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    last_event_id: z.string(),
    last_event_interaction_type: interactiontype_js_1.InteractionType$inboundSchema,
    last_publish_created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    last_publish_gh_action_run_link: z.string().optional(),
    publish_package_name: z.string().optional(),
    publish_package_registry_name: z.string().optional(),
    publish_package_url: z.string().optional(),
    publish_package_version: z.string().optional(),
    repo_label: z.string().optional(),
    source_blob_digest: z.string().optional(),
    source_namespace_name: z.string().optional(),
    source_revision_digest: z.string().optional(),
    success: z.boolean().optional(),
    workflow_lock_post_raw: z.string().optional(),
    workflow_lock_pre_raw: z.string().optional(),
    workflow_post_raw: z.string().optional(),
    workflow_pre_raw: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "commit_head": "commitHead",
        "continuous_integration_environment": "continuousIntegrationEnvironment",
        "generate_config_post_version": "generateConfigPostVersion",
        "generate_eligible_features": "generateEligibleFeatures",
        "generate_gen_lock_id": "generateGenLockId",
        "generate_gen_lock_pre_features": "generateGenLockPreFeatures",
        "generate_gen_lock_pre_version": "generateGenLockPreVersion",
        "generate_number_of_operations_ignored": "generateNumberOfOperationsIgnored",
        "generate_number_of_operations_used": "generateNumberOfOperationsUsed",
        "generate_number_of_terraform_resources": "generateNumberOfTerraformResources",
        "generate_published": "generatePublished",
        "generate_target": "generateTarget",
        "generate_target_name": "generateTargetName",
        "generate_target_version": "generateTargetVersion",
        "gh_action_organization": "ghActionOrganization",
        "gh_action_ref": "ghActionRef",
        "gh_action_repository": "ghActionRepository",
        "gh_action_run_link": "ghActionRunLink",
        "gh_action_version": "ghActionVersion",
        "git_relative_cwd": "gitRelativeCwd",
        "git_remote_default_owner": "gitRemoteDefaultOwner",
        "git_remote_default_repo": "gitRemoteDefaultRepo",
        "git_user_email": "gitUserEmail",
        "git_user_name": "gitUserName",
        "last_event_created_at": "lastEventCreatedAt",
        "last_event_id": "lastEventId",
        "last_event_interaction_type": "lastEventInteractionType",
        "last_publish_created_at": "lastPublishCreatedAt",
        "last_publish_gh_action_run_link": "lastPublishGhActionRunLink",
        "publish_package_name": "publishPackageName",
        "publish_package_registry_name": "publishPackageRegistryName",
        "publish_package_url": "publishPackageUrl",
        "publish_package_version": "publishPackageVersion",
        "repo_label": "repoLabel",
        "source_blob_digest": "sourceBlobDigest",
        "source_namespace_name": "sourceNamespaceName",
        "source_revision_digest": "sourceRevisionDigest",
        "workflow_lock_post_raw": "workflowLockPostRaw",
        "workflow_lock_pre_raw": "workflowLockPreRaw",
        "workflow_post_raw": "workflowPostRaw",
        "workflow_pre_raw": "workflowPreRaw",
    });
});
/** @internal */
exports.TargetSDK$outboundSchema = z.object({
    commitHead: z.string().optional(),
    continuousIntegrationEnvironment: z.string().optional(),
    error: z.string().optional(),
    generateConfigPostVersion: z.string().optional(),
    generateEligibleFeatures: z.string().optional(),
    generateGenLockId: z.string(),
    generateGenLockPreFeatures: z.string().optional(),
    generateGenLockPreVersion: z.string().optional(),
    generateNumberOfOperationsIgnored: z.number().int().optional(),
    generateNumberOfOperationsUsed: z.number().int().optional(),
    generateNumberOfTerraformResources: z.number().int().optional(),
    generatePublished: z.boolean().optional(),
    generateTarget: z.string(),
    generateTargetName: z.string().optional(),
    generateTargetVersion: z.string().optional(),
    ghActionOrganization: z.string().optional(),
    ghActionRef: z.string().optional(),
    ghActionRepository: z.string().optional(),
    ghActionRunLink: z.string().optional(),
    ghActionVersion: z.string().optional(),
    gitRelativeCwd: z.string().optional(),
    gitRemoteDefaultOwner: z.string().optional(),
    gitRemoteDefaultRepo: z.string().optional(),
    gitUserEmail: z.string().optional(),
    gitUserName: z.string().optional(),
    hostname: z.string().optional(),
    id: z.string(),
    lastEventCreatedAt: z.date().transform(v => v.toISOString()),
    lastEventId: z.string(),
    lastEventInteractionType: interactiontype_js_1.InteractionType$outboundSchema,
    lastPublishCreatedAt: z.date().transform(v => v.toISOString()).optional(),
    lastPublishGhActionRunLink: z.string().optional(),
    publishPackageName: z.string().optional(),
    publishPackageRegistryName: z.string().optional(),
    publishPackageUrl: z.string().optional(),
    publishPackageVersion: z.string().optional(),
    repoLabel: z.string().optional(),
    sourceBlobDigest: z.string().optional(),
    sourceNamespaceName: z.string().optional(),
    sourceRevisionDigest: z.string().optional(),
    success: z.boolean().optional(),
    workflowLockPostRaw: z.string().optional(),
    workflowLockPreRaw: z.string().optional(),
    workflowPostRaw: z.string().optional(),
    workflowPreRaw: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        commitHead: "commit_head",
        continuousIntegrationEnvironment: "continuous_integration_environment",
        generateConfigPostVersion: "generate_config_post_version",
        generateEligibleFeatures: "generate_eligible_features",
        generateGenLockId: "generate_gen_lock_id",
        generateGenLockPreFeatures: "generate_gen_lock_pre_features",
        generateGenLockPreVersion: "generate_gen_lock_pre_version",
        generateNumberOfOperationsIgnored: "generate_number_of_operations_ignored",
        generateNumberOfOperationsUsed: "generate_number_of_operations_used",
        generateNumberOfTerraformResources: "generate_number_of_terraform_resources",
        generatePublished: "generate_published",
        generateTarget: "generate_target",
        generateTargetName: "generate_target_name",
        generateTargetVersion: "generate_target_version",
        ghActionOrganization: "gh_action_organization",
        ghActionRef: "gh_action_ref",
        ghActionRepository: "gh_action_repository",
        ghActionRunLink: "gh_action_run_link",
        ghActionVersion: "gh_action_version",
        gitRelativeCwd: "git_relative_cwd",
        gitRemoteDefaultOwner: "git_remote_default_owner",
        gitRemoteDefaultRepo: "git_remote_default_repo",
        gitUserEmail: "git_user_email",
        gitUserName: "git_user_name",
        lastEventCreatedAt: "last_event_created_at",
        lastEventId: "last_event_id",
        lastEventInteractionType: "last_event_interaction_type",
        lastPublishCreatedAt: "last_publish_created_at",
        lastPublishGhActionRunLink: "last_publish_gh_action_run_link",
        publishPackageName: "publish_package_name",
        publishPackageRegistryName: "publish_package_registry_name",
        publishPackageUrl: "publish_package_url",
        publishPackageVersion: "publish_package_version",
        repoLabel: "repo_label",
        sourceBlobDigest: "source_blob_digest",
        sourceNamespaceName: "source_namespace_name",
        sourceRevisionDigest: "source_revision_digest",
        workflowLockPostRaw: "workflow_lock_post_raw",
        workflowLockPreRaw: "workflow_lock_pre_raw",
        workflowPostRaw: "workflow_post_raw",
        workflowPreRaw: "workflow_pre_raw",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TargetSDK$;
(function (TargetSDK$) {
    /** @deprecated use `TargetSDK$inboundSchema` instead. */
    TargetSDK$.inboundSchema = exports.TargetSDK$inboundSchema;
    /** @deprecated use `TargetSDK$outboundSchema` instead. */
    TargetSDK$.outboundSchema = exports.TargetSDK$outboundSchema;
})(TargetSDK$ || (exports.TargetSDK$ = TargetSDK$ = {}));
function targetSDKToJSON(targetSDK) {
    return JSON.stringify(exports.TargetSDK$outboundSchema.parse(targetSDK));
}
function targetSDKFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TargetSDK$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TargetSDK' from JSON`);
}
//# sourceMappingURL=targetsdk.js.map