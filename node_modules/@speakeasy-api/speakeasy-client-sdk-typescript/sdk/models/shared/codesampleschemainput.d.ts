import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type SchemaFile = {
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
    fileName: string;
};
export type CodeSampleSchemaInput = {
    /**
     * The language to generate code samples for
     */
    language: string;
    /**
     * A list of operations IDs to generate code samples for
     */
    operationIds?: Array<string> | undefined;
    /**
     * The name of the package
     */
    packageName?: string | undefined;
    /**
     * The OpenAPI file to be uploaded
     */
    schemaFile: SchemaFile | Blob;
    /**
     * The SDK class name
     */
    sdkClassName?: string | undefined;
};
/** @internal */
export declare const SchemaFile$inboundSchema: z.ZodType<SchemaFile, z.ZodTypeDef, unknown>;
/** @internal */
export type SchemaFile$Outbound = {
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
    fileName: string;
};
/** @internal */
export declare const SchemaFile$outboundSchema: z.ZodType<SchemaFile$Outbound, z.ZodTypeDef, SchemaFile>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SchemaFile$ {
    /** @deprecated use `SchemaFile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SchemaFile, z.ZodTypeDef, unknown>;
    /** @deprecated use `SchemaFile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SchemaFile$Outbound, z.ZodTypeDef, SchemaFile>;
    /** @deprecated use `SchemaFile$Outbound` instead. */
    type Outbound = SchemaFile$Outbound;
}
export declare function schemaFileToJSON(schemaFile: SchemaFile): string;
export declare function schemaFileFromJSON(jsonString: string): SafeParseResult<SchemaFile, SDKValidationError>;
/** @internal */
export declare const CodeSampleSchemaInput$inboundSchema: z.ZodType<CodeSampleSchemaInput, z.ZodTypeDef, unknown>;
/** @internal */
export type CodeSampleSchemaInput$Outbound = {
    language: string;
    operation_ids?: Array<string> | undefined;
    package_name?: string | undefined;
    schema_file: SchemaFile$Outbound | Blob;
    sdk_class_name?: string | undefined;
};
/** @internal */
export declare const CodeSampleSchemaInput$outboundSchema: z.ZodType<CodeSampleSchemaInput$Outbound, z.ZodTypeDef, CodeSampleSchemaInput>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CodeSampleSchemaInput$ {
    /** @deprecated use `CodeSampleSchemaInput$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CodeSampleSchemaInput, z.ZodTypeDef, unknown>;
    /** @deprecated use `CodeSampleSchemaInput$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CodeSampleSchemaInput$Outbound, z.ZodTypeDef, CodeSampleSchemaInput>;
    /** @deprecated use `CodeSampleSchemaInput$Outbound` instead. */
    type Outbound = CodeSampleSchemaInput$Outbound;
}
export declare function codeSampleSchemaInputToJSON(codeSampleSchemaInput: CodeSampleSchemaInput): string;
export declare function codeSampleSchemaInputFromJSON(jsonString: string): SafeParseResult<CodeSampleSchemaInput, SDKValidationError>;
//# sourceMappingURL=codesampleschemainput.d.ts.map