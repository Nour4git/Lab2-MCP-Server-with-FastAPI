import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * SSO metadata for a workspace
 */
export type SSOMetadata = {
    ssoActivated: boolean;
    ssoDomains: Array<string>;
};
/** @internal */
export declare const SSOMetadata$inboundSchema: z.ZodType<SSOMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type SSOMetadata$Outbound = {
    sso_activated: boolean;
    sso_domains: Array<string>;
};
/** @internal */
export declare const SSOMetadata$outboundSchema: z.ZodType<SSOMetadata$Outbound, z.ZodTypeDef, SSOMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SSOMetadata$ {
    /** @deprecated use `SSOMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SSOMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `SSOMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SSOMetadata$Outbound, z.ZodTypeDef, SSOMetadata>;
    /** @deprecated use `SSOMetadata$Outbound` instead. */
    type Outbound = SSOMetadata$Outbound;
}
export declare function ssoMetadataToJSON(ssoMetadata: SSOMetadata): string;
export declare function ssoMetadataFromJSON(jsonString: string): SafeParseResult<SSOMetadata, SDKValidationError>;
//# sourceMappingURL=ssometadata.d.ts.map