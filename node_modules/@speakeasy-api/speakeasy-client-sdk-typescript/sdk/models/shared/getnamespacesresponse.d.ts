import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Namespace, Namespace$Outbound } from "./namespace.js";
export type GetNamespacesResponse = {
    items: Array<Namespace>;
};
/** @internal */
export declare const GetNamespacesResponse$inboundSchema: z.ZodType<GetNamespacesResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetNamespacesResponse$Outbound = {
    items: Array<Namespace$Outbound>;
};
/** @internal */
export declare const GetNamespacesResponse$outboundSchema: z.ZodType<GetNamespacesResponse$Outbound, z.ZodTypeDef, GetNamespacesResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetNamespacesResponse$ {
    /** @deprecated use `GetNamespacesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetNamespacesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetNamespacesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetNamespacesResponse$Outbound, z.ZodTypeDef, GetNamespacesResponse>;
    /** @deprecated use `GetNamespacesResponse$Outbound` instead. */
    type Outbound = GetNamespacesResponse$Outbound;
}
export declare function getNamespacesResponseToJSON(getNamespacesResponse: GetNamespacesResponse): string;
export declare function getNamespacesResponseFromJSON(jsonString: string): SafeParseResult<GetNamespacesResponse, SDKValidationError>;
//# sourceMappingURL=getnamespacesresponse.d.ts.map