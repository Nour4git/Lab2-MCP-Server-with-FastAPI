import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const Type: {
    readonly Linting: "linting";
    readonly Changes: "changes";
};
export type Type = ClosedEnum<typeof Type>;
export type Report = {
    type?: Type | undefined;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Linting: "linting";
        readonly Changes: "changes";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Linting: "linting";
        readonly Changes: "changes";
    }>;
}
/** @internal */
export declare const Report$inboundSchema: z.ZodType<Report, z.ZodTypeDef, unknown>;
/** @internal */
export type Report$Outbound = {
    type?: string | undefined;
};
/** @internal */
export declare const Report$outboundSchema: z.ZodType<Report$Outbound, z.ZodTypeDef, Report>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Report$ {
    /** @deprecated use `Report$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Report, z.ZodTypeDef, unknown>;
    /** @deprecated use `Report$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Report$Outbound, z.ZodTypeDef, Report>;
    /** @deprecated use `Report$Outbound` instead. */
    type Outbound = Report$Outbound;
}
export declare function reportToJSON(report: Report): string;
export declare function reportFromJSON(jsonString: string): SafeParseResult<Report, SDKValidationError>;
//# sourceMappingURL=report.d.ts.map