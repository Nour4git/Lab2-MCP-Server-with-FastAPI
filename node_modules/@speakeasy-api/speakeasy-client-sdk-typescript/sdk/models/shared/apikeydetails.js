"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyDetails$ = exports.ApiKeyDetails$outboundSchema = exports.ApiKeyDetails$inboundSchema = void 0;
exports.apiKeyDetailsToJSON = apiKeyDetailsToJSON;
exports.apiKeyDetailsFromJSON = apiKeyDetailsFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const accounttype_js_1 = require("./accounttype.js");
const billingaddon_js_1 = require("./billingaddon.js");
/** @internal */
exports.ApiKeyDetails$inboundSchema = z.object({
    account_type_v2: accounttype_js_1.AccountType$inboundSchema,
    billing_add_ons: z.array(billingaddon_js_1.BillingAddOn$inboundSchema),
    enabled_features: z.array(z.string()),
    feature_flags: z.array(z.string()).optional(),
    generation_access_unlimited: z.boolean().optional(),
    org_slug: z.string(),
    telemetry_disabled: z.boolean(),
    workspace_created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    workspace_id: z.string(),
    workspace_slug: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_type_v2": "accountTypeV2",
        "billing_add_ons": "billingAddOns",
        "enabled_features": "enabledFeatures",
        "feature_flags": "featureFlags",
        "generation_access_unlimited": "generationAccessUnlimited",
        "org_slug": "orgSlug",
        "telemetry_disabled": "telemetryDisabled",
        "workspace_created_at": "workspaceCreatedAt",
        "workspace_id": "workspaceId",
        "workspace_slug": "workspaceSlug",
    });
});
/** @internal */
exports.ApiKeyDetails$outboundSchema = z.object({
    accountTypeV2: accounttype_js_1.AccountType$outboundSchema,
    billingAddOns: z.array(billingaddon_js_1.BillingAddOn$outboundSchema),
    enabledFeatures: z.array(z.string()),
    featureFlags: z.array(z.string()).optional(),
    generationAccessUnlimited: z.boolean().optional(),
    orgSlug: z.string(),
    telemetryDisabled: z.boolean(),
    workspaceCreatedAt: z.date().transform(v => v.toISOString()),
    workspaceId: z.string(),
    workspaceSlug: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountTypeV2: "account_type_v2",
        billingAddOns: "billing_add_ons",
        enabledFeatures: "enabled_features",
        featureFlags: "feature_flags",
        generationAccessUnlimited: "generation_access_unlimited",
        orgSlug: "org_slug",
        telemetryDisabled: "telemetry_disabled",
        workspaceCreatedAt: "workspace_created_at",
        workspaceId: "workspace_id",
        workspaceSlug: "workspace_slug",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ApiKeyDetails$;
(function (ApiKeyDetails$) {
    /** @deprecated use `ApiKeyDetails$inboundSchema` instead. */
    ApiKeyDetails$.inboundSchema = exports.ApiKeyDetails$inboundSchema;
    /** @deprecated use `ApiKeyDetails$outboundSchema` instead. */
    ApiKeyDetails$.outboundSchema = exports.ApiKeyDetails$outboundSchema;
})(ApiKeyDetails$ || (exports.ApiKeyDetails$ = ApiKeyDetails$ = {}));
function apiKeyDetailsToJSON(apiKeyDetails) {
    return JSON.stringify(exports.ApiKeyDetails$outboundSchema.parse(apiKeyDetails));
}
function apiKeyDetailsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ApiKeyDetails$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ApiKeyDetails' from JSON`);
}
//# sourceMappingURL=apikeydetails.js.map