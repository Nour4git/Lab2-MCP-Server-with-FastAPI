import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Request body of tags to add to a revision
 */
export type AddTags = {
    /**
     * revision digest to add tags too sha256:...
     */
    revisionDigest: string;
    /**
     * string tags to add to the revision
     */
    tags: Array<string>;
};
/** @internal */
export declare const AddTags$inboundSchema: z.ZodType<AddTags, z.ZodTypeDef, unknown>;
/** @internal */
export type AddTags$Outbound = {
    revision_digest: string;
    tags: Array<string>;
};
/** @internal */
export declare const AddTags$outboundSchema: z.ZodType<AddTags$Outbound, z.ZodTypeDef, AddTags>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AddTags$ {
    /** @deprecated use `AddTags$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddTags, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddTags$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddTags$Outbound, z.ZodTypeDef, AddTags>;
    /** @deprecated use `AddTags$Outbound` instead. */
    type Outbound = AddTags$Outbound;
}
export declare function addTagsToJSON(addTags: AddTags): string;
export declare function addTagsFromJSON(jsonString: string): SafeParseResult<AddTags, SDKValidationError>;
//# sourceMappingURL=addtags.d.ts.map