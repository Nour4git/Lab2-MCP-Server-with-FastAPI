import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AccountType } from "./accounttype.js";
/**
 * A speakeasy organization
 */
export type Organization = {
    accountType: AccountType;
    createdAt: Date;
    freeTrialExpiry?: Date | null | undefined;
    id: string;
    internal?: boolean | undefined;
    name: string;
    slug: string;
    ssoActivated: boolean;
    ssoConnectionId?: string | null | undefined;
    telemetryDisabled: boolean;
    updatedAt: Date;
};
/** @internal */
export declare const Organization$inboundSchema: z.ZodType<Organization, z.ZodTypeDef, unknown>;
/** @internal */
export type Organization$Outbound = {
    account_type: string;
    created_at: string;
    free_trial_expiry?: string | null | undefined;
    id: string;
    internal?: boolean | undefined;
    name: string;
    slug: string;
    sso_activated: boolean;
    sso_connection_id?: string | null | undefined;
    telemetry_disabled: boolean;
    updated_at: string;
};
/** @internal */
export declare const Organization$outboundSchema: z.ZodType<Organization$Outbound, z.ZodTypeDef, Organization>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Organization$ {
    /** @deprecated use `Organization$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Organization, z.ZodTypeDef, unknown>;
    /** @deprecated use `Organization$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Organization$Outbound, z.ZodTypeDef, Organization>;
    /** @deprecated use `Organization$Outbound` instead. */
    type Outbound = Organization$Outbound;
}
export declare function organizationToJSON(organization: Organization): string;
export declare function organizationFromJSON(jsonString: string): SafeParseResult<Organization, SDKValidationError>;
//# sourceMappingURL=organization.d.ts.map