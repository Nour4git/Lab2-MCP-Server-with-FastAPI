import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { RemoteDocument, RemoteDocument$Outbound } from "./remotedocument.js";
/**
 * Remote source configuration
 */
export type RemoteSource = {
    inputs: Array<RemoteDocument>;
    /**
     * A document hosted in the registry
     */
    output: RemoteDocument;
    overlays?: Array<RemoteDocument> | undefined;
};
/** @internal */
export declare const RemoteSource$inboundSchema: z.ZodType<RemoteSource, z.ZodTypeDef, unknown>;
/** @internal */
export type RemoteSource$Outbound = {
    inputs: Array<RemoteDocument$Outbound>;
    output: RemoteDocument$Outbound;
    overlays?: Array<RemoteDocument$Outbound> | undefined;
};
/** @internal */
export declare const RemoteSource$outboundSchema: z.ZodType<RemoteSource$Outbound, z.ZodTypeDef, RemoteSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemoteSource$ {
    /** @deprecated use `RemoteSource$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemoteSource, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemoteSource$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemoteSource$Outbound, z.ZodTypeDef, RemoteSource>;
    /** @deprecated use `RemoteSource$Outbound` instead. */
    type Outbound = RemoteSource$Outbound;
}
export declare function remoteSourceToJSON(remoteSource: RemoteSource): string;
export declare function remoteSourceFromJSON(jsonString: string): SafeParseResult<RemoteSource, SDKValidationError>;
//# sourceMappingURL=remotesource.d.ts.map