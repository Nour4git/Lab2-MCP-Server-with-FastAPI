import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AccountType } from "./accounttype.js";
import { FeatureFlag, FeatureFlag$Outbound } from "./featureflag.js";
export type Claims = {};
export type AccessTokenUser = {
    admin?: boolean | undefined;
    createdAt?: Date | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    emailVerified?: boolean | undefined;
    id?: string | undefined;
};
export type Workspaces = {
    accountType?: AccountType | undefined;
    id?: string | undefined;
    name?: string | undefined;
    updatedAt?: Date | undefined;
};
/**
 * An AccessToken is a token that can be used to authenticate with the Speakeasy API.
 */
export type AccessToken = {
    accessToken: string;
    claims: Claims;
    featureFlags?: Array<FeatureFlag> | undefined;
    user: AccessTokenUser;
    workspaces?: Array<Workspaces> | undefined;
};
/** @internal */
export declare const Claims$inboundSchema: z.ZodType<Claims, z.ZodTypeDef, unknown>;
/** @internal */
export type Claims$Outbound = {};
/** @internal */
export declare const Claims$outboundSchema: z.ZodType<Claims$Outbound, z.ZodTypeDef, Claims>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Claims$ {
    /** @deprecated use `Claims$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Claims, z.ZodTypeDef, unknown>;
    /** @deprecated use `Claims$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Claims$Outbound, z.ZodTypeDef, Claims>;
    /** @deprecated use `Claims$Outbound` instead. */
    type Outbound = Claims$Outbound;
}
export declare function claimsToJSON(claims: Claims): string;
export declare function claimsFromJSON(jsonString: string): SafeParseResult<Claims, SDKValidationError>;
/** @internal */
export declare const AccessTokenUser$inboundSchema: z.ZodType<AccessTokenUser, z.ZodTypeDef, unknown>;
/** @internal */
export type AccessTokenUser$Outbound = {
    admin?: boolean | undefined;
    created_at?: string | undefined;
    display_name?: string | undefined;
    email?: string | undefined;
    email_verified?: boolean | undefined;
    id?: string | undefined;
};
/** @internal */
export declare const AccessTokenUser$outboundSchema: z.ZodType<AccessTokenUser$Outbound, z.ZodTypeDef, AccessTokenUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AccessTokenUser$ {
    /** @deprecated use `AccessTokenUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AccessTokenUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `AccessTokenUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AccessTokenUser$Outbound, z.ZodTypeDef, AccessTokenUser>;
    /** @deprecated use `AccessTokenUser$Outbound` instead. */
    type Outbound = AccessTokenUser$Outbound;
}
export declare function accessTokenUserToJSON(accessTokenUser: AccessTokenUser): string;
export declare function accessTokenUserFromJSON(jsonString: string): SafeParseResult<AccessTokenUser, SDKValidationError>;
/** @internal */
export declare const Workspaces$inboundSchema: z.ZodType<Workspaces, z.ZodTypeDef, unknown>;
/** @internal */
export type Workspaces$Outbound = {
    account_type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    updated_at?: string | undefined;
};
/** @internal */
export declare const Workspaces$outboundSchema: z.ZodType<Workspaces$Outbound, z.ZodTypeDef, Workspaces>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Workspaces$ {
    /** @deprecated use `Workspaces$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Workspaces, z.ZodTypeDef, unknown>;
    /** @deprecated use `Workspaces$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Workspaces$Outbound, z.ZodTypeDef, Workspaces>;
    /** @deprecated use `Workspaces$Outbound` instead. */
    type Outbound = Workspaces$Outbound;
}
export declare function workspacesToJSON(workspaces: Workspaces): string;
export declare function workspacesFromJSON(jsonString: string): SafeParseResult<Workspaces, SDKValidationError>;
/** @internal */
export declare const AccessToken$inboundSchema: z.ZodType<AccessToken, z.ZodTypeDef, unknown>;
/** @internal */
export type AccessToken$Outbound = {
    access_token: string;
    claims: Claims$Outbound;
    feature_flags?: Array<FeatureFlag$Outbound> | undefined;
    user: AccessTokenUser$Outbound;
    workspaces?: Array<Workspaces$Outbound> | undefined;
};
/** @internal */
export declare const AccessToken$outboundSchema: z.ZodType<AccessToken$Outbound, z.ZodTypeDef, AccessToken>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AccessToken$ {
    /** @deprecated use `AccessToken$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AccessToken, z.ZodTypeDef, unknown>;
    /** @deprecated use `AccessToken$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AccessToken$Outbound, z.ZodTypeDef, AccessToken>;
    /** @deprecated use `AccessToken$Outbound` instead. */
    type Outbound = AccessToken$Outbound;
}
export declare function accessTokenToJSON(accessToken: AccessToken): string;
export declare function accessTokenFromJSON(jsonString: string): SafeParseResult<AccessToken, SDKValidationError>;
//# sourceMappingURL=accesstoken.d.ts.map