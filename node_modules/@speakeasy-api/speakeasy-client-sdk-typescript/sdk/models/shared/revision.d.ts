import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { RevisionContentsMetadata, RevisionContentsMetadata$Outbound } from "./revisioncontentsmetadata.js";
export type Revision = {
    contentsMetadata?: RevisionContentsMetadata | undefined;
    createdAt: Date;
    digest: string;
    /**
     * Format {namespace_id}/{revision_digest}
     */
    id: string;
    namespaceName: string;
    tags: Array<string>;
    updatedAt: Date;
};
/** @internal */
export declare const Revision$inboundSchema: z.ZodType<Revision, z.ZodTypeDef, unknown>;
/** @internal */
export type Revision$Outbound = {
    contents_metadata?: RevisionContentsMetadata$Outbound | undefined;
    created_at: string;
    digest: string;
    id: string;
    namespace_name: string;
    tags: Array<string>;
    updated_at: string;
};
/** @internal */
export declare const Revision$outboundSchema: z.ZodType<Revision$Outbound, z.ZodTypeDef, Revision>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Revision$ {
    /** @deprecated use `Revision$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Revision, z.ZodTypeDef, unknown>;
    /** @deprecated use `Revision$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Revision$Outbound, z.ZodTypeDef, Revision>;
    /** @deprecated use `Revision$Outbound` instead. */
    type Outbound = Revision$Outbound;
}
export declare function revisionToJSON(revision: Revision): string;
export declare function revisionFromJSON(jsonString: string): SafeParseResult<Revision, SDKValidationError>;
//# sourceMappingURL=revision.d.ts.map