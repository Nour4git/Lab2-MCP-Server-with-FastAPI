import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Tag, Tag$Outbound } from "./tag.js";
export type GetTagsResponse = {
    items: Array<Tag>;
};
/** @internal */
export declare const GetTagsResponse$inboundSchema: z.ZodType<GetTagsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetTagsResponse$Outbound = {
    items: Array<Tag$Outbound>;
};
/** @internal */
export declare const GetTagsResponse$outboundSchema: z.ZodType<GetTagsResponse$Outbound, z.ZodTypeDef, GetTagsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetTagsResponse$ {
    /** @deprecated use `GetTagsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetTagsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetTagsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetTagsResponse$Outbound, z.ZodTypeDef, GetTagsResponse>;
    /** @deprecated use `GetTagsResponse$Outbound` instead. */
    type Outbound = GetTagsResponse$Outbound;
}
export declare function getTagsResponseToJSON(getTagsResponse: GetTagsResponse): string;
export declare function getTagsResponseFromJSON(jsonString: string): SafeParseResult<GetTagsResponse, SDKValidationError>;
//# sourceMappingURL=gettagsresponse.d.ts.map