import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A speakeasy workspace
 */
export type Workspace = {
    createdAt: Date;
    id: string;
    inactive?: boolean | undefined;
    name: string;
    organizationId: string;
    slug: string;
    /**
     * Deprecated. Use organization.telemetry_disabled instead.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    telemetryDisabled?: boolean | undefined;
    updatedAt: Date;
    verified: boolean;
};
/** @internal */
export declare const Workspace$inboundSchema: z.ZodType<Workspace, z.ZodTypeDef, unknown>;
/** @internal */
export type Workspace$Outbound = {
    created_at: string;
    id: string;
    inactive?: boolean | undefined;
    name: string;
    organization_id: string;
    slug: string;
    telemetry_disabled?: boolean | undefined;
    updated_at: string;
    verified: boolean;
};
/** @internal */
export declare const Workspace$outboundSchema: z.ZodType<Workspace$Outbound, z.ZodTypeDef, Workspace>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Workspace$ {
    /** @deprecated use `Workspace$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Workspace, z.ZodTypeDef, unknown>;
    /** @deprecated use `Workspace$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Workspace$Outbound, z.ZodTypeDef, Workspace>;
    /** @deprecated use `Workspace$Outbound` instead. */
    type Outbound = Workspace$Outbound;
}
export declare function workspaceToJSON(workspace: Workspace): string;
export declare function workspaceFromJSON(jsonString: string): SafeParseResult<Workspace, SDKValidationError>;
//# sourceMappingURL=workspace.d.ts.map