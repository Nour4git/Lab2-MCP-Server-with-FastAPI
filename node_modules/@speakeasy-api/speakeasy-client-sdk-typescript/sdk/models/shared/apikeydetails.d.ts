import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AccountType } from "./accounttype.js";
import { BillingAddOn } from "./billingaddon.js";
export type ApiKeyDetails = {
    accountTypeV2: AccountType;
    billingAddOns: Array<BillingAddOn>;
    enabledFeatures: Array<string>;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    featureFlags?: Array<string> | undefined;
    generationAccessUnlimited?: boolean | undefined;
    orgSlug: string;
    telemetryDisabled: boolean;
    /**
     * Workspace creation timestamp.
     */
    workspaceCreatedAt: Date;
    workspaceId: string;
    workspaceSlug: string;
};
/** @internal */
export declare const ApiKeyDetails$inboundSchema: z.ZodType<ApiKeyDetails, z.ZodTypeDef, unknown>;
/** @internal */
export type ApiKeyDetails$Outbound = {
    account_type_v2: string;
    billing_add_ons: Array<string>;
    enabled_features: Array<string>;
    feature_flags?: Array<string> | undefined;
    generation_access_unlimited?: boolean | undefined;
    org_slug: string;
    telemetry_disabled: boolean;
    workspace_created_at: string;
    workspace_id: string;
    workspace_slug: string;
};
/** @internal */
export declare const ApiKeyDetails$outboundSchema: z.ZodType<ApiKeyDetails$Outbound, z.ZodTypeDef, ApiKeyDetails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ApiKeyDetails$ {
    /** @deprecated use `ApiKeyDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ApiKeyDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `ApiKeyDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ApiKeyDetails$Outbound, z.ZodTypeDef, ApiKeyDetails>;
    /** @deprecated use `ApiKeyDetails$Outbound` instead. */
    type Outbound = ApiKeyDetails$Outbound;
}
export declare function apiKeyDetailsToJSON(apiKeyDetails: ApiKeyDetails): string;
export declare function apiKeyDetailsFromJSON(jsonString: string): SafeParseResult<ApiKeyDetails, SDKValidationError>;
//# sourceMappingURL=apikeydetails.d.ts.map