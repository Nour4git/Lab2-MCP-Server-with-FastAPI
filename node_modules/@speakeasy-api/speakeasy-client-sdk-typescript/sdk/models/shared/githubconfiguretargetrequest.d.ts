import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A request to configure a GitHub target
 */
export type GithubConfigureTargetRequest = {
    /**
     * The GitHub organization name
     */
    org: string;
    /**
     * The GitHub repository name
     */
    repoName: string;
};
/** @internal */
export declare const GithubConfigureTargetRequest$inboundSchema: z.ZodType<GithubConfigureTargetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GithubConfigureTargetRequest$Outbound = {
    org: string;
    repo_name: string;
};
/** @internal */
export declare const GithubConfigureTargetRequest$outboundSchema: z.ZodType<GithubConfigureTargetRequest$Outbound, z.ZodTypeDef, GithubConfigureTargetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GithubConfigureTargetRequest$ {
    /** @deprecated use `GithubConfigureTargetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GithubConfigureTargetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GithubConfigureTargetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GithubConfigureTargetRequest$Outbound, z.ZodTypeDef, GithubConfigureTargetRequest>;
    /** @deprecated use `GithubConfigureTargetRequest$Outbound` instead. */
    type Outbound = GithubConfigureTargetRequest$Outbound;
}
export declare function githubConfigureTargetRequestToJSON(githubConfigureTargetRequest: GithubConfigureTargetRequest): string;
export declare function githubConfigureTargetRequestFromJSON(jsonString: string): SafeParseResult<GithubConfigureTargetRequest, SDKValidationError>;
//# sourceMappingURL=githubconfiguretargetrequest.d.ts.map