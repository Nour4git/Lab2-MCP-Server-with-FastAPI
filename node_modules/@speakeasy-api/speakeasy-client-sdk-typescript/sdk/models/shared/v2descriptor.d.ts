import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Annotations, Annotations$Outbound } from "./annotations.js";
/**
 * V2 descriptor
 */
export type V2Descriptor = {
    /**
     * Annotations
     */
    annotations?: Annotations | undefined;
    /**
     * Digest
     */
    digest?: string | undefined;
    /**
     * Media type
     */
    mediaType?: string | undefined;
    /**
     * Size
     */
    size?: number | undefined;
};
/** @internal */
export declare const V2Descriptor$inboundSchema: z.ZodType<V2Descriptor, z.ZodTypeDef, unknown>;
/** @internal */
export type V2Descriptor$Outbound = {
    annotations?: Annotations$Outbound | undefined;
    digest?: string | undefined;
    mediaType?: string | undefined;
    size?: number | undefined;
};
/** @internal */
export declare const V2Descriptor$outboundSchema: z.ZodType<V2Descriptor$Outbound, z.ZodTypeDef, V2Descriptor>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace V2Descriptor$ {
    /** @deprecated use `V2Descriptor$inboundSchema` instead. */
    const inboundSchema: z.ZodType<V2Descriptor, z.ZodTypeDef, unknown>;
    /** @deprecated use `V2Descriptor$outboundSchema` instead. */
    const outboundSchema: z.ZodType<V2Descriptor$Outbound, z.ZodTypeDef, V2Descriptor>;
    /** @deprecated use `V2Descriptor$Outbound` instead. */
    type Outbound = V2Descriptor$Outbound;
}
export declare function v2DescriptorToJSON(v2Descriptor: V2Descriptor): string;
export declare function v2DescriptorFromJSON(jsonString: string): SafeParseResult<V2Descriptor, SDKValidationError>;
//# sourceMappingURL=v2descriptor.d.ts.map