import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type License = {
    identifier?: string | undefined;
};
export type OASInfo = {
    description: string;
    license: License;
    summary: string;
    title: string;
    version: string;
};
/** @internal */
export declare const License$inboundSchema: z.ZodType<License, z.ZodTypeDef, unknown>;
/** @internal */
export type License$Outbound = {
    identifier?: string | undefined;
};
/** @internal */
export declare const License$outboundSchema: z.ZodType<License$Outbound, z.ZodTypeDef, License>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace License$ {
    /** @deprecated use `License$inboundSchema` instead. */
    const inboundSchema: z.ZodType<License, z.ZodTypeDef, unknown>;
    /** @deprecated use `License$outboundSchema` instead. */
    const outboundSchema: z.ZodType<License$Outbound, z.ZodTypeDef, License>;
    /** @deprecated use `License$Outbound` instead. */
    type Outbound = License$Outbound;
}
export declare function licenseToJSON(license: License): string;
export declare function licenseFromJSON(jsonString: string): SafeParseResult<License, SDKValidationError>;
/** @internal */
export declare const OASInfo$inboundSchema: z.ZodType<OASInfo, z.ZodTypeDef, unknown>;
/** @internal */
export type OASInfo$Outbound = {
    description: string;
    license: License$Outbound;
    summary: string;
    title: string;
    version: string;
};
/** @internal */
export declare const OASInfo$outboundSchema: z.ZodType<OASInfo$Outbound, z.ZodTypeDef, OASInfo>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OASInfo$ {
    /** @deprecated use `OASInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OASInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `OASInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OASInfo$Outbound, z.ZodTypeDef, OASInfo>;
    /** @deprecated use `OASInfo$Outbound` instead. */
    type Outbound = OASInfo$Outbound;
}
export declare function oasInfoToJSON(oasInfo: OASInfo): string;
export declare function oasInfoFromJSON(jsonString: string): SafeParseResult<OASInfo, SDKValidationError>;
//# sourceMappingURL=oasinfo.d.ts.map