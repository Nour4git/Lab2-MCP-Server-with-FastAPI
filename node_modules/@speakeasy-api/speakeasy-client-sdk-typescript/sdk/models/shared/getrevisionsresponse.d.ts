import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Revision, Revision$Outbound } from "./revision.js";
export type GetRevisionsResponse = {
    items: Array<Revision>;
    nextPageToken: string;
};
/** @internal */
export declare const GetRevisionsResponse$inboundSchema: z.ZodType<GetRevisionsResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRevisionsResponse$Outbound = {
    items: Array<Revision$Outbound>;
    next_page_token: string;
};
/** @internal */
export declare const GetRevisionsResponse$outboundSchema: z.ZodType<GetRevisionsResponse$Outbound, z.ZodTypeDef, GetRevisionsResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRevisionsResponse$ {
    /** @deprecated use `GetRevisionsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRevisionsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRevisionsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRevisionsResponse$Outbound, z.ZodTypeDef, GetRevisionsResponse>;
    /** @deprecated use `GetRevisionsResponse$Outbound` instead. */
    type Outbound = GetRevisionsResponse$Outbound;
}
export declare function getRevisionsResponseToJSON(getRevisionsResponse: GetRevisionsResponse): string;
export declare function getRevisionsResponseFromJSON(jsonString: string): SafeParseResult<GetRevisionsResponse, SDKValidationError>;
//# sourceMappingURL=getrevisionsresponse.d.ts.map