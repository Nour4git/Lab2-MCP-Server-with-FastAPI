import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Annotations, Annotations$Outbound } from "./annotations.js";
import { V2Descriptor, V2Descriptor$Outbound } from "./v2descriptor.js";
/**
 * Returns the requested manifest file
 */
export type Manifest = {
    /**
     * Annotations
     */
    annotations?: Annotations | undefined;
    /**
     * Type of artifact
     */
    artifactType?: string | undefined;
    /**
     * List of V2 image layer information
     */
    layers?: Array<V2Descriptor> | undefined;
    /**
     * Media type usually application/vnd.docker.distribution.manifest.v2+json if this is in the accept header
     */
    mediaType?: string | undefined;
    /**
     * Schema version
     */
    schemaVersion?: number | undefined;
};
/** @internal */
export declare const Manifest$inboundSchema: z.ZodType<Manifest, z.ZodTypeDef, unknown>;
/** @internal */
export type Manifest$Outbound = {
    annotations?: Annotations$Outbound | undefined;
    artifactType?: string | undefined;
    layers?: Array<V2Descriptor$Outbound> | undefined;
    mediaType?: string | undefined;
    schemaVersion?: number | undefined;
};
/** @internal */
export declare const Manifest$outboundSchema: z.ZodType<Manifest$Outbound, z.ZodTypeDef, Manifest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Manifest$ {
    /** @deprecated use `Manifest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Manifest, z.ZodTypeDef, unknown>;
    /** @deprecated use `Manifest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Manifest$Outbound, z.ZodTypeDef, Manifest>;
    /** @deprecated use `Manifest$Outbound` instead. */
    type Outbound = Manifest$Outbound;
}
export declare function manifestToJSON(manifest: Manifest): string;
export declare function manifestFromJSON(jsonString: string): SafeParseResult<Manifest, SDKValidationError>;
//# sourceMappingURL=manifest.d.ts.map