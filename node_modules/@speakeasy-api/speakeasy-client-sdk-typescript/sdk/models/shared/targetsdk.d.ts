import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { InteractionType } from "./interactiontype.js";
export type TargetSDK = {
    /**
     * Remote commit ID.
     */
    commitHead?: string | undefined;
    /**
     * Name of the CI environment.
     */
    continuousIntegrationEnvironment?: string | undefined;
    /**
     * Error message if the last event was not successful.
     */
    error?: string | undefined;
    /**
     * Version of the generated target (post generation)
     */
    generateConfigPostVersion?: string | undefined;
    /**
     * Eligible feature set during generation
     */
    generateEligibleFeatures?: string | undefined;
    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    generateGenLockId: string;
    /**
     * Features prior to generation
     */
    generateGenLockPreFeatures?: string | undefined;
    /**
     * Artifact version for the Previous Generation
     */
    generateGenLockPreVersion?: string | undefined;
    /**
     * The number of operations ignored in generation.
     */
    generateNumberOfOperationsIgnored?: number | undefined;
    /**
     * The number of operations used in generation.
     */
    generateNumberOfOperationsUsed?: number | undefined;
    /**
     * The number of terraform resources used in generation.
     */
    generateNumberOfTerraformResources?: number | undefined;
    /**
     * Indicates whether the target was considered published.
     */
    generatePublished?: boolean | undefined;
    /**
     * eg `typescript`, `terraform`, `python`
     */
    generateTarget: string;
    /**
     * The workflow name of the target.
     */
    generateTargetName?: string | undefined;
    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    generateTargetVersion?: string | undefined;
    /**
     * GitHub organization of the action.
     */
    ghActionOrganization?: string | undefined;
    /**
     * GitHub Action ref value.
     */
    ghActionRef?: string | undefined;
    /**
     * GitHub repository of the action.
     */
    ghActionRepository?: string | undefined;
    /**
     * Link to the GitHub action run.
     */
    ghActionRunLink?: string | undefined;
    /**
     * Version of the GitHub action.
     */
    ghActionVersion?: string | undefined;
    /**
     * Current working directory relative to the git root.
     */
    gitRelativeCwd?: string | undefined;
    /**
     * Default owner for git remote.
     */
    gitRemoteDefaultOwner?: string | undefined;
    /**
     * Default repository name for git remote.
     */
    gitRemoteDefaultRepo?: string | undefined;
    /**
     * User email from git configuration.
     */
    gitUserEmail?: string | undefined;
    /**
     * User's name from git configuration. (not GitHub username)
     */
    gitUserName?: string | undefined;
    /**
     * Remote hostname.
     */
    hostname?: string | undefined;
    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    id: string;
    /**
     * Timestamp when the event was created in the database.
     */
    lastEventCreatedAt: Date;
    /**
     * Unique identifier of the last event for the target
     */
    lastEventId: string;
    /**
     * Type of interaction.
     */
    lastEventInteractionType: InteractionType;
    /**
     * Timestamp when the last publishing event was created.
     */
    lastPublishCreatedAt?: Date | undefined;
    /**
     * Link to the GitHub action run for the last publishing event.
     */
    lastPublishGhActionRunLink?: string | undefined;
    /**
     * Name of the published package.
     */
    publishPackageName?: string | undefined;
    /**
     * Name of the registry where the package was published.
     */
    publishPackageRegistryName?: string | undefined;
    /**
     * URL of the published package.
     */
    publishPackageUrl?: string | undefined;
    /**
     * Version of the published package.
     */
    publishPackageVersion?: string | undefined;
    /**
     * Label of the git repository.
     */
    repoLabel?: string | undefined;
    /**
     * The blob digest of the source.
     */
    sourceBlobDigest?: string | undefined;
    /**
     * The namespace name of the source.
     */
    sourceNamespaceName?: string | undefined;
    /**
     * The revision digest of the source.
     */
    sourceRevisionDigest?: string | undefined;
    /**
     * Indicates whether the event was successful.
     */
    success?: boolean | undefined;
    /**
     * Workflow lock file (post execution)
     */
    workflowLockPostRaw?: string | undefined;
    /**
     * Workflow lock file (prior to execution)
     */
    workflowLockPreRaw?: string | undefined;
    /**
     * Workflow file (post execution)
     */
    workflowPostRaw?: string | undefined;
    /**
     * Workflow file (prior to execution)
     */
    workflowPreRaw?: string | undefined;
};
/** @internal */
export declare const TargetSDK$inboundSchema: z.ZodType<TargetSDK, z.ZodTypeDef, unknown>;
/** @internal */
export type TargetSDK$Outbound = {
    commit_head?: string | undefined;
    continuous_integration_environment?: string | undefined;
    error?: string | undefined;
    generate_config_post_version?: string | undefined;
    generate_eligible_features?: string | undefined;
    generate_gen_lock_id: string;
    generate_gen_lock_pre_features?: string | undefined;
    generate_gen_lock_pre_version?: string | undefined;
    generate_number_of_operations_ignored?: number | undefined;
    generate_number_of_operations_used?: number | undefined;
    generate_number_of_terraform_resources?: number | undefined;
    generate_published?: boolean | undefined;
    generate_target: string;
    generate_target_name?: string | undefined;
    generate_target_version?: string | undefined;
    gh_action_organization?: string | undefined;
    gh_action_ref?: string | undefined;
    gh_action_repository?: string | undefined;
    gh_action_run_link?: string | undefined;
    gh_action_version?: string | undefined;
    git_relative_cwd?: string | undefined;
    git_remote_default_owner?: string | undefined;
    git_remote_default_repo?: string | undefined;
    git_user_email?: string | undefined;
    git_user_name?: string | undefined;
    hostname?: string | undefined;
    id: string;
    last_event_created_at: string;
    last_event_id: string;
    last_event_interaction_type: string;
    last_publish_created_at?: string | undefined;
    last_publish_gh_action_run_link?: string | undefined;
    publish_package_name?: string | undefined;
    publish_package_registry_name?: string | undefined;
    publish_package_url?: string | undefined;
    publish_package_version?: string | undefined;
    repo_label?: string | undefined;
    source_blob_digest?: string | undefined;
    source_namespace_name?: string | undefined;
    source_revision_digest?: string | undefined;
    success?: boolean | undefined;
    workflow_lock_post_raw?: string | undefined;
    workflow_lock_pre_raw?: string | undefined;
    workflow_post_raw?: string | undefined;
    workflow_pre_raw?: string | undefined;
};
/** @internal */
export declare const TargetSDK$outboundSchema: z.ZodType<TargetSDK$Outbound, z.ZodTypeDef, TargetSDK>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TargetSDK$ {
    /** @deprecated use `TargetSDK$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TargetSDK, z.ZodTypeDef, unknown>;
    /** @deprecated use `TargetSDK$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TargetSDK$Outbound, z.ZodTypeDef, TargetSDK>;
    /** @deprecated use `TargetSDK$Outbound` instead. */
    type Outbound = TargetSDK$Outbound;
}
export declare function targetSDKToJSON(targetSDK: TargetSDK): string;
export declare function targetSDKFromJSON(jsonString: string): SafeParseResult<TargetSDK, SDKValidationError>;
//# sourceMappingURL=targetsdk.d.ts.map