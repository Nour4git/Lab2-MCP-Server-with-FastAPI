"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessToken$ = exports.AccessToken$outboundSchema = exports.AccessToken$inboundSchema = exports.Workspaces$ = exports.Workspaces$outboundSchema = exports.Workspaces$inboundSchema = exports.AccessTokenUser$ = exports.AccessTokenUser$outboundSchema = exports.AccessTokenUser$inboundSchema = exports.Claims$ = exports.Claims$outboundSchema = exports.Claims$inboundSchema = void 0;
exports.claimsToJSON = claimsToJSON;
exports.claimsFromJSON = claimsFromJSON;
exports.accessTokenUserToJSON = accessTokenUserToJSON;
exports.accessTokenUserFromJSON = accessTokenUserFromJSON;
exports.workspacesToJSON = workspacesToJSON;
exports.workspacesFromJSON = workspacesFromJSON;
exports.accessTokenToJSON = accessTokenToJSON;
exports.accessTokenFromJSON = accessTokenFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const accounttype_js_1 = require("./accounttype.js");
const featureflag_js_1 = require("./featureflag.js");
/** @internal */
exports.Claims$inboundSchema = z
    .object({});
/** @internal */
exports.Claims$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Claims$;
(function (Claims$) {
    /** @deprecated use `Claims$inboundSchema` instead. */
    Claims$.inboundSchema = exports.Claims$inboundSchema;
    /** @deprecated use `Claims$outboundSchema` instead. */
    Claims$.outboundSchema = exports.Claims$outboundSchema;
})(Claims$ || (exports.Claims$ = Claims$ = {}));
function claimsToJSON(claims) {
    return JSON.stringify(exports.Claims$outboundSchema.parse(claims));
}
function claimsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Claims$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Claims' from JSON`);
}
/** @internal */
exports.AccessTokenUser$inboundSchema = z.object({
    admin: z.boolean().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    display_name: z.string().optional(),
    email: z.string().optional(),
    email_verified: z.boolean().optional(),
    id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "display_name": "displayName",
        "email_verified": "emailVerified",
    });
});
/** @internal */
exports.AccessTokenUser$outboundSchema = z.object({
    admin: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    displayName: z.string().optional(),
    email: z.string().optional(),
    emailVerified: z.boolean().optional(),
    id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        displayName: "display_name",
        emailVerified: "email_verified",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccessTokenUser$;
(function (AccessTokenUser$) {
    /** @deprecated use `AccessTokenUser$inboundSchema` instead. */
    AccessTokenUser$.inboundSchema = exports.AccessTokenUser$inboundSchema;
    /** @deprecated use `AccessTokenUser$outboundSchema` instead. */
    AccessTokenUser$.outboundSchema = exports.AccessTokenUser$outboundSchema;
})(AccessTokenUser$ || (exports.AccessTokenUser$ = AccessTokenUser$ = {}));
function accessTokenUserToJSON(accessTokenUser) {
    return JSON.stringify(exports.AccessTokenUser$outboundSchema.parse(accessTokenUser));
}
function accessTokenUserFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AccessTokenUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccessTokenUser' from JSON`);
}
/** @internal */
exports.Workspaces$inboundSchema = z.object({
    account_type: accounttype_js_1.AccountType$inboundSchema.optional(),
    id: z.string().optional(),
    name: z.string().optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_type": "accountType",
        "updated_at": "updatedAt",
    });
});
/** @internal */
exports.Workspaces$outboundSchema = z.object({
    accountType: accounttype_js_1.AccountType$outboundSchema.optional(),
    id: z.string().optional(),
    name: z.string().optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountType: "account_type",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Workspaces$;
(function (Workspaces$) {
    /** @deprecated use `Workspaces$inboundSchema` instead. */
    Workspaces$.inboundSchema = exports.Workspaces$inboundSchema;
    /** @deprecated use `Workspaces$outboundSchema` instead. */
    Workspaces$.outboundSchema = exports.Workspaces$outboundSchema;
})(Workspaces$ || (exports.Workspaces$ = Workspaces$ = {}));
function workspacesToJSON(workspaces) {
    return JSON.stringify(exports.Workspaces$outboundSchema.parse(workspaces));
}
function workspacesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Workspaces$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Workspaces' from JSON`);
}
/** @internal */
exports.AccessToken$inboundSchema = z.object({
    access_token: z.string(),
    claims: z.lazy(() => exports.Claims$inboundSchema),
    feature_flags: z.array(featureflag_js_1.FeatureFlag$inboundSchema).optional(),
    user: z.lazy(() => exports.AccessTokenUser$inboundSchema),
    workspaces: z.array(z.lazy(() => exports.Workspaces$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "access_token": "accessToken",
        "feature_flags": "featureFlags",
    });
});
/** @internal */
exports.AccessToken$outboundSchema = z.object({
    accessToken: z.string(),
    claims: z.lazy(() => exports.Claims$outboundSchema),
    featureFlags: z.array(featureflag_js_1.FeatureFlag$outboundSchema).optional(),
    user: z.lazy(() => exports.AccessTokenUser$outboundSchema),
    workspaces: z.array(z.lazy(() => exports.Workspaces$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accessToken: "access_token",
        featureFlags: "feature_flags",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AccessToken$;
(function (AccessToken$) {
    /** @deprecated use `AccessToken$inboundSchema` instead. */
    AccessToken$.inboundSchema = exports.AccessToken$inboundSchema;
    /** @deprecated use `AccessToken$outboundSchema` instead. */
    AccessToken$.outboundSchema = exports.AccessToken$outboundSchema;
})(AccessToken$ || (exports.AccessToken$ = AccessToken$ = {}));
function accessTokenToJSON(accessToken) {
    return JSON.stringify(exports.AccessToken$outboundSchema.parse(accessToken));
}
function accessTokenFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AccessToken$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AccessToken' from JSON`);
}
//# sourceMappingURL=accesstoken.js.map