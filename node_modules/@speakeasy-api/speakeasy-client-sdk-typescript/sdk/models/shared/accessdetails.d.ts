import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const Level: {
    readonly Allowed: "allowed";
    readonly Warning: "warning";
    readonly Blocked: "blocked";
};
export type Level = ClosedEnum<typeof Level>;
export type AccessDetails = {
    generationAllowed: boolean;
    level?: Level | undefined;
    message: string;
};
/** @internal */
export declare const Level$inboundSchema: z.ZodNativeEnum<typeof Level>;
/** @internal */
export declare const Level$outboundSchema: z.ZodNativeEnum<typeof Level>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Level$ {
    /** @deprecated use `Level$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Allowed: "allowed";
        readonly Warning: "warning";
        readonly Blocked: "blocked";
    }>;
    /** @deprecated use `Level$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Allowed: "allowed";
        readonly Warning: "warning";
        readonly Blocked: "blocked";
    }>;
}
/** @internal */
export declare const AccessDetails$inboundSchema: z.ZodType<AccessDetails, z.ZodTypeDef, unknown>;
/** @internal */
export type AccessDetails$Outbound = {
    generation_allowed: boolean;
    level?: string | undefined;
    message: string;
};
/** @internal */
export declare const AccessDetails$outboundSchema: z.ZodType<AccessDetails$Outbound, z.ZodTypeDef, AccessDetails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AccessDetails$ {
    /** @deprecated use `AccessDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AccessDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `AccessDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AccessDetails$Outbound, z.ZodTypeDef, AccessDetails>;
    /** @deprecated use `AccessDetails$Outbound` instead. */
    type Outbound = AccessDetails$Outbound;
}
export declare function accessDetailsToJSON(accessDetails: AccessDetails): string;
export declare function accessDetailsFromJSON(jsonString: string): SafeParseResult<AccessDetails, SDKValidationError>;
//# sourceMappingURL=accessdetails.d.ts.map