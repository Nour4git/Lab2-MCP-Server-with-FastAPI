import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { WorkflowDocument, WorkflowDocument$Outbound } from "./workflowdocument.js";
/**
 * A response to configure GitHub code samples
 */
export type GithubConfigureCodeSamplesResponse = {
    /**
     * The URL of the code sample overlay registry
     */
    codeSampleOverlayRegistryURL: string;
    /**
     * The ID of the GitHub action that was dispatched
     */
    ghActionID?: string | undefined;
    /**
     * A document referenced by a workflow
     */
    source: WorkflowDocument;
};
/** @internal */
export declare const GithubConfigureCodeSamplesResponse$inboundSchema: z.ZodType<GithubConfigureCodeSamplesResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GithubConfigureCodeSamplesResponse$Outbound = {
    codeSampleOverlayRegistryURL: string;
    ghActionID?: string | undefined;
    source: WorkflowDocument$Outbound;
};
/** @internal */
export declare const GithubConfigureCodeSamplesResponse$outboundSchema: z.ZodType<GithubConfigureCodeSamplesResponse$Outbound, z.ZodTypeDef, GithubConfigureCodeSamplesResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GithubConfigureCodeSamplesResponse$ {
    /** @deprecated use `GithubConfigureCodeSamplesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GithubConfigureCodeSamplesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GithubConfigureCodeSamplesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GithubConfigureCodeSamplesResponse$Outbound, z.ZodTypeDef, GithubConfigureCodeSamplesResponse>;
    /** @deprecated use `GithubConfigureCodeSamplesResponse$Outbound` instead. */
    type Outbound = GithubConfigureCodeSamplesResponse$Outbound;
}
export declare function githubConfigureCodeSamplesResponseToJSON(githubConfigureCodeSamplesResponse: GithubConfigureCodeSamplesResponse): string;
export declare function githubConfigureCodeSamplesResponseFromJSON(jsonString: string): SafeParseResult<GithubConfigureCodeSamplesResponse, SDKValidationError>;
//# sourceMappingURL=githubconfigurecodesamplesresponse.d.ts.map