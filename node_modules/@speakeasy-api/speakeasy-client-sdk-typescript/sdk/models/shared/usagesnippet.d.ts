import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UsageSnippet = {
    /**
     * The code snippet
     */
    code: string;
    /**
     * The language of the snippet
     */
    language: string;
    /**
     * The HTTP method of the operation
     */
    method?: any | undefined;
    /**
     * The operation ID for the snippet
     */
    operationId: string;
    /**
     * The path of the operation
     */
    path: string;
};
/** @internal */
export declare const UsageSnippet$inboundSchema: z.ZodType<UsageSnippet, z.ZodTypeDef, unknown>;
/** @internal */
export type UsageSnippet$Outbound = {
    code: string;
    language: string;
    method?: any | undefined;
    operationId: string;
    path: string;
};
/** @internal */
export declare const UsageSnippet$outboundSchema: z.ZodType<UsageSnippet$Outbound, z.ZodTypeDef, UsageSnippet>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UsageSnippet$ {
    /** @deprecated use `UsageSnippet$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UsageSnippet, z.ZodTypeDef, unknown>;
    /** @deprecated use `UsageSnippet$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UsageSnippet$Outbound, z.ZodTypeDef, UsageSnippet>;
    /** @deprecated use `UsageSnippet$Outbound` instead. */
    type Outbound = UsageSnippet$Outbound;
}
export declare function usageSnippetToJSON(usageSnippet: UsageSnippet): string;
export declare function usageSnippetFromJSON(jsonString: string): SafeParseResult<UsageSnippet, SDKValidationError>;
//# sourceMappingURL=usagesnippet.d.ts.map