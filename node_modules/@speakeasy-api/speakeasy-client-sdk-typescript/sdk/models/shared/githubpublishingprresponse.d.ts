import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * This can only be populated when the github app is installed for a repo
 */
export type PullRequestMetadata = {
    baseBranch?: string | undefined;
    canMerge?: boolean | undefined;
    createdAt?: Date | undefined;
    /**
     * truncated to first 1000 characters
     */
    description?: string | undefined;
    headBranch?: string | undefined;
    /**
     * List of github labels
     */
    labels?: Array<string> | undefined;
    /**
     * List of github handles
     */
    requestedReviewers?: Array<string> | undefined;
    status?: string | undefined;
    title?: string | undefined;
};
/**
 * Open generation PRs pending publishing
 */
export type GithubPublishingPRResponse = {
    pendingVersion?: string | undefined;
    pullRequest?: string | undefined;
    /**
     * This can only be populated when the github app is installed for a repo
     */
    pullRequestMetadata?: PullRequestMetadata | undefined;
};
/** @internal */
export declare const PullRequestMetadata$inboundSchema: z.ZodType<PullRequestMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type PullRequestMetadata$Outbound = {
    base_branch?: string | undefined;
    can_merge?: boolean | undefined;
    created_at?: string | undefined;
    description?: string | undefined;
    head_branch?: string | undefined;
    labels?: Array<string> | undefined;
    requested_reviewers?: Array<string> | undefined;
    status?: string | undefined;
    title?: string | undefined;
};
/** @internal */
export declare const PullRequestMetadata$outboundSchema: z.ZodType<PullRequestMetadata$Outbound, z.ZodTypeDef, PullRequestMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PullRequestMetadata$ {
    /** @deprecated use `PullRequestMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PullRequestMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `PullRequestMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PullRequestMetadata$Outbound, z.ZodTypeDef, PullRequestMetadata>;
    /** @deprecated use `PullRequestMetadata$Outbound` instead. */
    type Outbound = PullRequestMetadata$Outbound;
}
export declare function pullRequestMetadataToJSON(pullRequestMetadata: PullRequestMetadata): string;
export declare function pullRequestMetadataFromJSON(jsonString: string): SafeParseResult<PullRequestMetadata, SDKValidationError>;
/** @internal */
export declare const GithubPublishingPRResponse$inboundSchema: z.ZodType<GithubPublishingPRResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GithubPublishingPRResponse$Outbound = {
    pending_version?: string | undefined;
    pull_request?: string | undefined;
    pull_request_metadata?: PullRequestMetadata$Outbound | undefined;
};
/** @internal */
export declare const GithubPublishingPRResponse$outboundSchema: z.ZodType<GithubPublishingPRResponse$Outbound, z.ZodTypeDef, GithubPublishingPRResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GithubPublishingPRResponse$ {
    /** @deprecated use `GithubPublishingPRResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GithubPublishingPRResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GithubPublishingPRResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GithubPublishingPRResponse$Outbound, z.ZodTypeDef, GithubPublishingPRResponse>;
    /** @deprecated use `GithubPublishingPRResponse$Outbound` instead. */
    type Outbound = GithubPublishingPRResponse$Outbound;
}
export declare function githubPublishingPRResponseToJSON(githubPublishingPRResponse: GithubPublishingPRResponse): string;
export declare function githubPublishingPRResponseFromJSON(jsonString: string): SafeParseResult<GithubPublishingPRResponse, SDKValidationError>;
//# sourceMappingURL=githubpublishingprresponse.d.ts.map