import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type User = {
    /**
     * Indicates whether the user is an admin.
     */
    admin: boolean;
    /**
     * Indicates whether the user has been confirmed.
     */
    confirmed: boolean;
    /**
     * Timestamp of the user's creation.
     */
    createdAt: Date;
    /**
     * Identifier of the default workspace.
     */
    defaultWorkspaceId?: string | null | undefined;
    /**
     * Display name of the user.
     */
    displayName: string;
    /**
     * Email address of the user.
     */
    email: string;
    /**
     * Indicates whether the email address has been verified.
     */
    emailVerified: boolean;
    /**
     * GitHub handle of the user.
     */
    githubHandle?: string | null | undefined;
    /**
     * Indicates whether the user has created an API key. Not always populated
     */
    hasCreatedApiKey?: boolean | undefined;
    /**
     * Unique identifier for the user.
     */
    id: string;
    /**
     * Indicates whether the user is internal.
     */
    internal?: boolean | undefined;
    /**
     * Timestamp of the last login.
     */
    lastLoginAt?: Date | null | undefined;
    /**
     * URL of the user's photo.
     */
    photoUrl?: string | null | undefined;
    /**
     * Hash used for pylon identity verification returned on v1/user.
     */
    pylonIdentityHash?: string | undefined;
    /**
     * Timestamp of the user's last update.
     */
    updatedAt: Date;
    /**
     * Indicates whether the user has been whitelisted.
     */
    whitelisted: boolean;
};
/** @internal */
export declare const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown>;
/** @internal */
export type User$Outbound = {
    admin: boolean;
    confirmed: boolean;
    created_at: string;
    default_workspace_id?: string | null | undefined;
    display_name: string;
    email: string;
    email_verified: boolean;
    github_handle?: string | null | undefined;
    has_created_api_key?: boolean | undefined;
    id: string;
    internal?: boolean | undefined;
    last_login_at?: string | null | undefined;
    photo_url?: string | null | undefined;
    pylon_identity_hash?: string | undefined;
    updated_at: string;
    whitelisted: boolean;
};
/** @internal */
export declare const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace User$ {
    /** @deprecated use `User$inboundSchema` instead. */
    const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown>;
    /** @deprecated use `User$outboundSchema` instead. */
    const outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User>;
    /** @deprecated use `User$Outbound` instead. */
    type Outbound = User$Outbound;
}
export declare function userToJSON(user: User): string;
export declare function userFromJSON(jsonString: string): SafeParseResult<User, SDKValidationError>;
//# sourceMappingURL=user.d.ts.map