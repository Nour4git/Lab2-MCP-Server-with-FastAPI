import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Auth = {
    header: string;
    secret: string;
};
/**
 * A document referenced by a workflow
 */
export type WorkflowDocument = {
    auth?: Auth | undefined;
    location: string;
};
/** @internal */
export declare const Auth$inboundSchema: z.ZodType<Auth, z.ZodTypeDef, unknown>;
/** @internal */
export type Auth$Outbound = {
    header: string;
    secret: string;
};
/** @internal */
export declare const Auth$outboundSchema: z.ZodType<Auth$Outbound, z.ZodTypeDef, Auth>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Auth$ {
    /** @deprecated use `Auth$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Auth, z.ZodTypeDef, unknown>;
    /** @deprecated use `Auth$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Auth$Outbound, z.ZodTypeDef, Auth>;
    /** @deprecated use `Auth$Outbound` instead. */
    type Outbound = Auth$Outbound;
}
export declare function authToJSON(auth: Auth): string;
export declare function authFromJSON(jsonString: string): SafeParseResult<Auth, SDKValidationError>;
/** @internal */
export declare const WorkflowDocument$inboundSchema: z.ZodType<WorkflowDocument, z.ZodTypeDef, unknown>;
/** @internal */
export type WorkflowDocument$Outbound = {
    auth?: Auth$Outbound | undefined;
    location: string;
};
/** @internal */
export declare const WorkflowDocument$outboundSchema: z.ZodType<WorkflowDocument$Outbound, z.ZodTypeDef, WorkflowDocument>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WorkflowDocument$ {
    /** @deprecated use `WorkflowDocument$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WorkflowDocument, z.ZodTypeDef, unknown>;
    /** @deprecated use `WorkflowDocument$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WorkflowDocument$Outbound, z.ZodTypeDef, WorkflowDocument>;
    /** @deprecated use `WorkflowDocument$Outbound` instead. */
    type Outbound = WorkflowDocument$Outbound;
}
export declare function workflowDocumentToJSON(workflowDocument: WorkflowDocument): string;
export declare function workflowDocumentFromJSON(jsonString: string): SafeParseResult<WorkflowDocument, SDKValidationError>;
//# sourceMappingURL=workflowdocument.d.ts.map