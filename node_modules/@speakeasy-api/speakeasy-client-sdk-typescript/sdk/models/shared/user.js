"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User$ = exports.User$outboundSchema = exports.User$inboundSchema = void 0;
exports.userToJSON = userToJSON;
exports.userFromJSON = userFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.User$inboundSchema = z
    .object({
    admin: z.boolean(),
    confirmed: z.boolean(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    default_workspace_id: z.nullable(z.string()).optional(),
    display_name: z.string(),
    email: z.string(),
    email_verified: z.boolean(),
    github_handle: z.nullable(z.string()).optional(),
    has_created_api_key: z.boolean().optional(),
    id: z.string(),
    internal: z.boolean().optional(),
    last_login_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    photo_url: z.nullable(z.string()).optional(),
    pylon_identity_hash: z.string().optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    whitelisted: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "default_workspace_id": "defaultWorkspaceId",
        "display_name": "displayName",
        "email_verified": "emailVerified",
        "github_handle": "githubHandle",
        "has_created_api_key": "hasCreatedApiKey",
        "last_login_at": "lastLoginAt",
        "photo_url": "photoUrl",
        "pylon_identity_hash": "pylonIdentityHash",
        "updated_at": "updatedAt",
    });
});
/** @internal */
exports.User$outboundSchema = z.object({
    admin: z.boolean(),
    confirmed: z.boolean(),
    createdAt: z.date().transform(v => v.toISOString()),
    defaultWorkspaceId: z.nullable(z.string()).optional(),
    displayName: z.string(),
    email: z.string(),
    emailVerified: z.boolean(),
    githubHandle: z.nullable(z.string()).optional(),
    hasCreatedApiKey: z.boolean().optional(),
    id: z.string(),
    internal: z.boolean().optional(),
    lastLoginAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    photoUrl: z.nullable(z.string()).optional(),
    pylonIdentityHash: z.string().optional(),
    updatedAt: z.date().transform(v => v.toISOString()),
    whitelisted: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        defaultWorkspaceId: "default_workspace_id",
        displayName: "display_name",
        emailVerified: "email_verified",
        githubHandle: "github_handle",
        hasCreatedApiKey: "has_created_api_key",
        lastLoginAt: "last_login_at",
        photoUrl: "photo_url",
        pylonIdentityHash: "pylon_identity_hash",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var User$;
(function (User$) {
    /** @deprecated use `User$inboundSchema` instead. */
    User$.inboundSchema = exports.User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    User$.outboundSchema = exports.User$outboundSchema;
})(User$ || (exports.User$ = User$ = {}));
function userToJSON(user) {
    return JSON.stringify(exports.User$outboundSchema.parse(user));
}
function userFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.User$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'User' from JSON`);
}
//# sourceMappingURL=user.js.map