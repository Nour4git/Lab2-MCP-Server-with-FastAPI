import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type OASOperation = {
    description: string;
    groupOverride?: string | undefined;
    method: string;
    methodNameOverride?: string | undefined;
    operationId: string;
    path: string;
    tags: Array<string>;
};
/** @internal */
export declare const OASOperation$inboundSchema: z.ZodType<OASOperation, z.ZodTypeDef, unknown>;
/** @internal */
export type OASOperation$Outbound = {
    description: string;
    group_override?: string | undefined;
    method: string;
    method_name_override?: string | undefined;
    operation_id: string;
    path: string;
    tags: Array<string>;
};
/** @internal */
export declare const OASOperation$outboundSchema: z.ZodType<OASOperation$Outbound, z.ZodTypeDef, OASOperation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OASOperation$ {
    /** @deprecated use `OASOperation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OASOperation, z.ZodTypeDef, unknown>;
    /** @deprecated use `OASOperation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OASOperation$Outbound, z.ZodTypeDef, OASOperation>;
    /** @deprecated use `OASOperation$Outbound` instead. */
    type Outbound = OASOperation$Outbound;
}
export declare function oasOperationToJSON(oasOperation: OASOperation): string;
export declare function oasOperationFromJSON(jsonString: string): SafeParseResult<OASOperation, SDKValidationError>;
//# sourceMappingURL=oasoperation.d.ts.map