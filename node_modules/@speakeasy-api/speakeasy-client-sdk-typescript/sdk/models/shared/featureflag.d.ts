import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { WorkspaceFeatureFlag } from "./workspacefeatureflag.js";
/**
 * A feature flag is a key-value pair that can be used to enable or disable features.
 */
export type FeatureFlag = {
    /**
     * enum value workspace feature flag
     */
    featureFlag: WorkspaceFeatureFlag;
    trialEndsAt?: Date | null | undefined;
};
/** @internal */
export declare const FeatureFlag$inboundSchema: z.ZodType<FeatureFlag, z.ZodTypeDef, unknown>;
/** @internal */
export type FeatureFlag$Outbound = {
    feature_flag: string;
    trial_ends_at?: string | null | undefined;
};
/** @internal */
export declare const FeatureFlag$outboundSchema: z.ZodType<FeatureFlag$Outbound, z.ZodTypeDef, FeatureFlag>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeatureFlag$ {
    /** @deprecated use `FeatureFlag$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeatureFlag, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeatureFlag$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeatureFlag$Outbound, z.ZodTypeDef, FeatureFlag>;
    /** @deprecated use `FeatureFlag$Outbound` instead. */
    type Outbound = FeatureFlag$Outbound;
}
export declare function featureFlagToJSON(featureFlag: FeatureFlag): string;
export declare function featureFlagFromJSON(jsonString: string): SafeParseResult<FeatureFlag, SDKValidationError>;
//# sourceMappingURL=featureflag.d.ts.map