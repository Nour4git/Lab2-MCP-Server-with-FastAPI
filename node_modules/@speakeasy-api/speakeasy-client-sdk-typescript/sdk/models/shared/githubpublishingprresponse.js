"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubPublishingPRResponse$ = exports.GithubPublishingPRResponse$outboundSchema = exports.GithubPublishingPRResponse$inboundSchema = exports.PullRequestMetadata$ = exports.PullRequestMetadata$outboundSchema = exports.PullRequestMetadata$inboundSchema = void 0;
exports.pullRequestMetadataToJSON = pullRequestMetadataToJSON;
exports.pullRequestMetadataFromJSON = pullRequestMetadataFromJSON;
exports.githubPublishingPRResponseToJSON = githubPublishingPRResponseToJSON;
exports.githubPublishingPRResponseFromJSON = githubPublishingPRResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.PullRequestMetadata$inboundSchema = z.object({
    base_branch: z.string().optional(),
    can_merge: z.boolean().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    description: z.string().optional(),
    head_branch: z.string().optional(),
    labels: z.array(z.string()).optional(),
    requested_reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "base_branch": "baseBranch",
        "can_merge": "canMerge",
        "created_at": "createdAt",
        "head_branch": "headBranch",
        "requested_reviewers": "requestedReviewers",
    });
});
/** @internal */
exports.PullRequestMetadata$outboundSchema = z.object({
    baseBranch: z.string().optional(),
    canMerge: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    description: z.string().optional(),
    headBranch: z.string().optional(),
    labels: z.array(z.string()).optional(),
    requestedReviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    title: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        baseBranch: "base_branch",
        canMerge: "can_merge",
        createdAt: "created_at",
        headBranch: "head_branch",
        requestedReviewers: "requested_reviewers",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PullRequestMetadata$;
(function (PullRequestMetadata$) {
    /** @deprecated use `PullRequestMetadata$inboundSchema` instead. */
    PullRequestMetadata$.inboundSchema = exports.PullRequestMetadata$inboundSchema;
    /** @deprecated use `PullRequestMetadata$outboundSchema` instead. */
    PullRequestMetadata$.outboundSchema = exports.PullRequestMetadata$outboundSchema;
})(PullRequestMetadata$ || (exports.PullRequestMetadata$ = PullRequestMetadata$ = {}));
function pullRequestMetadataToJSON(pullRequestMetadata) {
    return JSON.stringify(exports.PullRequestMetadata$outboundSchema.parse(pullRequestMetadata));
}
function pullRequestMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PullRequestMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PullRequestMetadata' from JSON`);
}
/** @internal */
exports.GithubPublishingPRResponse$inboundSchema = z.object({
    pending_version: z.string().optional(),
    pull_request: z.string().optional(),
    pull_request_metadata: z.lazy(() => exports.PullRequestMetadata$inboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "pending_version": "pendingVersion",
        "pull_request": "pullRequest",
        "pull_request_metadata": "pullRequestMetadata",
    });
});
/** @internal */
exports.GithubPublishingPRResponse$outboundSchema = z.object({
    pendingVersion: z.string().optional(),
    pullRequest: z.string().optional(),
    pullRequestMetadata: z.lazy(() => exports.PullRequestMetadata$outboundSchema)
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        pendingVersion: "pending_version",
        pullRequest: "pull_request",
        pullRequestMetadata: "pull_request_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GithubPublishingPRResponse$;
(function (GithubPublishingPRResponse$) {
    /** @deprecated use `GithubPublishingPRResponse$inboundSchema` instead. */
    GithubPublishingPRResponse$.inboundSchema = exports.GithubPublishingPRResponse$inboundSchema;
    /** @deprecated use `GithubPublishingPRResponse$outboundSchema` instead. */
    GithubPublishingPRResponse$.outboundSchema = exports.GithubPublishingPRResponse$outboundSchema;
})(GithubPublishingPRResponse$ || (exports.GithubPublishingPRResponse$ = GithubPublishingPRResponse$ = {}));
function githubPublishingPRResponseToJSON(githubPublishingPRResponse) {
    return JSON.stringify(exports.GithubPublishingPRResponse$outboundSchema.parse(githubPublishingPRResponse));
}
function githubPublishingPRResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GithubPublishingPRResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GithubPublishingPRResponse' from JSON`);
}
//# sourceMappingURL=githubpublishingprresponse.js.map