"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Annotations$ = exports.Annotations$outboundSchema = exports.Annotations$inboundSchema = void 0;
exports.annotationsToJSON = annotationsToJSON;
exports.annotationsFromJSON = annotationsFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.Annotations$inboundSchema = z.object({
    "org.opencontainers.image.authors": z.string().optional(),
    "org.opencontainers.image.created": z.string().optional(),
    "org.opencontainers.image.description": z.string().optional(),
    "org.opencontainers.image.documentation": z.string().optional(),
    "org.opencontainers.image.licenses": z.string().optional(),
    "org.opencontainers.image.ref.name": z.string().optional(),
    "org.opencontainers.image.revision": z.string().optional(),
    "org.opencontainers.image.source": z.string().optional(),
    "org.opencontainers.image.title": z.string().optional(),
    "org.opencontainers.image.url": z.string().optional(),
    "org.opencontainers.image.vendor": z.string().optional(),
    "org.opencontainers.image.version": z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "org.opencontainers.image.authors": "orgOpencontainersImageAuthors",
        "org.opencontainers.image.created": "orgOpencontainersImageCreated",
        "org.opencontainers.image.description": "orgOpencontainersImageDescription",
        "org.opencontainers.image.documentation": "orgOpencontainersImageDocumentation",
        "org.opencontainers.image.licenses": "orgOpencontainersImageLicenses",
        "org.opencontainers.image.ref.name": "orgOpencontainersImageRefName",
        "org.opencontainers.image.revision": "orgOpencontainersImageRevision",
        "org.opencontainers.image.source": "orgOpencontainersImageSource",
        "org.opencontainers.image.title": "orgOpencontainersImageTitle",
        "org.opencontainers.image.url": "orgOpencontainersImageUrl",
        "org.opencontainers.image.vendor": "orgOpencontainersImageVendor",
        "org.opencontainers.image.version": "orgOpencontainersImageVersion",
    });
});
/** @internal */
exports.Annotations$outboundSchema = z.object({
    orgOpencontainersImageAuthors: z.string().optional(),
    orgOpencontainersImageCreated: z.string().optional(),
    orgOpencontainersImageDescription: z.string().optional(),
    orgOpencontainersImageDocumentation: z.string().optional(),
    orgOpencontainersImageLicenses: z.string().optional(),
    orgOpencontainersImageRefName: z.string().optional(),
    orgOpencontainersImageRevision: z.string().optional(),
    orgOpencontainersImageSource: z.string().optional(),
    orgOpencontainersImageTitle: z.string().optional(),
    orgOpencontainersImageUrl: z.string().optional(),
    orgOpencontainersImageVendor: z.string().optional(),
    orgOpencontainersImageVersion: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        orgOpencontainersImageAuthors: "org.opencontainers.image.authors",
        orgOpencontainersImageCreated: "org.opencontainers.image.created",
        orgOpencontainersImageDescription: "org.opencontainers.image.description",
        orgOpencontainersImageDocumentation: "org.opencontainers.image.documentation",
        orgOpencontainersImageLicenses: "org.opencontainers.image.licenses",
        orgOpencontainersImageRefName: "org.opencontainers.image.ref.name",
        orgOpencontainersImageRevision: "org.opencontainers.image.revision",
        orgOpencontainersImageSource: "org.opencontainers.image.source",
        orgOpencontainersImageTitle: "org.opencontainers.image.title",
        orgOpencontainersImageUrl: "org.opencontainers.image.url",
        orgOpencontainersImageVendor: "org.opencontainers.image.vendor",
        orgOpencontainersImageVersion: "org.opencontainers.image.version",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Annotations$;
(function (Annotations$) {
    /** @deprecated use `Annotations$inboundSchema` instead. */
    Annotations$.inboundSchema = exports.Annotations$inboundSchema;
    /** @deprecated use `Annotations$outboundSchema` instead. */
    Annotations$.outboundSchema = exports.Annotations$outboundSchema;
})(Annotations$ || (exports.Annotations$ = Annotations$ = {}));
function annotationsToJSON(annotations) {
    return JSON.stringify(exports.Annotations$outboundSchema.parse(annotations));
}
function annotationsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Annotations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Annotations' from JSON`);
}
//# sourceMappingURL=annotations.js.map