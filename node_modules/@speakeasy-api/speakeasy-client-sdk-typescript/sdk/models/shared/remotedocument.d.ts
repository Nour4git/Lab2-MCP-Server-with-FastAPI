import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A document hosted in the registry
 */
export type RemoteDocument = {
    registryUrl: string;
};
/** @internal */
export declare const RemoteDocument$inboundSchema: z.ZodType<RemoteDocument, z.ZodTypeDef, unknown>;
/** @internal */
export type RemoteDocument$Outbound = {
    registry_url: string;
};
/** @internal */
export declare const RemoteDocument$outboundSchema: z.ZodType<RemoteDocument$Outbound, z.ZodTypeDef, RemoteDocument>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemoteDocument$ {
    /** @deprecated use `RemoteDocument$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemoteDocument, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemoteDocument$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemoteDocument$Outbound, z.ZodTypeDef, RemoteDocument>;
    /** @deprecated use `RemoteDocument$Outbound` instead. */
    type Outbound = RemoteDocument$Outbound;
}
export declare function remoteDocumentToJSON(remoteDocument: RemoteDocument): string;
export declare function remoteDocumentFromJSON(jsonString: string): SafeParseResult<RemoteDocument, SDKValidationError>;
//# sourceMappingURL=remotedocument.d.ts.map