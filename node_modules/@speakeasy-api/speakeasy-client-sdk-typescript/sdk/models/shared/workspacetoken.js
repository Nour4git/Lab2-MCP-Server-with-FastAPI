"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceToken$ = exports.WorkspaceToken$outboundSchema = exports.WorkspaceToken$inboundSchema = void 0;
exports.workspaceTokenToJSON = workspaceTokenToJSON;
exports.workspaceTokenFromJSON = workspaceTokenFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.WorkspaceToken$inboundSchema = z.object({
    alg: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    created_by: z.nullable(z.string()).optional(),
    created_by_name: z.nullable(z.string()).optional(),
    created_by_photo_url: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    id: z.string(),
    key: z.string(),
    last_used: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    name: z.string(),
    workspace_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "created_by": "createdBy",
        "created_by_name": "createdByName",
        "created_by_photo_url": "createdByPhotoUrl",
        "last_used": "lastUsed",
        "workspace_id": "workspaceId",
    });
});
/** @internal */
exports.WorkspaceToken$outboundSchema = z.object({
    alg: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    createdBy: z.nullable(z.string()).optional(),
    createdByName: z.nullable(z.string()).optional(),
    createdByPhotoUrl: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    id: z.string(),
    key: z.string(),
    lastUsed: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    name: z.string(),
    workspaceId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        createdBy: "created_by",
        createdByName: "created_by_name",
        createdByPhotoUrl: "created_by_photo_url",
        lastUsed: "last_used",
        workspaceId: "workspace_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var WorkspaceToken$;
(function (WorkspaceToken$) {
    /** @deprecated use `WorkspaceToken$inboundSchema` instead. */
    WorkspaceToken$.inboundSchema = exports.WorkspaceToken$inboundSchema;
    /** @deprecated use `WorkspaceToken$outboundSchema` instead. */
    WorkspaceToken$.outboundSchema = exports.WorkspaceToken$outboundSchema;
})(WorkspaceToken$ || (exports.WorkspaceToken$ = WorkspaceToken$ = {}));
function workspaceTokenToJSON(workspaceToken) {
    return JSON.stringify(exports.WorkspaceToken$outboundSchema.parse(workspaceToken));
}
function workspaceTokenFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WorkspaceToken$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WorkspaceToken' from JSON`);
}
//# sourceMappingURL=workspacetoken.js.map