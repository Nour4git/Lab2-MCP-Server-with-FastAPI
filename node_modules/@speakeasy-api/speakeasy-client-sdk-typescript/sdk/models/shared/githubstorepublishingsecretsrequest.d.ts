import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A request to store publishing secrets for a github target
 */
export type GithubStorePublishingSecretsRequest = {
    /**
     * The generation lock ID
     */
    generateGenLockId: string;
    /**
     * A map of secrets to store in the GitHub target
     */
    secrets?: {
        [k: string]: string;
    } | undefined;
};
/** @internal */
export declare const GithubStorePublishingSecretsRequest$inboundSchema: z.ZodType<GithubStorePublishingSecretsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GithubStorePublishingSecretsRequest$Outbound = {
    generate_gen_lock_id: string;
    secrets?: {
        [k: string]: string;
    } | undefined;
};
/** @internal */
export declare const GithubStorePublishingSecretsRequest$outboundSchema: z.ZodType<GithubStorePublishingSecretsRequest$Outbound, z.ZodTypeDef, GithubStorePublishingSecretsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GithubStorePublishingSecretsRequest$ {
    /** @deprecated use `GithubStorePublishingSecretsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GithubStorePublishingSecretsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GithubStorePublishingSecretsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GithubStorePublishingSecretsRequest$Outbound, z.ZodTypeDef, GithubStorePublishingSecretsRequest>;
    /** @deprecated use `GithubStorePublishingSecretsRequest$Outbound` instead. */
    type Outbound = GithubStorePublishingSecretsRequest$Outbound;
}
export declare function githubStorePublishingSecretsRequestToJSON(githubStorePublishingSecretsRequest: GithubStorePublishingSecretsRequest): string;
export declare function githubStorePublishingSecretsRequestFromJSON(jsonString: string): SafeParseResult<GithubStorePublishingSecretsRequest, SDKValidationError>;
//# sourceMappingURL=githubstorepublishingsecretsrequest.d.ts.map