import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const TargetResource: {
    readonly Document: "document";
};
export type TargetResource = ClosedEnum<typeof TargetResource>;
/**
 * A token used to publish to a target
 */
export type PublishingToken = {
    createdAt: Date;
    createdBy: string;
    id: string;
    organizationId: string;
    targetId: string;
    targetResource: TargetResource;
    token: string;
    tokenName: string;
    updatedAt?: Date | undefined;
    updatedBy?: string | undefined;
    validUntil: Date;
    workspaceId: string;
};
/** @internal */
export declare const TargetResource$inboundSchema: z.ZodNativeEnum<typeof TargetResource>;
/** @internal */
export declare const TargetResource$outboundSchema: z.ZodNativeEnum<typeof TargetResource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TargetResource$ {
    /** @deprecated use `TargetResource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Document: "document";
    }>;
    /** @deprecated use `TargetResource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Document: "document";
    }>;
}
/** @internal */
export declare const PublishingToken$inboundSchema: z.ZodType<PublishingToken, z.ZodTypeDef, unknown>;
/** @internal */
export type PublishingToken$Outbound = {
    created_at: string;
    created_by: string;
    id: string;
    organization_id: string;
    target_id: string;
    target_resource: string;
    token: string;
    token_name: string;
    updated_at?: string | undefined;
    updated_by?: string | undefined;
    valid_until: string;
    workspace_id: string;
};
/** @internal */
export declare const PublishingToken$outboundSchema: z.ZodType<PublishingToken$Outbound, z.ZodTypeDef, PublishingToken>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PublishingToken$ {
    /** @deprecated use `PublishingToken$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PublishingToken, z.ZodTypeDef, unknown>;
    /** @deprecated use `PublishingToken$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PublishingToken$Outbound, z.ZodTypeDef, PublishingToken>;
    /** @deprecated use `PublishingToken$Outbound` instead. */
    type Outbound = PublishingToken$Outbound;
}
export declare function publishingTokenToJSON(publishingToken: PublishingToken): string;
export declare function publishingTokenFromJSON(jsonString: string): SafeParseResult<PublishingToken, SDKValidationError>;
//# sourceMappingURL=publishingtoken.d.ts.map