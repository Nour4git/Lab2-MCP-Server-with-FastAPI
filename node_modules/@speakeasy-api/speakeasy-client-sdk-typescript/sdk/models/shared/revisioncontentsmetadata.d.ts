import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const RevisionContentsMetadataType: {
    readonly OpenapiBundle: "OPENAPI_BUNDLE";
    readonly OpenapiOverlay: "OPENAPI_OVERLAY";
};
export type RevisionContentsMetadataType = ClosedEnum<typeof RevisionContentsMetadataType>;
export type RevisionContentsMetadata = {
    /**
     * Whether the OAS contains code samples.
     */
    containsCodeSamples: boolean;
    createdAt: Date;
    /**
     * The OAS description
     */
    description: string;
    /**
     * The hash of the contents
     */
    hash: string;
    /**
     * The fully qualified namespace
     */
    namespace: string;
    /**
     * The number of overlay actions in the OAS. Will be 0 if the OAS is not an overlay.
     */
    numOverlayActions: number;
    /**
     * The operation IDs contained in the OAS. Will be empty if the OAS is an overlay.
     */
    operationIds: Array<string>;
    /**
     * The digest of the parent bundle
     */
    revisionDigest: string;
    /**
     * The tags contained in the OAS -- NOT the OCI tags. Will be empty if the OAS is an overlay.
     */
    tags: Array<string>;
    /**
     * The OAS title
     */
    title: string;
    type: RevisionContentsMetadataType;
    /**
     * The OAS version
     */
    version: string;
    /**
     * The workspace ID
     */
    workspaceId: string;
};
/** @internal */
export declare const RevisionContentsMetadataType$inboundSchema: z.ZodNativeEnum<typeof RevisionContentsMetadataType>;
/** @internal */
export declare const RevisionContentsMetadataType$outboundSchema: z.ZodNativeEnum<typeof RevisionContentsMetadataType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RevisionContentsMetadataType$ {
    /** @deprecated use `RevisionContentsMetadataType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly OpenapiBundle: "OPENAPI_BUNDLE";
        readonly OpenapiOverlay: "OPENAPI_OVERLAY";
    }>;
    /** @deprecated use `RevisionContentsMetadataType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly OpenapiBundle: "OPENAPI_BUNDLE";
        readonly OpenapiOverlay: "OPENAPI_OVERLAY";
    }>;
}
/** @internal */
export declare const RevisionContentsMetadata$inboundSchema: z.ZodType<RevisionContentsMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type RevisionContentsMetadata$Outbound = {
    contains_code_samples: boolean;
    created_at: string;
    description: string;
    hash: string;
    namespace: string;
    num_overlay_actions: number;
    operation_ids: Array<string>;
    revision_digest: string;
    tags: Array<string>;
    title: string;
    type: string;
    version: string;
    workspace_id: string;
};
/** @internal */
export declare const RevisionContentsMetadata$outboundSchema: z.ZodType<RevisionContentsMetadata$Outbound, z.ZodTypeDef, RevisionContentsMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RevisionContentsMetadata$ {
    /** @deprecated use `RevisionContentsMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RevisionContentsMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `RevisionContentsMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RevisionContentsMetadata$Outbound, z.ZodTypeDef, RevisionContentsMetadata>;
    /** @deprecated use `RevisionContentsMetadata$Outbound` instead. */
    type Outbound = RevisionContentsMetadata$Outbound;
}
export declare function revisionContentsMetadataToJSON(revisionContentsMetadata: RevisionContentsMetadata): string;
export declare function revisionContentsMetadataFromJSON(jsonString: string): SafeParseResult<RevisionContentsMetadata, SDKValidationError>;
//# sourceMappingURL=revisioncontentsmetadata.d.ts.map