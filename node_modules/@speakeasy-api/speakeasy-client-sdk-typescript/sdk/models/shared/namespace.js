"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace$ = exports.Namespace$outboundSchema = exports.Namespace$inboundSchema = exports.CompositeSpecMetadata$ = exports.CompositeSpecMetadata$outboundSchema = exports.CompositeSpecMetadata$inboundSchema = void 0;
exports.compositeSpecMetadataToJSON = compositeSpecMetadataToJSON;
exports.compositeSpecMetadataFromJSON = compositeSpecMetadataFromJSON;
exports.namespaceToJSON = namespaceToJSON;
exports.namespaceFromJSON = namespaceFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const remotesourcesubscriptionsettings_js_1 = require("./remotesourcesubscriptionsettings.js");
const revisioncontentsmetadata_js_1 = require("./revisioncontentsmetadata.js");
/** @internal */
exports.CompositeSpecMetadata$inboundSchema = z.object({
    subscription_id: z.string(),
    subscription_settings: remotesourcesubscriptionsettings_js_1.RemoteSourceSubscriptionSettings$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "subscription_id": "subscriptionId",
        "subscription_settings": "subscriptionSettings",
    });
});
/** @internal */
exports.CompositeSpecMetadata$outboundSchema = z.object({
    subscriptionId: z.string(),
    subscriptionSettings: remotesourcesubscriptionsettings_js_1.RemoteSourceSubscriptionSettings$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        subscriptionId: "subscription_id",
        subscriptionSettings: "subscription_settings",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CompositeSpecMetadata$;
(function (CompositeSpecMetadata$) {
    /** @deprecated use `CompositeSpecMetadata$inboundSchema` instead. */
    CompositeSpecMetadata$.inboundSchema = exports.CompositeSpecMetadata$inboundSchema;
    /** @deprecated use `CompositeSpecMetadata$outboundSchema` instead. */
    CompositeSpecMetadata$.outboundSchema = exports.CompositeSpecMetadata$outboundSchema;
})(CompositeSpecMetadata$ || (exports.CompositeSpecMetadata$ = CompositeSpecMetadata$ = {}));
function compositeSpecMetadataToJSON(compositeSpecMetadata) {
    return JSON.stringify(exports.CompositeSpecMetadata$outboundSchema.parse(compositeSpecMetadata));
}
function compositeSpecMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompositeSpecMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompositeSpecMetadata' from JSON`);
}
/** @internal */
exports.Namespace$inboundSchema = z.object({
    archived_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    composite_spec_metadata: z.lazy(() => exports.CompositeSpecMetadata$inboundSchema)
        .optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    id: z.string(),
    latest_revision_metadata: revisioncontentsmetadata_js_1.RevisionContentsMetadata$inboundSchema.optional(),
    name: z.string(),
    public: z.boolean().optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "archived_at": "archivedAt",
        "composite_spec_metadata": "compositeSpecMetadata",
        "created_at": "createdAt",
        "latest_revision_metadata": "latestRevisionMetadata",
        "updated_at": "updatedAt",
    });
});
/** @internal */
exports.Namespace$outboundSchema = z.object({
    archivedAt: z.date().transform(v => v.toISOString()).optional(),
    compositeSpecMetadata: z.lazy(() => exports.CompositeSpecMetadata$outboundSchema)
        .optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    id: z.string(),
    latestRevisionMetadata: revisioncontentsmetadata_js_1.RevisionContentsMetadata$outboundSchema.optional(),
    name: z.string(),
    public: z.boolean().optional(),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        archivedAt: "archived_at",
        compositeSpecMetadata: "composite_spec_metadata",
        createdAt: "created_at",
        latestRevisionMetadata: "latest_revision_metadata",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Namespace$;
(function (Namespace$) {
    /** @deprecated use `Namespace$inboundSchema` instead. */
    Namespace$.inboundSchema = exports.Namespace$inboundSchema;
    /** @deprecated use `Namespace$outboundSchema` instead. */
    Namespace$.outboundSchema = exports.Namespace$outboundSchema;
})(Namespace$ || (exports.Namespace$ = Namespace$ = {}));
function namespaceToJSON(namespace) {
    return JSON.stringify(exports.Namespace$outboundSchema.parse(namespace));
}
function namespaceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Namespace$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Namespace' from JSON`);
}
//# sourceMappingURL=namespace.js.map