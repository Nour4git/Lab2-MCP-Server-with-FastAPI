"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevisionContentsMetadata$ = exports.RevisionContentsMetadata$outboundSchema = exports.RevisionContentsMetadata$inboundSchema = exports.RevisionContentsMetadataType$ = exports.RevisionContentsMetadataType$outboundSchema = exports.RevisionContentsMetadataType$inboundSchema = exports.RevisionContentsMetadataType = void 0;
exports.revisionContentsMetadataToJSON = revisionContentsMetadataToJSON;
exports.revisionContentsMetadataFromJSON = revisionContentsMetadataFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
exports.RevisionContentsMetadataType = {
    OpenapiBundle: "OPENAPI_BUNDLE",
    OpenapiOverlay: "OPENAPI_OVERLAY",
};
/** @internal */
exports.RevisionContentsMetadataType$inboundSchema = z.nativeEnum(exports.RevisionContentsMetadataType);
/** @internal */
exports.RevisionContentsMetadataType$outboundSchema = exports.RevisionContentsMetadataType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RevisionContentsMetadataType$;
(function (RevisionContentsMetadataType$) {
    /** @deprecated use `RevisionContentsMetadataType$inboundSchema` instead. */
    RevisionContentsMetadataType$.inboundSchema = exports.RevisionContentsMetadataType$inboundSchema;
    /** @deprecated use `RevisionContentsMetadataType$outboundSchema` instead. */
    RevisionContentsMetadataType$.outboundSchema = exports.RevisionContentsMetadataType$outboundSchema;
})(RevisionContentsMetadataType$ || (exports.RevisionContentsMetadataType$ = RevisionContentsMetadataType$ = {}));
/** @internal */
exports.RevisionContentsMetadata$inboundSchema = z.object({
    contains_code_samples: z.boolean(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    description: z.string(),
    hash: z.string(),
    namespace: z.string(),
    num_overlay_actions: z.number().int(),
    operation_ids: z.array(z.string()),
    revision_digest: z.string(),
    tags: z.array(z.string()),
    title: z.string(),
    type: exports.RevisionContentsMetadataType$inboundSchema,
    version: z.string(),
    workspace_id: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "contains_code_samples": "containsCodeSamples",
        "created_at": "createdAt",
        "num_overlay_actions": "numOverlayActions",
        "operation_ids": "operationIds",
        "revision_digest": "revisionDigest",
        "workspace_id": "workspaceId",
    });
});
/** @internal */
exports.RevisionContentsMetadata$outboundSchema = z.object({
    containsCodeSamples: z.boolean(),
    createdAt: z.date().transform(v => v.toISOString()),
    description: z.string(),
    hash: z.string(),
    namespace: z.string(),
    numOverlayActions: z.number().int(),
    operationIds: z.array(z.string()),
    revisionDigest: z.string(),
    tags: z.array(z.string()),
    title: z.string(),
    type: exports.RevisionContentsMetadataType$outboundSchema,
    version: z.string(),
    workspaceId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        containsCodeSamples: "contains_code_samples",
        createdAt: "created_at",
        numOverlayActions: "num_overlay_actions",
        operationIds: "operation_ids",
        revisionDigest: "revision_digest",
        workspaceId: "workspace_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RevisionContentsMetadata$;
(function (RevisionContentsMetadata$) {
    /** @deprecated use `RevisionContentsMetadata$inboundSchema` instead. */
    RevisionContentsMetadata$.inboundSchema = exports.RevisionContentsMetadata$inboundSchema;
    /** @deprecated use `RevisionContentsMetadata$outboundSchema` instead. */
    RevisionContentsMetadata$.outboundSchema = exports.RevisionContentsMetadata$outboundSchema;
})(RevisionContentsMetadata$ || (exports.RevisionContentsMetadata$ = RevisionContentsMetadata$ = {}));
function revisionContentsMetadataToJSON(revisionContentsMetadata) {
    return JSON.stringify(exports.RevisionContentsMetadata$outboundSchema.parse(revisionContentsMetadata));
}
function revisionContentsMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RevisionContentsMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RevisionContentsMetadata' from JSON`);
}
//# sourceMappingURL=revisioncontentsmetadata.js.map