import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { OrganizationUsage, OrganizationUsage$Outbound } from "./organizationusage.js";
/**
 * A billing summary of organization usage
 */
export type OrganizationUsageResponse = {
    /**
     * List of allowed languages
     */
    allowedLanguages: Array<string>;
    /**
     * Expiry date of the free trial, will be null if no trial
     */
    freeTrialExpiry?: Date | undefined;
    /**
     * Total number of allowed languages, -1 if unlimited
     */
    totalAllowedLanguages: number;
    usage: Array<OrganizationUsage>;
};
/** @internal */
export declare const OrganizationUsageResponse$inboundSchema: z.ZodType<OrganizationUsageResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type OrganizationUsageResponse$Outbound = {
    allowed_languages: Array<string>;
    free_trial_expiry?: string | undefined;
    total_allowed_languages: number;
    usage: Array<OrganizationUsage$Outbound>;
};
/** @internal */
export declare const OrganizationUsageResponse$outboundSchema: z.ZodType<OrganizationUsageResponse$Outbound, z.ZodTypeDef, OrganizationUsageResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrganizationUsageResponse$ {
    /** @deprecated use `OrganizationUsageResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrganizationUsageResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrganizationUsageResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrganizationUsageResponse$Outbound, z.ZodTypeDef, OrganizationUsageResponse>;
    /** @deprecated use `OrganizationUsageResponse$Outbound` instead. */
    type Outbound = OrganizationUsageResponse$Outbound;
}
export declare function organizationUsageResponseToJSON(organizationUsageResponse: OrganizationUsageResponse): string;
export declare function organizationUsageResponseFromJSON(jsonString: string): SafeParseResult<OrganizationUsageResponse, SDKValidationError>;
//# sourceMappingURL=organizationusageresponse.d.ts.map