import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * response to a getting the latest action run on a GitHub request
 */
export type GithubGetActionResponse = {
    /**
     * The status of the latest action run if available
     */
    runStatus?: string | undefined;
    /**
     * The URL for latest action run if available
     */
    runUrl?: string | undefined;
};
/** @internal */
export declare const GithubGetActionResponse$inboundSchema: z.ZodType<GithubGetActionResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GithubGetActionResponse$Outbound = {
    run_status?: string | undefined;
    run_url?: string | undefined;
};
/** @internal */
export declare const GithubGetActionResponse$outboundSchema: z.ZodType<GithubGetActionResponse$Outbound, z.ZodTypeDef, GithubGetActionResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GithubGetActionResponse$ {
    /** @deprecated use `GithubGetActionResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GithubGetActionResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GithubGetActionResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GithubGetActionResponse$Outbound, z.ZodTypeDef, GithubGetActionResponse>;
    /** @deprecated use `GithubGetActionResponse$Outbound` instead. */
    type Outbound = GithubGetActionResponse$Outbound;
}
export declare function githubGetActionResponseToJSON(githubGetActionResponse: GithubGetActionResponse): string;
export declare function githubGetActionResponseFromJSON(jsonString: string): SafeParseResult<GithubGetActionResponse, SDKValidationError>;
//# sourceMappingURL=githubgetactionresponse.d.ts.map