import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Tag = {
    /**
     * Format {namespace_id}/{tag}
     */
    id: string;
    /**
     * Human readable tag name
     */
    name: string;
    namespaceName: string;
    revisionDigest: string;
};
/** @internal */
export declare const Tag$inboundSchema: z.ZodType<Tag, z.ZodTypeDef, unknown>;
/** @internal */
export type Tag$Outbound = {
    id: string;
    name: string;
    namespace_name: string;
    revision_digest: string;
};
/** @internal */
export declare const Tag$outboundSchema: z.ZodType<Tag$Outbound, z.ZodTypeDef, Tag>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Tag$ {
    /** @deprecated use `Tag$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Tag, z.ZodTypeDef, unknown>;
    /** @deprecated use `Tag$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Tag$Outbound, z.ZodTypeDef, Tag>;
    /** @deprecated use `Tag$Outbound` instead. */
    type Outbound = Tag$Outbound;
}
export declare function tagToJSON(tag: Tag): string;
export declare function tagFromJSON(jsonString: string): SafeParseResult<Tag, SDKValidationError>;
//# sourceMappingURL=tag.d.ts.map