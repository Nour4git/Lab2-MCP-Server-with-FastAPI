import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Organization, Organization$Outbound } from "./organization.js";
import { Workspace, Workspace$Outbound } from "./workspace.js";
/**
 * A workspace and organization
 */
export type WorkspaceAndOrganization = {
    /**
     * A speakeasy organization
     */
    organization: Organization;
    /**
     * A speakeasy workspace
     */
    workspace: Workspace;
};
/** @internal */
export declare const WorkspaceAndOrganization$inboundSchema: z.ZodType<WorkspaceAndOrganization, z.ZodTypeDef, unknown>;
/** @internal */
export type WorkspaceAndOrganization$Outbound = {
    organization: Organization$Outbound;
    workspace: Workspace$Outbound;
};
/** @internal */
export declare const WorkspaceAndOrganization$outboundSchema: z.ZodType<WorkspaceAndOrganization$Outbound, z.ZodTypeDef, WorkspaceAndOrganization>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WorkspaceAndOrganization$ {
    /** @deprecated use `WorkspaceAndOrganization$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WorkspaceAndOrganization, z.ZodTypeDef, unknown>;
    /** @deprecated use `WorkspaceAndOrganization$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WorkspaceAndOrganization$Outbound, z.ZodTypeDef, WorkspaceAndOrganization>;
    /** @deprecated use `WorkspaceAndOrganization$Outbound` instead. */
    type Outbound = WorkspaceAndOrganization$Outbound;
}
export declare function workspaceAndOrganizationToJSON(workspaceAndOrganization: WorkspaceAndOrganization): string;
export declare function workspaceAndOrganizationFromJSON(jsonString: string): SafeParseResult<WorkspaceAndOrganization, SDKValidationError>;
//# sourceMappingURL=workspaceandorganization.d.ts.map