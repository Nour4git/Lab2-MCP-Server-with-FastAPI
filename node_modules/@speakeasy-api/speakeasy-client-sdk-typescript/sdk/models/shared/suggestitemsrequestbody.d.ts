import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type SuggestItemsRequestBody = {
    /**
     * The list of "things" to get suggestions for. One suggestion will be returned for each item in the list.
     */
    items: Array<string>;
    /**
     * The prompt to use for the suggestion. Think of this as the "preamble".
     */
    prompt: string;
};
/** @internal */
export declare const SuggestItemsRequestBody$inboundSchema: z.ZodType<SuggestItemsRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type SuggestItemsRequestBody$Outbound = {
    items: Array<string>;
    prompt: string;
};
/** @internal */
export declare const SuggestItemsRequestBody$outboundSchema: z.ZodType<SuggestItemsRequestBody$Outbound, z.ZodTypeDef, SuggestItemsRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SuggestItemsRequestBody$ {
    /** @deprecated use `SuggestItemsRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SuggestItemsRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `SuggestItemsRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SuggestItemsRequestBody$Outbound, z.ZodTypeDef, SuggestItemsRequestBody>;
    /** @deprecated use `SuggestItemsRequestBody$Outbound` instead. */
    type Outbound = SuggestItemsRequestBody$Outbound;
}
export declare function suggestItemsRequestBodyToJSON(suggestItemsRequestBody: SuggestItemsRequestBody): string;
export declare function suggestItemsRequestBodyFromJSON(jsonString: string): SafeParseResult<SuggestItemsRequestBody, SDKValidationError>;
//# sourceMappingURL=suggestitemsrequestbody.d.ts.map