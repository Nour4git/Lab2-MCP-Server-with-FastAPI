import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type OrganizationUsage = {
    /**
     * Indicates if the features are accessible
     */
    accessible: boolean;
    /**
     * Features that are accessible
     */
    accessibleFeatures: Array<string>;
    /**
     * List of generation lock IDs
     */
    genLockIds: Array<string>;
    /**
     * The programming language used
     */
    language: string;
    /**
     * Maximum Number of operations per SDK specific in contract
     */
    maxOperations: number;
    /**
     * Number of operations performed
     */
    numberOfOperations: number;
    /**
     * Features that have been used
     */
    usedFeatures: Array<string>;
    /**
     * List of workspace IDs
     */
    workspaces: Array<string>;
};
/** @internal */
export declare const OrganizationUsage$inboundSchema: z.ZodType<OrganizationUsage, z.ZodTypeDef, unknown>;
/** @internal */
export type OrganizationUsage$Outbound = {
    accessible: boolean;
    accessible_features: Array<string>;
    gen_lock_ids: Array<string>;
    language: string;
    max_operations: number;
    number_of_operations: number;
    used_features: Array<string>;
    workspaces: Array<string>;
};
/** @internal */
export declare const OrganizationUsage$outboundSchema: z.ZodType<OrganizationUsage$Outbound, z.ZodTypeDef, OrganizationUsage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrganizationUsage$ {
    /** @deprecated use `OrganizationUsage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrganizationUsage, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrganizationUsage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrganizationUsage$Outbound, z.ZodTypeDef, OrganizationUsage>;
    /** @deprecated use `OrganizationUsage$Outbound` instead. */
    type Outbound = OrganizationUsage$Outbound;
}
export declare function organizationUsageToJSON(organizationUsage: OrganizationUsage): string;
export declare function organizationUsageFromJSON(jsonString: string): SafeParseResult<OrganizationUsage, SDKValidationError>;
//# sourceMappingURL=organizationusage.d.ts.map