import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A PreflightToken is a token that allows access to the OCI distribution endpoints.
 */
export type PreflightToken = {
    authToken?: string | undefined;
};
/** @internal */
export declare const PreflightToken$inboundSchema: z.ZodType<PreflightToken, z.ZodTypeDef, unknown>;
/** @internal */
export type PreflightToken$Outbound = {
    auth_token?: string | undefined;
};
/** @internal */
export declare const PreflightToken$outboundSchema: z.ZodType<PreflightToken$Outbound, z.ZodTypeDef, PreflightToken>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PreflightToken$ {
    /** @deprecated use `PreflightToken$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PreflightToken, z.ZodTypeDef, unknown>;
    /** @deprecated use `PreflightToken$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PreflightToken$Outbound, z.ZodTypeDef, PreflightToken>;
    /** @deprecated use `PreflightToken$Outbound` instead. */
    type Outbound = PreflightToken$Outbound;
}
export declare function preflightTokenToJSON(preflightToken: PreflightToken): string;
export declare function preflightTokenFromJSON(jsonString: string): SafeParseResult<PreflightToken, SDKValidationError>;
//# sourceMappingURL=preflighttoken.d.ts.map