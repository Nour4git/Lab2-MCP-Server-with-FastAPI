"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseValidationError = void 0;
const z = __importStar(require("zod"));
const sdkvalidationerror_js_1 = require("./sdkvalidationerror.js");
const speakeasyerror_js_1 = require("./speakeasyerror.js");
class ResponseValidationError extends speakeasyerror_js_1.SpeakeasyError {
    constructor(message, extra) {
        super(message, extra);
        this.name = "ResponseValidationError";
        this.cause = extra.cause;
        this.rawValue = extra.rawValue;
        this.rawMessage = extra.rawMessage;
    }
    /**
     * Return a pretty-formatted error message if the underlying validation error
     * is a ZodError or some other recognized error type, otherwise return the
     * default error message.
     */
    pretty() {
        if (this.cause instanceof z.ZodError) {
            return `${this.rawMessage}\n${(0, sdkvalidationerror_js_1.formatZodError)(this.cause)}`;
        }
        else {
            return this.toString();
        }
    }
}
exports.ResponseValidationError = ResponseValidationError;
//# sourceMappingURL=responsevalidationerror.js.map