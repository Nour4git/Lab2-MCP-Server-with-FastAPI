import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";
export type MethodPaths = {
    method: shared.HttpMethod;
    path: string;
};
export type GetCodeSamplesRequest = {
    /**
     * The registry URL from which to retrieve the snippets.
     */
    registryUrl: string;
    /**
     * The operation IDs to retrieve snippets for.
     */
    operationIds?: Array<string> | undefined;
    /**
     * The method paths to retrieve snippets for.
     */
    methodPaths?: Array<MethodPaths> | undefined;
    /**
     * The languages to retrieve snippets for.
     */
    languages?: Array<string> | undefined;
};
/** @internal */
export declare const MethodPaths$inboundSchema: z.ZodType<MethodPaths, z.ZodTypeDef, unknown>;
/** @internal */
export type MethodPaths$Outbound = {
    method: string;
    path: string;
};
/** @internal */
export declare const MethodPaths$outboundSchema: z.ZodType<MethodPaths$Outbound, z.ZodTypeDef, MethodPaths>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MethodPaths$ {
    /** @deprecated use `MethodPaths$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MethodPaths, z.ZodTypeDef, unknown>;
    /** @deprecated use `MethodPaths$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MethodPaths$Outbound, z.ZodTypeDef, MethodPaths>;
    /** @deprecated use `MethodPaths$Outbound` instead. */
    type Outbound = MethodPaths$Outbound;
}
export declare function methodPathsToJSON(methodPaths: MethodPaths): string;
export declare function methodPathsFromJSON(jsonString: string): SafeParseResult<MethodPaths, SDKValidationError>;
/** @internal */
export declare const GetCodeSamplesRequest$inboundSchema: z.ZodType<GetCodeSamplesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCodeSamplesRequest$Outbound = {
    registry_url: string;
    operation_ids?: Array<string> | undefined;
    method_paths?: Array<MethodPaths$Outbound> | undefined;
    languages?: Array<string> | undefined;
};
/** @internal */
export declare const GetCodeSamplesRequest$outboundSchema: z.ZodType<GetCodeSamplesRequest$Outbound, z.ZodTypeDef, GetCodeSamplesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCodeSamplesRequest$ {
    /** @deprecated use `GetCodeSamplesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCodeSamplesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCodeSamplesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCodeSamplesRequest$Outbound, z.ZodTypeDef, GetCodeSamplesRequest>;
    /** @deprecated use `GetCodeSamplesRequest$Outbound` instead. */
    type Outbound = GetCodeSamplesRequest$Outbound;
}
export declare function getCodeSamplesRequestToJSON(getCodeSamplesRequest: GetCodeSamplesRequest): string;
export declare function getCodeSamplesRequestFromJSON(jsonString: string): SafeParseResult<GetCodeSamplesRequest, SDKValidationError>;
//# sourceMappingURL=getcodesamples.d.ts.map