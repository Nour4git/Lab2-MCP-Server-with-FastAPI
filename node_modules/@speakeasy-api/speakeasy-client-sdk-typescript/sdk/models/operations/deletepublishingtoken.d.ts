import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DeletePublishingTokenRequest = {
    /**
     * Unique identifier of the publishing token.
     */
    tokenID: string;
};
/** @internal */
export declare const DeletePublishingTokenRequest$inboundSchema: z.ZodType<DeletePublishingTokenRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeletePublishingTokenRequest$Outbound = {
    tokenID: string;
};
/** @internal */
export declare const DeletePublishingTokenRequest$outboundSchema: z.ZodType<DeletePublishingTokenRequest$Outbound, z.ZodTypeDef, DeletePublishingTokenRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeletePublishingTokenRequest$ {
    /** @deprecated use `DeletePublishingTokenRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeletePublishingTokenRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeletePublishingTokenRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeletePublishingTokenRequest$Outbound, z.ZodTypeDef, DeletePublishingTokenRequest>;
    /** @deprecated use `DeletePublishingTokenRequest$Outbound` instead. */
    type Outbound = DeletePublishingTokenRequest$Outbound;
}
export declare function deletePublishingTokenRequestToJSON(deletePublishingTokenRequest: DeletePublishingTokenRequest): string;
export declare function deletePublishingTokenRequestFromJSON(jsonString: string): SafeParseResult<DeletePublishingTokenRequest, SDKValidationError>;
//# sourceMappingURL=deletepublishingtoken.d.ts.map