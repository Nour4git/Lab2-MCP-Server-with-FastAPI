"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostWorkspaceEventsRequest$ = exports.PostWorkspaceEventsRequest$outboundSchema = exports.PostWorkspaceEventsRequest$inboundSchema = exports.PostWorkspaceEventsGlobals$ = exports.PostWorkspaceEventsGlobals$outboundSchema = exports.PostWorkspaceEventsGlobals$inboundSchema = void 0;
exports.postWorkspaceEventsGlobalsToJSON = postWorkspaceEventsGlobalsToJSON;
exports.postWorkspaceEventsGlobalsFromJSON = postWorkspaceEventsGlobalsFromJSON;
exports.postWorkspaceEventsRequestToJSON = postWorkspaceEventsRequestToJSON;
exports.postWorkspaceEventsRequestFromJSON = postWorkspaceEventsRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.PostWorkspaceEventsGlobals$inboundSchema = z.object({
    workspace_id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workspace_id": "workspaceId",
    });
});
/** @internal */
exports.PostWorkspaceEventsGlobals$outboundSchema = z.object({
    workspaceId: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workspaceId: "workspace_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostWorkspaceEventsGlobals$;
(function (PostWorkspaceEventsGlobals$) {
    /** @deprecated use `PostWorkspaceEventsGlobals$inboundSchema` instead. */
    PostWorkspaceEventsGlobals$.inboundSchema = exports.PostWorkspaceEventsGlobals$inboundSchema;
    /** @deprecated use `PostWorkspaceEventsGlobals$outboundSchema` instead. */
    PostWorkspaceEventsGlobals$.outboundSchema = exports.PostWorkspaceEventsGlobals$outboundSchema;
})(PostWorkspaceEventsGlobals$ || (exports.PostWorkspaceEventsGlobals$ = PostWorkspaceEventsGlobals$ = {}));
function postWorkspaceEventsGlobalsToJSON(postWorkspaceEventsGlobals) {
    return JSON.stringify(exports.PostWorkspaceEventsGlobals$outboundSchema.parse(postWorkspaceEventsGlobals));
}
function postWorkspaceEventsGlobalsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PostWorkspaceEventsGlobals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PostWorkspaceEventsGlobals' from JSON`);
}
/** @internal */
exports.PostWorkspaceEventsRequest$inboundSchema = z.object({
    workspace_id: z.string().optional(),
    RequestBody: z.array(shared.CliEvent$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workspace_id": "workspaceId",
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.PostWorkspaceEventsRequest$outboundSchema = z.object({
    workspaceId: z.string().optional(),
    requestBody: z.array(shared.CliEvent$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workspaceId: "workspace_id",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PostWorkspaceEventsRequest$;
(function (PostWorkspaceEventsRequest$) {
    /** @deprecated use `PostWorkspaceEventsRequest$inboundSchema` instead. */
    PostWorkspaceEventsRequest$.inboundSchema = exports.PostWorkspaceEventsRequest$inboundSchema;
    /** @deprecated use `PostWorkspaceEventsRequest$outboundSchema` instead. */
    PostWorkspaceEventsRequest$.outboundSchema = exports.PostWorkspaceEventsRequest$outboundSchema;
})(PostWorkspaceEventsRequest$ || (exports.PostWorkspaceEventsRequest$ = PostWorkspaceEventsRequest$ = {}));
function postWorkspaceEventsRequestToJSON(postWorkspaceEventsRequest) {
    return JSON.stringify(exports.PostWorkspaceEventsRequest$outboundSchema.parse(postWorkspaceEventsRequest));
}
function postWorkspaceEventsRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.PostWorkspaceEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PostWorkspaceEventsRequest' from JSON`);
}
//# sourceMappingURL=postworkspaceevents.js.map