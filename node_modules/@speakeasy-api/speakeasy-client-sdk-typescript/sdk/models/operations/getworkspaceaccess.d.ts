import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetWorkspaceAccessRequest = {
    /**
     * Unique identifier of the generation target.
     */
    genLockId?: string | undefined;
    /**
     * The type of the generated target.
     */
    targetType?: string | undefined;
    /**
     * Skip side-effects like incrementing metrics.
     */
    passive?: boolean | undefined;
};
/** @internal */
export declare const GetWorkspaceAccessRequest$inboundSchema: z.ZodType<GetWorkspaceAccessRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWorkspaceAccessRequest$Outbound = {
    genLockId?: string | undefined;
    targetType?: string | undefined;
    passive?: boolean | undefined;
};
/** @internal */
export declare const GetWorkspaceAccessRequest$outboundSchema: z.ZodType<GetWorkspaceAccessRequest$Outbound, z.ZodTypeDef, GetWorkspaceAccessRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWorkspaceAccessRequest$ {
    /** @deprecated use `GetWorkspaceAccessRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWorkspaceAccessRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWorkspaceAccessRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWorkspaceAccessRequest$Outbound, z.ZodTypeDef, GetWorkspaceAccessRequest>;
    /** @deprecated use `GetWorkspaceAccessRequest$Outbound` instead. */
    type Outbound = GetWorkspaceAccessRequest$Outbound;
}
export declare function getWorkspaceAccessRequestToJSON(getWorkspaceAccessRequest: GetWorkspaceAccessRequest): string;
export declare function getWorkspaceAccessRequestFromJSON(jsonString: string): SafeParseResult<GetWorkspaceAccessRequest, SDKValidationError>;
//# sourceMappingURL=getworkspaceaccess.d.ts.map