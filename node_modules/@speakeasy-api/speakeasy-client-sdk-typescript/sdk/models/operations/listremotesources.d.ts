import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type ListRemoteSourcesRequest = {
    namespaceName: string;
};
/** @internal */
export declare const ListRemoteSourcesRequest$inboundSchema: z.ZodType<ListRemoteSourcesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ListRemoteSourcesRequest$Outbound = {
    namespace_name: string;
};
/** @internal */
export declare const ListRemoteSourcesRequest$outboundSchema: z.ZodType<ListRemoteSourcesRequest$Outbound, z.ZodTypeDef, ListRemoteSourcesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListRemoteSourcesRequest$ {
    /** @deprecated use `ListRemoteSourcesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListRemoteSourcesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListRemoteSourcesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListRemoteSourcesRequest$Outbound, z.ZodTypeDef, ListRemoteSourcesRequest>;
    /** @deprecated use `ListRemoteSourcesRequest$Outbound` instead. */
    type Outbound = ListRemoteSourcesRequest$Outbound;
}
export declare function listRemoteSourcesRequestToJSON(listRemoteSourcesRequest: ListRemoteSourcesRequest): string;
export declare function listRemoteSourcesRequestFromJSON(jsonString: string): SafeParseResult<ListRemoteSourcesRequest, SDKValidationError>;
//# sourceMappingURL=listremotesources.d.ts.map