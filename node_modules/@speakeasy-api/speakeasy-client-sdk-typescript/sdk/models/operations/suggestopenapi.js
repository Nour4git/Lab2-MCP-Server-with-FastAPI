"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuggestOpenAPIRequest$ = exports.SuggestOpenAPIRequest$outboundSchema = exports.SuggestOpenAPIRequest$inboundSchema = exports.SuggestOpenAPIRequestBody$ = exports.SuggestOpenAPIRequestBody$outboundSchema = exports.SuggestOpenAPIRequestBody$inboundSchema = exports.Schema$ = exports.Schema$outboundSchema = exports.Schema$inboundSchema = void 0;
exports.schemaToJSON = schemaToJSON;
exports.schemaFromJSON = schemaFromJSON;
exports.suggestOpenAPIRequestBodyToJSON = suggestOpenAPIRequestBodyToJSON;
exports.suggestOpenAPIRequestBodyFromJSON = suggestOpenAPIRequestBodyFromJSON;
exports.suggestOpenAPIRequestToJSON = suggestOpenAPIRequestToJSON;
exports.suggestOpenAPIRequestFromJSON = suggestOpenAPIRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const blobs_js_1 = require("../../types/blobs.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.Schema$inboundSchema = z
    .object({
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
    fileName: z.string(),
});
/** @internal */
exports.Schema$outboundSchema = z.object({
    content: z.union([
        z.instanceof((ReadableStream)),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array),
    ]),
    fileName: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Schema$;
(function (Schema$) {
    /** @deprecated use `Schema$inboundSchema` instead. */
    Schema$.inboundSchema = exports.Schema$inboundSchema;
    /** @deprecated use `Schema$outboundSchema` instead. */
    Schema$.outboundSchema = exports.Schema$outboundSchema;
})(Schema$ || (exports.Schema$ = Schema$ = {}));
function schemaToJSON(schema) {
    return JSON.stringify(exports.Schema$outboundSchema.parse(schema));
}
function schemaFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Schema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Schema' from JSON`);
}
/** @internal */
exports.SuggestOpenAPIRequestBody$inboundSchema = z.object({
    opts: shared.SuggestOptsOld$inboundSchema.optional(),
    schema: z.lazy(() => exports.Schema$inboundSchema),
});
/** @internal */
exports.SuggestOpenAPIRequestBody$outboundSchema = z.object({
    opts: shared.SuggestOptsOld$outboundSchema.optional(),
    schema: z.lazy(() => exports.Schema$outboundSchema).or(blobs_js_1.blobLikeSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SuggestOpenAPIRequestBody$;
(function (SuggestOpenAPIRequestBody$) {
    /** @deprecated use `SuggestOpenAPIRequestBody$inboundSchema` instead. */
    SuggestOpenAPIRequestBody$.inboundSchema = exports.SuggestOpenAPIRequestBody$inboundSchema;
    /** @deprecated use `SuggestOpenAPIRequestBody$outboundSchema` instead. */
    SuggestOpenAPIRequestBody$.outboundSchema = exports.SuggestOpenAPIRequestBody$outboundSchema;
})(SuggestOpenAPIRequestBody$ || (exports.SuggestOpenAPIRequestBody$ = SuggestOpenAPIRequestBody$ = {}));
function suggestOpenAPIRequestBodyToJSON(suggestOpenAPIRequestBody) {
    return JSON.stringify(exports.SuggestOpenAPIRequestBody$outboundSchema.parse(suggestOpenAPIRequestBody));
}
function suggestOpenAPIRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SuggestOpenAPIRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SuggestOpenAPIRequestBody' from JSON`);
}
/** @internal */
exports.SuggestOpenAPIRequest$inboundSchema = z.object({
    "x-session-id": z.string(),
    RequestBody: z.lazy(() => exports.SuggestOpenAPIRequestBody$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "x-session-id": "xSessionId",
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.SuggestOpenAPIRequest$outboundSchema = z.object({
    xSessionId: z.string(),
    requestBody: z.lazy(() => exports.SuggestOpenAPIRequestBody$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        xSessionId: "x-session-id",
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SuggestOpenAPIRequest$;
(function (SuggestOpenAPIRequest$) {
    /** @deprecated use `SuggestOpenAPIRequest$inboundSchema` instead. */
    SuggestOpenAPIRequest$.inboundSchema = exports.SuggestOpenAPIRequest$inboundSchema;
    /** @deprecated use `SuggestOpenAPIRequest$outboundSchema` instead. */
    SuggestOpenAPIRequest$.outboundSchema = exports.SuggestOpenAPIRequest$outboundSchema;
})(SuggestOpenAPIRequest$ || (exports.SuggestOpenAPIRequest$ = SuggestOpenAPIRequest$ = {}));
function suggestOpenAPIRequestToJSON(suggestOpenAPIRequest) {
    return JSON.stringify(exports.SuggestOpenAPIRequest$outboundSchema.parse(suggestOpenAPIRequest));
}
function suggestOpenAPIRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SuggestOpenAPIRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SuggestOpenAPIRequest' from JSON`);
}
//# sourceMappingURL=suggestopenapi.js.map