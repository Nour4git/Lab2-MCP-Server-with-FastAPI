import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetRevisionsRequest = {
    namespaceName: string;
    /**
     * Token to retrieve the next page of results
     */
    nextPageToken?: string | undefined;
};
/** @internal */
export declare const GetRevisionsRequest$inboundSchema: z.ZodType<GetRevisionsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetRevisionsRequest$Outbound = {
    namespace_name: string;
    next_page_token?: string | undefined;
};
/** @internal */
export declare const GetRevisionsRequest$outboundSchema: z.ZodType<GetRevisionsRequest$Outbound, z.ZodTypeDef, GetRevisionsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetRevisionsRequest$ {
    /** @deprecated use `GetRevisionsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRevisionsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRevisionsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRevisionsRequest$Outbound, z.ZodTypeDef, GetRevisionsRequest>;
    /** @deprecated use `GetRevisionsRequest$Outbound` instead. */
    type Outbound = GetRevisionsRequest$Outbound;
}
export declare function getRevisionsRequestToJSON(getRevisionsRequest: GetRevisionsRequest): string;
export declare function getRevisionsRequestFromJSON(jsonString: string): SafeParseResult<GetRevisionsRequest, SDKValidationError>;
//# sourceMappingURL=getrevisions.d.ts.map