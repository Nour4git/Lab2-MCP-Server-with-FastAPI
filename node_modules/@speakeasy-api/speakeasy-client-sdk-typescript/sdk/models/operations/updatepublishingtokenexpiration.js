"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdatePublishingTokenExpirationRequest$ = exports.UpdatePublishingTokenExpirationRequest$outboundSchema = exports.UpdatePublishingTokenExpirationRequest$inboundSchema = exports.UpdatePublishingTokenExpirationRequestBody$ = exports.UpdatePublishingTokenExpirationRequestBody$outboundSchema = exports.UpdatePublishingTokenExpirationRequestBody$inboundSchema = void 0;
exports.updatePublishingTokenExpirationRequestBodyToJSON = updatePublishingTokenExpirationRequestBodyToJSON;
exports.updatePublishingTokenExpirationRequestBodyFromJSON = updatePublishingTokenExpirationRequestBodyFromJSON;
exports.updatePublishingTokenExpirationRequestToJSON = updatePublishingTokenExpirationRequestToJSON;
exports.updatePublishingTokenExpirationRequestFromJSON = updatePublishingTokenExpirationRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
/** @internal */
exports.UpdatePublishingTokenExpirationRequestBody$inboundSchema = z.object({
    token_name: z.string().optional(),
    valid_until: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "token_name": "tokenName",
        "valid_until": "validUntil",
    });
});
/** @internal */
exports.UpdatePublishingTokenExpirationRequestBody$outboundSchema = z.object({
    tokenName: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        tokenName: "token_name",
        validUntil: "valid_until",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UpdatePublishingTokenExpirationRequestBody$;
(function (UpdatePublishingTokenExpirationRequestBody$) {
    /** @deprecated use `UpdatePublishingTokenExpirationRequestBody$inboundSchema` instead. */
    UpdatePublishingTokenExpirationRequestBody$.inboundSchema = exports.UpdatePublishingTokenExpirationRequestBody$inboundSchema;
    /** @deprecated use `UpdatePublishingTokenExpirationRequestBody$outboundSchema` instead. */
    UpdatePublishingTokenExpirationRequestBody$.outboundSchema = exports.UpdatePublishingTokenExpirationRequestBody$outboundSchema;
})(UpdatePublishingTokenExpirationRequestBody$ || (exports.UpdatePublishingTokenExpirationRequestBody$ = UpdatePublishingTokenExpirationRequestBody$ = {}));
function updatePublishingTokenExpirationRequestBodyToJSON(updatePublishingTokenExpirationRequestBody) {
    return JSON.stringify(exports.UpdatePublishingTokenExpirationRequestBody$outboundSchema.parse(updatePublishingTokenExpirationRequestBody));
}
function updatePublishingTokenExpirationRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdatePublishingTokenExpirationRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdatePublishingTokenExpirationRequestBody' from JSON`);
}
/** @internal */
exports.UpdatePublishingTokenExpirationRequest$inboundSchema = z.object({
    tokenID: z.string(),
    RequestBody: z.lazy(() => exports.UpdatePublishingTokenExpirationRequestBody$inboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
exports.UpdatePublishingTokenExpirationRequest$outboundSchema = z.object({
    tokenID: z.string(),
    requestBody: z.lazy(() => exports.UpdatePublishingTokenExpirationRequestBody$outboundSchema).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UpdatePublishingTokenExpirationRequest$;
(function (UpdatePublishingTokenExpirationRequest$) {
    /** @deprecated use `UpdatePublishingTokenExpirationRequest$inboundSchema` instead. */
    UpdatePublishingTokenExpirationRequest$.inboundSchema = exports.UpdatePublishingTokenExpirationRequest$inboundSchema;
    /** @deprecated use `UpdatePublishingTokenExpirationRequest$outboundSchema` instead. */
    UpdatePublishingTokenExpirationRequest$.outboundSchema = exports.UpdatePublishingTokenExpirationRequest$outboundSchema;
})(UpdatePublishingTokenExpirationRequest$ || (exports.UpdatePublishingTokenExpirationRequest$ = UpdatePublishingTokenExpirationRequest$ = {}));
function updatePublishingTokenExpirationRequestToJSON(updatePublishingTokenExpirationRequest) {
    return JSON.stringify(exports.UpdatePublishingTokenExpirationRequest$outboundSchema.parse(updatePublishingTokenExpirationRequest));
}
function updatePublishingTokenExpirationRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdatePublishingTokenExpirationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdatePublishingTokenExpirationRequest' from JSON`);
}
//# sourceMappingURL=updatepublishingtokenexpiration.js.map