import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetOrganizationRequest = {
    /**
     * Unique identifier of the organization.
     */
    organizationID: string;
};
/** @internal */
export declare const GetOrganizationRequest$inboundSchema: z.ZodType<GetOrganizationRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetOrganizationRequest$Outbound = {
    organizationID: string;
};
/** @internal */
export declare const GetOrganizationRequest$outboundSchema: z.ZodType<GetOrganizationRequest$Outbound, z.ZodTypeDef, GetOrganizationRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetOrganizationRequest$ {
    /** @deprecated use `GetOrganizationRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetOrganizationRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetOrganizationRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetOrganizationRequest$Outbound, z.ZodTypeDef, GetOrganizationRequest>;
    /** @deprecated use `GetOrganizationRequest$Outbound` instead. */
    type Outbound = GetOrganizationRequest$Outbound;
}
export declare function getOrganizationRequestToJSON(getOrganizationRequest: GetOrganizationRequest): string;
export declare function getOrganizationRequestFromJSON(jsonString: string): SafeParseResult<GetOrganizationRequest, SDKValidationError>;
//# sourceMappingURL=getorganization.d.ts.map