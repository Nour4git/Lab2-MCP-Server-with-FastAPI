import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetBlobRequest = {
    organizationSlug: string;
    workspaceSlug: string;
    namespaceName: string;
    digest: string;
};
/** @internal */
export declare const GetBlobRequest$inboundSchema: z.ZodType<GetBlobRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetBlobRequest$Outbound = {
    organization_slug: string;
    workspace_slug: string;
    namespace_name: string;
    digest: string;
};
/** @internal */
export declare const GetBlobRequest$outboundSchema: z.ZodType<GetBlobRequest$Outbound, z.ZodTypeDef, GetBlobRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetBlobRequest$ {
    /** @deprecated use `GetBlobRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetBlobRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetBlobRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetBlobRequest$Outbound, z.ZodTypeDef, GetBlobRequest>;
    /** @deprecated use `GetBlobRequest$Outbound` instead. */
    type Outbound = GetBlobRequest$Outbound;
}
export declare function getBlobRequestToJSON(getBlobRequest: GetBlobRequest): string;
export declare function getBlobRequestFromJSON(jsonString: string): SafeParseResult<GetBlobRequest, SDKValidationError>;
//# sourceMappingURL=getblob.d.ts.map