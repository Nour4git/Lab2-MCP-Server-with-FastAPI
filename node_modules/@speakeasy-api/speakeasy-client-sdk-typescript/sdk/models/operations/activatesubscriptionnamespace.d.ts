import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type ActivateSubscriptionNamespaceRequest = {
    /**
     * The existing subscription ID
     */
    subscriptionID: string;
    /**
     * The namespace name
     */
    namespaceName: string;
};
/** @internal */
export declare const ActivateSubscriptionNamespaceRequest$inboundSchema: z.ZodType<ActivateSubscriptionNamespaceRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ActivateSubscriptionNamespaceRequest$Outbound = {
    subscriptionID: string;
    namespaceName: string;
};
/** @internal */
export declare const ActivateSubscriptionNamespaceRequest$outboundSchema: z.ZodType<ActivateSubscriptionNamespaceRequest$Outbound, z.ZodTypeDef, ActivateSubscriptionNamespaceRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActivateSubscriptionNamespaceRequest$ {
    /** @deprecated use `ActivateSubscriptionNamespaceRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivateSubscriptionNamespaceRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivateSubscriptionNamespaceRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivateSubscriptionNamespaceRequest$Outbound, z.ZodTypeDef, ActivateSubscriptionNamespaceRequest>;
    /** @deprecated use `ActivateSubscriptionNamespaceRequest$Outbound` instead. */
    type Outbound = ActivateSubscriptionNamespaceRequest$Outbound;
}
export declare function activateSubscriptionNamespaceRequestToJSON(activateSubscriptionNamespaceRequest: ActivateSubscriptionNamespaceRequest): string;
export declare function activateSubscriptionNamespaceRequestFromJSON(jsonString: string): SafeParseResult<ActivateSubscriptionNamespaceRequest, SDKValidationError>;
//# sourceMappingURL=activatesubscriptionnamespace.d.ts.map