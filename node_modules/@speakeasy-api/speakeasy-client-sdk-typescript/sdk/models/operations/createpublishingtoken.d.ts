import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The publishing token to create
 */
export type CreatePublishingTokenRequestBody = {
    targetId: string;
    targetResource: string;
    tokenName: string;
    validUntil: Date;
};
/** @internal */
export declare const CreatePublishingTokenRequestBody$inboundSchema: z.ZodType<CreatePublishingTokenRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreatePublishingTokenRequestBody$Outbound = {
    target_id: string;
    target_resource: string;
    token_name: string;
    valid_until: string;
};
/** @internal */
export declare const CreatePublishingTokenRequestBody$outboundSchema: z.ZodType<CreatePublishingTokenRequestBody$Outbound, z.ZodTypeDef, CreatePublishingTokenRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreatePublishingTokenRequestBody$ {
    /** @deprecated use `CreatePublishingTokenRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreatePublishingTokenRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreatePublishingTokenRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreatePublishingTokenRequestBody$Outbound, z.ZodTypeDef, CreatePublishingTokenRequestBody>;
    /** @deprecated use `CreatePublishingTokenRequestBody$Outbound` instead. */
    type Outbound = CreatePublishingTokenRequestBody$Outbound;
}
export declare function createPublishingTokenRequestBodyToJSON(createPublishingTokenRequestBody: CreatePublishingTokenRequestBody): string;
export declare function createPublishingTokenRequestBodyFromJSON(jsonString: string): SafeParseResult<CreatePublishingTokenRequestBody, SDKValidationError>;
//# sourceMappingURL=createpublishingtoken.d.ts.map