import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetPublishingTokenPublicMetadataRequest = {
    /**
     * Unique identifier of the publishing token.
     */
    tokenID: string;
};
/**
 * OK
 */
export type GetPublishingTokenPublicMetadataResponseBody = {
    organizationId?: string | undefined;
    targetId?: string | undefined;
    targetResource?: string | undefined;
    validUntil?: Date | undefined;
    workspaceId?: string | undefined;
};
/** @internal */
export declare const GetPublishingTokenPublicMetadataRequest$inboundSchema: z.ZodType<GetPublishingTokenPublicMetadataRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetPublishingTokenPublicMetadataRequest$Outbound = {
    tokenID: string;
};
/** @internal */
export declare const GetPublishingTokenPublicMetadataRequest$outboundSchema: z.ZodType<GetPublishingTokenPublicMetadataRequest$Outbound, z.ZodTypeDef, GetPublishingTokenPublicMetadataRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetPublishingTokenPublicMetadataRequest$ {
    /** @deprecated use `GetPublishingTokenPublicMetadataRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPublishingTokenPublicMetadataRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPublishingTokenPublicMetadataRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPublishingTokenPublicMetadataRequest$Outbound, z.ZodTypeDef, GetPublishingTokenPublicMetadataRequest>;
    /** @deprecated use `GetPublishingTokenPublicMetadataRequest$Outbound` instead. */
    type Outbound = GetPublishingTokenPublicMetadataRequest$Outbound;
}
export declare function getPublishingTokenPublicMetadataRequestToJSON(getPublishingTokenPublicMetadataRequest: GetPublishingTokenPublicMetadataRequest): string;
export declare function getPublishingTokenPublicMetadataRequestFromJSON(jsonString: string): SafeParseResult<GetPublishingTokenPublicMetadataRequest, SDKValidationError>;
/** @internal */
export declare const GetPublishingTokenPublicMetadataResponseBody$inboundSchema: z.ZodType<GetPublishingTokenPublicMetadataResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetPublishingTokenPublicMetadataResponseBody$Outbound = {
    organization_id?: string | undefined;
    target_id?: string | undefined;
    target_resource?: string | undefined;
    valid_until?: string | undefined;
    workspace_id?: string | undefined;
};
/** @internal */
export declare const GetPublishingTokenPublicMetadataResponseBody$outboundSchema: z.ZodType<GetPublishingTokenPublicMetadataResponseBody$Outbound, z.ZodTypeDef, GetPublishingTokenPublicMetadataResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetPublishingTokenPublicMetadataResponseBody$ {
    /** @deprecated use `GetPublishingTokenPublicMetadataResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPublishingTokenPublicMetadataResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPublishingTokenPublicMetadataResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPublishingTokenPublicMetadataResponseBody$Outbound, z.ZodTypeDef, GetPublishingTokenPublicMetadataResponseBody>;
    /** @deprecated use `GetPublishingTokenPublicMetadataResponseBody$Outbound` instead. */
    type Outbound = GetPublishingTokenPublicMetadataResponseBody$Outbound;
}
export declare function getPublishingTokenPublicMetadataResponseBodyToJSON(getPublishingTokenPublicMetadataResponseBody: GetPublishingTokenPublicMetadataResponseBody): string;
export declare function getPublishingTokenPublicMetadataResponseBodyFromJSON(jsonString: string): SafeParseResult<GetPublishingTokenPublicMetadataResponseBody, SDKValidationError>;
//# sourceMappingURL=getpublishingtokenpublicmetadata.d.ts.map