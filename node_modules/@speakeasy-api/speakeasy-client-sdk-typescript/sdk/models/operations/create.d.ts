import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type CreateRequestBody = {
    /**
     * URL to shorten
     */
    url: string;
};
/** @internal */
export declare const CreateRequestBody$inboundSchema: z.ZodType<CreateRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateRequestBody$Outbound = {
    url: string;
};
/** @internal */
export declare const CreateRequestBody$outboundSchema: z.ZodType<CreateRequestBody$Outbound, z.ZodTypeDef, CreateRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateRequestBody$ {
    /** @deprecated use `CreateRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateRequestBody$Outbound, z.ZodTypeDef, CreateRequestBody>;
    /** @deprecated use `CreateRequestBody$Outbound` instead. */
    type Outbound = CreateRequestBody$Outbound;
}
export declare function createRequestBodyToJSON(createRequestBody: CreateRequestBody): string;
export declare function createRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateRequestBody, SDKValidationError>;
//# sourceMappingURL=create.d.ts.map