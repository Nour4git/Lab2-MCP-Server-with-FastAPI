import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type LinkGithubAccessRequest = {
    installationId?: string | undefined;
    githubOrg?: string | undefined;
    githubOidcToken?: string | undefined;
};
/** @internal */
export declare const LinkGithubAccessRequest$inboundSchema: z.ZodType<LinkGithubAccessRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type LinkGithubAccessRequest$Outbound = {
    installation_id?: string | undefined;
    github_org?: string | undefined;
    github_oidc_token?: string | undefined;
};
/** @internal */
export declare const LinkGithubAccessRequest$outboundSchema: z.ZodType<LinkGithubAccessRequest$Outbound, z.ZodTypeDef, LinkGithubAccessRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LinkGithubAccessRequest$ {
    /** @deprecated use `LinkGithubAccessRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LinkGithubAccessRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `LinkGithubAccessRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LinkGithubAccessRequest$Outbound, z.ZodTypeDef, LinkGithubAccessRequest>;
    /** @deprecated use `LinkGithubAccessRequest$Outbound` instead. */
    type Outbound = LinkGithubAccessRequest$Outbound;
}
export declare function linkGithubAccessRequestToJSON(linkGithubAccessRequest: LinkGithubAccessRequest): string;
export declare function linkGithubAccessRequestFromJSON(jsonString: string): SafeParseResult<LinkGithubAccessRequest, SDKValidationError>;
//# sourceMappingURL=linkgithubaccess.d.ts.map