import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetPublishingTokenByIDRequest = {
    /**
     * Unique identifier of the publishing token.
     */
    tokenID: string;
};
/** @internal */
export declare const GetPublishingTokenByIDRequest$inboundSchema: z.ZodType<GetPublishingTokenByIDRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetPublishingTokenByIDRequest$Outbound = {
    tokenID: string;
};
/** @internal */
export declare const GetPublishingTokenByIDRequest$outboundSchema: z.ZodType<GetPublishingTokenByIDRequest$Outbound, z.ZodTypeDef, GetPublishingTokenByIDRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetPublishingTokenByIDRequest$ {
    /** @deprecated use `GetPublishingTokenByIDRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPublishingTokenByIDRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPublishingTokenByIDRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPublishingTokenByIDRequest$Outbound, z.ZodTypeDef, GetPublishingTokenByIDRequest>;
    /** @deprecated use `GetPublishingTokenByIDRequest$Outbound` instead. */
    type Outbound = GetPublishingTokenByIDRequest$Outbound;
}
export declare function getPublishingTokenByIDRequestToJSON(getPublishingTokenByIDRequest: GetPublishingTokenByIDRequest): string;
export declare function getPublishingTokenByIDRequestFromJSON(jsonString: string): SafeParseResult<GetPublishingTokenByIDRequest, SDKValidationError>;
//# sourceMappingURL=getpublishingtokenbyid.d.ts.map