import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The format of the OpenAPI specification.
 */
export declare const Format: {
    readonly Json: "json";
    readonly Yaml: "yaml";
};
/**
 * The format of the OpenAPI specification.
 */
export type Format = ClosedEnum<typeof Format>;
export type CreateSchemaStoreItemRequestBody = {
    /**
     * The format of the OpenAPI specification.
     */
    format: Format;
    /**
     * The package name to use in code snippets / quickstart.
     */
    packageName: string;
    /**
     * The classname of the SDK to use in code snippets / quickstart.
     */
    sdkClassname: string;
    /**
     * The OpenAPI specification to store.
     */
    spec: string;
};
/** @internal */
export declare const Format$inboundSchema: z.ZodNativeEnum<typeof Format>;
/** @internal */
export declare const Format$outboundSchema: z.ZodNativeEnum<typeof Format>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Format$ {
    /** @deprecated use `Format$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Json: "json";
        readonly Yaml: "yaml";
    }>;
    /** @deprecated use `Format$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Json: "json";
        readonly Yaml: "yaml";
    }>;
}
/** @internal */
export declare const CreateSchemaStoreItemRequestBody$inboundSchema: z.ZodType<CreateSchemaStoreItemRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSchemaStoreItemRequestBody$Outbound = {
    format: string;
    packageName: string;
    sdkClassname: string;
    spec: string;
};
/** @internal */
export declare const CreateSchemaStoreItemRequestBody$outboundSchema: z.ZodType<CreateSchemaStoreItemRequestBody$Outbound, z.ZodTypeDef, CreateSchemaStoreItemRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSchemaStoreItemRequestBody$ {
    /** @deprecated use `CreateSchemaStoreItemRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSchemaStoreItemRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSchemaStoreItemRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSchemaStoreItemRequestBody$Outbound, z.ZodTypeDef, CreateSchemaStoreItemRequestBody>;
    /** @deprecated use `CreateSchemaStoreItemRequestBody$Outbound` instead. */
    type Outbound = CreateSchemaStoreItemRequestBody$Outbound;
}
export declare function createSchemaStoreItemRequestBodyToJSON(createSchemaStoreItemRequestBody: CreateSchemaStoreItemRequestBody): string;
export declare function createSchemaStoreItemRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateSchemaStoreItemRequestBody, SDKValidationError>;
//# sourceMappingURL=createschemastoreitem.d.ts.map