import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";
export type FileT = {
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
    fileName: string;
};
/**
 * The report file to upload provided as a multipart/form-data file segment.
 */
export type UploadReportRequestBody = {
    data: shared.Report;
    file: FileT | Blob;
};
/**
 * OK
 */
export type UploadReportUploadedReport = {
    url: string;
};
/** @internal */
export declare const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown>;
/** @internal */
export type FileT$Outbound = {
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
    fileName: string;
};
/** @internal */
export declare const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown>;
    /** @deprecated use `FileT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT>;
    /** @deprecated use `FileT$Outbound` instead. */
    type Outbound = FileT$Outbound;
}
export declare function fileToJSON(fileT: FileT): string;
export declare function fileFromJSON(jsonString: string): SafeParseResult<FileT, SDKValidationError>;
/** @internal */
export declare const UploadReportRequestBody$inboundSchema: z.ZodType<UploadReportRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadReportRequestBody$Outbound = {
    data: shared.Report$Outbound;
    file: FileT$Outbound | Blob;
};
/** @internal */
export declare const UploadReportRequestBody$outboundSchema: z.ZodType<UploadReportRequestBody$Outbound, z.ZodTypeDef, UploadReportRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadReportRequestBody$ {
    /** @deprecated use `UploadReportRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadReportRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadReportRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadReportRequestBody$Outbound, z.ZodTypeDef, UploadReportRequestBody>;
    /** @deprecated use `UploadReportRequestBody$Outbound` instead. */
    type Outbound = UploadReportRequestBody$Outbound;
}
export declare function uploadReportRequestBodyToJSON(uploadReportRequestBody: UploadReportRequestBody): string;
export declare function uploadReportRequestBodyFromJSON(jsonString: string): SafeParseResult<UploadReportRequestBody, SDKValidationError>;
/** @internal */
export declare const UploadReportUploadedReport$inboundSchema: z.ZodType<UploadReportUploadedReport, z.ZodTypeDef, unknown>;
/** @internal */
export type UploadReportUploadedReport$Outbound = {
    url: string;
};
/** @internal */
export declare const UploadReportUploadedReport$outboundSchema: z.ZodType<UploadReportUploadedReport$Outbound, z.ZodTypeDef, UploadReportUploadedReport>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UploadReportUploadedReport$ {
    /** @deprecated use `UploadReportUploadedReport$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadReportUploadedReport, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadReportUploadedReport$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadReportUploadedReport$Outbound, z.ZodTypeDef, UploadReportUploadedReport>;
    /** @deprecated use `UploadReportUploadedReport$Outbound` instead. */
    type Outbound = UploadReportUploadedReport$Outbound;
}
export declare function uploadReportUploadedReportToJSON(uploadReportUploadedReport: UploadReportUploadedReport): string;
export declare function uploadReportUploadedReportFromJSON(jsonString: string): SafeParseResult<UploadReportUploadedReport, SDKValidationError>;
//# sourceMappingURL=uploadreport.d.ts.map