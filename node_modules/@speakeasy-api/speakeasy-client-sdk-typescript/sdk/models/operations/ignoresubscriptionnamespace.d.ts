import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type IgnoreSubscriptionNamespaceRequest = {
    /**
     * The existing subscription ID
     */
    subscriptionID: string;
    /**
     * The namespace name
     */
    namespaceName: string;
};
/** @internal */
export declare const IgnoreSubscriptionNamespaceRequest$inboundSchema: z.ZodType<IgnoreSubscriptionNamespaceRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type IgnoreSubscriptionNamespaceRequest$Outbound = {
    subscriptionID: string;
    namespaceName: string;
};
/** @internal */
export declare const IgnoreSubscriptionNamespaceRequest$outboundSchema: z.ZodType<IgnoreSubscriptionNamespaceRequest$Outbound, z.ZodTypeDef, IgnoreSubscriptionNamespaceRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace IgnoreSubscriptionNamespaceRequest$ {
    /** @deprecated use `IgnoreSubscriptionNamespaceRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IgnoreSubscriptionNamespaceRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IgnoreSubscriptionNamespaceRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IgnoreSubscriptionNamespaceRequest$Outbound, z.ZodTypeDef, IgnoreSubscriptionNamespaceRequest>;
    /** @deprecated use `IgnoreSubscriptionNamespaceRequest$Outbound` instead. */
    type Outbound = IgnoreSubscriptionNamespaceRequest$Outbound;
}
export declare function ignoreSubscriptionNamespaceRequestToJSON(ignoreSubscriptionNamespaceRequest: IgnoreSubscriptionNamespaceRequest): string;
export declare function ignoreSubscriptionNamespaceRequestFromJSON(jsonString: string): SafeParseResult<IgnoreSubscriptionNamespaceRequest, SDKValidationError>;
//# sourceMappingURL=ignoresubscriptionnamespace.d.ts.map