"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchWorkspaceEventsRequest$ = exports.SearchWorkspaceEventsRequest$outboundSchema = exports.SearchWorkspaceEventsRequest$inboundSchema = exports.SearchWorkspaceEventsGlobals$ = exports.SearchWorkspaceEventsGlobals$outboundSchema = exports.SearchWorkspaceEventsGlobals$inboundSchema = void 0;
exports.searchWorkspaceEventsGlobalsToJSON = searchWorkspaceEventsGlobalsToJSON;
exports.searchWorkspaceEventsGlobalsFromJSON = searchWorkspaceEventsGlobalsFromJSON;
exports.searchWorkspaceEventsRequestToJSON = searchWorkspaceEventsRequestToJSON;
exports.searchWorkspaceEventsRequestFromJSON = searchWorkspaceEventsRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../../lib/primitives.js");
const schemas_js_1 = require("../../../lib/schemas.js");
const shared = __importStar(require("../shared/index.js"));
/** @internal */
exports.SearchWorkspaceEventsGlobals$inboundSchema = z.object({
    workspace_id: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workspace_id": "workspaceId",
    });
});
/** @internal */
exports.SearchWorkspaceEventsGlobals$outboundSchema = z.object({
    workspaceId: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workspaceId: "workspace_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SearchWorkspaceEventsGlobals$;
(function (SearchWorkspaceEventsGlobals$) {
    /** @deprecated use `SearchWorkspaceEventsGlobals$inboundSchema` instead. */
    SearchWorkspaceEventsGlobals$.inboundSchema = exports.SearchWorkspaceEventsGlobals$inboundSchema;
    /** @deprecated use `SearchWorkspaceEventsGlobals$outboundSchema` instead. */
    SearchWorkspaceEventsGlobals$.outboundSchema = exports.SearchWorkspaceEventsGlobals$outboundSchema;
})(SearchWorkspaceEventsGlobals$ || (exports.SearchWorkspaceEventsGlobals$ = SearchWorkspaceEventsGlobals$ = {}));
function searchWorkspaceEventsGlobalsToJSON(searchWorkspaceEventsGlobals) {
    return JSON.stringify(exports.SearchWorkspaceEventsGlobals$outboundSchema.parse(searchWorkspaceEventsGlobals));
}
function searchWorkspaceEventsGlobalsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SearchWorkspaceEventsGlobals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchWorkspaceEventsGlobals' from JSON`);
}
/** @internal */
exports.SearchWorkspaceEventsRequest$inboundSchema = z.object({
    workspace_id: z.string().optional(),
    source_revision_digest: z.string().optional(),
    lint_report_digest: z.string().optional(),
    openapi_diff_report_digest: z.string().optional(),
    interaction_type: shared.InteractionType$inboundSchema.optional(),
    generate_gen_lock_id: z.string().optional(),
    execution_id: z.string().optional(),
    success: z.boolean().optional(),
    limit: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "workspace_id": "workspaceId",
        "source_revision_digest": "sourceRevisionDigest",
        "lint_report_digest": "lintReportDigest",
        "openapi_diff_report_digest": "openapiDiffReportDigest",
        "interaction_type": "interactionType",
        "generate_gen_lock_id": "generateGenLockId",
        "execution_id": "executionId",
    });
});
/** @internal */
exports.SearchWorkspaceEventsRequest$outboundSchema = z.object({
    workspaceId: z.string().optional(),
    sourceRevisionDigest: z.string().optional(),
    lintReportDigest: z.string().optional(),
    openapiDiffReportDigest: z.string().optional(),
    interactionType: shared.InteractionType$outboundSchema.optional(),
    generateGenLockId: z.string().optional(),
    executionId: z.string().optional(),
    success: z.boolean().optional(),
    limit: z.number().int().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        workspaceId: "workspace_id",
        sourceRevisionDigest: "source_revision_digest",
        lintReportDigest: "lint_report_digest",
        openapiDiffReportDigest: "openapi_diff_report_digest",
        interactionType: "interaction_type",
        generateGenLockId: "generate_gen_lock_id",
        executionId: "execution_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SearchWorkspaceEventsRequest$;
(function (SearchWorkspaceEventsRequest$) {
    /** @deprecated use `SearchWorkspaceEventsRequest$inboundSchema` instead. */
    SearchWorkspaceEventsRequest$.inboundSchema = exports.SearchWorkspaceEventsRequest$inboundSchema;
    /** @deprecated use `SearchWorkspaceEventsRequest$outboundSchema` instead. */
    SearchWorkspaceEventsRequest$.outboundSchema = exports.SearchWorkspaceEventsRequest$outboundSchema;
})(SearchWorkspaceEventsRequest$ || (exports.SearchWorkspaceEventsRequest$ = SearchWorkspaceEventsRequest$ = {}));
function searchWorkspaceEventsRequestToJSON(searchWorkspaceEventsRequest) {
    return JSON.stringify(exports.SearchWorkspaceEventsRequest$outboundSchema.parse(searchWorkspaceEventsRequest));
}
function searchWorkspaceEventsRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SearchWorkspaceEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchWorkspaceEventsRequest' from JSON`);
}
//# sourceMappingURL=searchworkspaceevents.js.map