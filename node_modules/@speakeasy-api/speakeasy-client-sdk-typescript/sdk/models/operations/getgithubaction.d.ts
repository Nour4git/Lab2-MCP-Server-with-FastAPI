import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetGitHubActionRequest = {
    /**
     * The targetName of the workflow target.
     */
    targetName?: string | undefined;
    org: string;
    repo: string;
};
/** @internal */
export declare const GetGitHubActionRequest$inboundSchema: z.ZodType<GetGitHubActionRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetGitHubActionRequest$Outbound = {
    targetName?: string | undefined;
    org: string;
    repo: string;
};
/** @internal */
export declare const GetGitHubActionRequest$outboundSchema: z.ZodType<GetGitHubActionRequest$Outbound, z.ZodTypeDef, GetGitHubActionRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetGitHubActionRequest$ {
    /** @deprecated use `GetGitHubActionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetGitHubActionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetGitHubActionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetGitHubActionRequest$Outbound, z.ZodTypeDef, GetGitHubActionRequest>;
    /** @deprecated use `GetGitHubActionRequest$Outbound` instead. */
    type Outbound = GetGitHubActionRequest$Outbound;
}
export declare function getGitHubActionRequestToJSON(getGitHubActionRequest: GetGitHubActionRequest): string;
export declare function getGitHubActionRequestFromJSON(jsonString: string): SafeParseResult<GetGitHubActionRequest, SDKValidationError>;
//# sourceMappingURL=getgithubaction.d.ts.map