import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetAccessTokenRequest = {
    /**
     * The workspace ID
     */
    workspaceId: string;
};
/** @internal */
export declare const GetAccessTokenRequest$inboundSchema: z.ZodType<GetAccessTokenRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAccessTokenRequest$Outbound = {
    workspace_id: string;
};
/** @internal */
export declare const GetAccessTokenRequest$outboundSchema: z.ZodType<GetAccessTokenRequest$Outbound, z.ZodTypeDef, GetAccessTokenRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAccessTokenRequest$ {
    /** @deprecated use `GetAccessTokenRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAccessTokenRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAccessTokenRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAccessTokenRequest$Outbound, z.ZodTypeDef, GetAccessTokenRequest>;
    /** @deprecated use `GetAccessTokenRequest$Outbound` instead. */
    type Outbound = GetAccessTokenRequest$Outbound;
}
export declare function getAccessTokenRequestToJSON(getAccessTokenRequest: GetAccessTokenRequest): string;
export declare function getAccessTokenRequestFromJSON(jsonString: string): SafeParseResult<GetAccessTokenRequest, SDKValidationError>;
//# sourceMappingURL=getaccesstoken.d.ts.map