import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetManifestRequest = {
    organizationSlug: string;
    workspaceSlug: string;
    namespaceName: string;
    /**
     * Tag or digest
     */
    revisionReference: string;
};
/** @internal */
export declare const GetManifestRequest$inboundSchema: z.ZodType<GetManifestRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetManifestRequest$Outbound = {
    organization_slug: string;
    workspace_slug: string;
    namespace_name: string;
    revision_reference: string;
};
/** @internal */
export declare const GetManifestRequest$outboundSchema: z.ZodType<GetManifestRequest$Outbound, z.ZodTypeDef, GetManifestRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetManifestRequest$ {
    /** @deprecated use `GetManifestRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetManifestRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetManifestRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetManifestRequest$Outbound, z.ZodTypeDef, GetManifestRequest>;
    /** @deprecated use `GetManifestRequest$Outbound` instead. */
    type Outbound = GetManifestRequest$Outbound;
}
export declare function getManifestRequestToJSON(getManifestRequest: GetManifestRequest): string;
export declare function getManifestRequestFromJSON(jsonString: string): SafeParseResult<GetManifestRequest, SDKValidationError>;
//# sourceMappingURL=getmanifest.d.ts.map